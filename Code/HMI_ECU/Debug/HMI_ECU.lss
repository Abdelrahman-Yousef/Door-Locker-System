
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003a36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000088  00800060  00003a36  00003aca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  008000e8  008000e8  00003b52  2**0
                  ALLOC
  3 .stab         00002eb0  00000000  00000000  00003b54  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010c5  00000000  00000000  00006a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007c09  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007d79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000099c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a8ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b65c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b7bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ba49  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c217  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 ae 1a 	jmp	0x355c	; 0x355c <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 7b 1a 	jmp	0x34f6	; 0x34f6 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e3       	ldi	r30, 0x36	; 54
      68:	fa e3       	ldi	r31, 0x3A	; 58
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3e       	cpi	r26, 0xE8	; 232
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 ee       	ldi	r26, 0xE8	; 232
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 3e       	cpi	r26, 0xEB	; 235
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ad 05 	call	0xb5a	; 0xb5a <main>
      8a:	0c 94 19 1d 	jmp	0x3a32	; 0x3a32 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9d 1c 	jmp	0x393a	; 0x393a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad ec       	ldi	r26, 0xCD	; 205
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b9 1c 	jmp	0x3972	; 0x3972 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a9 1c 	jmp	0x3952	; 0x3952 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c5 1c 	jmp	0x398a	; 0x398a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a9 1c 	jmp	0x3952	; 0x3952 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c5 1c 	jmp	0x398a	; 0x398a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9d 1c 	jmp	0x393a	; 0x393a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d ec       	ldi	r24, 0xCD	; 205
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b9 1c 	jmp	0x3972	; 0x3972 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a9 1c 	jmp	0x3952	; 0x3952 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c5 1c 	jmp	0x398a	; 0x398a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 a9 1c 	jmp	0x3952	; 0x3952 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c5 1c 	jmp	0x398a	; 0x398a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 a9 1c 	jmp	0x3952	; 0x3952 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c5 1c 	jmp	0x398a	; 0x398a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 ad 1c 	jmp	0x395a	; 0x395a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 c9 1c 	jmp	0x3992	; 0x3992 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <changeFlagValue>:
volatile uint8 g_flag = 0;

/*
 * function to change the flag variable
 */
void changeFlagValue(void) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	g_flag = 1;
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	80 93 e8 00 	sts	0x00E8, r24
}
     b54:	cf 91       	pop	r28
     b56:	df 91       	pop	r29
     b58:	08 95       	ret

00000b5a <main>:

int main(void) {
     b5a:	0f 93       	push	r16
     b5c:	1f 93       	push	r17
     b5e:	df 93       	push	r29
     b60:	cf 93       	push	r28
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
     b66:	cd 58       	subi	r28, 0x8D	; 141
     b68:	d0 40       	sbci	r29, 0x00	; 0
     b6a:	0f b6       	in	r0, 0x3f	; 63
     b6c:	f8 94       	cli
     b6e:	de bf       	out	0x3e, r29	; 62
     b70:	0f be       	out	0x3f, r0	; 63
     b72:	cd bf       	out	0x3d, r28	; 61

	/*
	 * enable the global interrupt
	 */
	SREG |= (1 << 7);
     b74:	af e5       	ldi	r26, 0x5F	; 95
     b76:	b0 e0       	ldi	r27, 0x00	; 0
     b78:	ef e5       	ldi	r30, 0x5F	; 95
     b7a:	f0 e0       	ldi	r31, 0x00	; 0
     b7c:	80 81       	ld	r24, Z
     b7e:	80 68       	ori	r24, 0x80	; 128
     b80:	8c 93       	st	X, r24

	/*
	 * initialize the LCD module
	 */
	LCD_init();
     b82:	0e 94 22 10 	call	0x2044	; 0x2044 <LCD_init>

	/*
	 * initilaize the UART module
	 */
	UART_ConfigType configUART = { EIGHT_BIT, EVEN_PARITY, ONE_BIT, 9600 };
     b86:	ce 01       	movw	r24, r28
     b88:	80 5a       	subi	r24, 0xA0	; 160
     b8a:	9f 4f       	sbci	r25, 0xFF	; 255
     b8c:	c1 58       	subi	r28, 0x81	; 129
     b8e:	df 4f       	sbci	r29, 0xFF	; 255
     b90:	99 83       	std	Y+1, r25	; 0x01
     b92:	88 83       	st	Y, r24
     b94:	cf 57       	subi	r28, 0x7F	; 127
     b96:	d0 40       	sbci	r29, 0x00	; 0
     b98:	81 ee       	ldi	r24, 0xE1	; 225
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	cf 57       	subi	r28, 0x7F	; 127
     b9e:	df 4f       	sbci	r29, 0xFF	; 255
     ba0:	99 83       	std	Y+1, r25	; 0x01
     ba2:	88 83       	st	Y, r24
     ba4:	c1 58       	subi	r28, 0x81	; 129
     ba6:	d0 40       	sbci	r29, 0x00	; 0
     ba8:	97 e0       	ldi	r25, 0x07	; 7
     baa:	cd 57       	subi	r28, 0x7D	; 125
     bac:	df 4f       	sbci	r29, 0xFF	; 255
     bae:	98 83       	st	Y, r25
     bb0:	c3 58       	subi	r28, 0x83	; 131
     bb2:	d0 40       	sbci	r29, 0x00	; 0
     bb4:	cf 57       	subi	r28, 0x7F	; 127
     bb6:	df 4f       	sbci	r29, 0xFF	; 255
     bb8:	e8 81       	ld	r30, Y
     bba:	f9 81       	ldd	r31, Y+1	; 0x01
     bbc:	c1 58       	subi	r28, 0x81	; 129
     bbe:	d0 40       	sbci	r29, 0x00	; 0
     bc0:	00 80       	ld	r0, Z
     bc2:	cf 57       	subi	r28, 0x7F	; 127
     bc4:	df 4f       	sbci	r29, 0xFF	; 255
     bc6:	88 81       	ld	r24, Y
     bc8:	99 81       	ldd	r25, Y+1	; 0x01
     bca:	c1 58       	subi	r28, 0x81	; 129
     bcc:	d0 40       	sbci	r29, 0x00	; 0
     bce:	01 96       	adiw	r24, 0x01	; 1
     bd0:	cf 57       	subi	r28, 0x7F	; 127
     bd2:	df 4f       	sbci	r29, 0xFF	; 255
     bd4:	99 83       	std	Y+1, r25	; 0x01
     bd6:	88 83       	st	Y, r24
     bd8:	c1 58       	subi	r28, 0x81	; 129
     bda:	d0 40       	sbci	r29, 0x00	; 0
     bdc:	c1 58       	subi	r28, 0x81	; 129
     bde:	df 4f       	sbci	r29, 0xFF	; 255
     be0:	e8 81       	ld	r30, Y
     be2:	f9 81       	ldd	r31, Y+1	; 0x01
     be4:	cf 57       	subi	r28, 0x7F	; 127
     be6:	d0 40       	sbci	r29, 0x00	; 0
     be8:	00 82       	st	Z, r0
     bea:	c1 58       	subi	r28, 0x81	; 129
     bec:	df 4f       	sbci	r29, 0xFF	; 255
     bee:	88 81       	ld	r24, Y
     bf0:	99 81       	ldd	r25, Y+1	; 0x01
     bf2:	cf 57       	subi	r28, 0x7F	; 127
     bf4:	d0 40       	sbci	r29, 0x00	; 0
     bf6:	01 96       	adiw	r24, 0x01	; 1
     bf8:	c1 58       	subi	r28, 0x81	; 129
     bfa:	df 4f       	sbci	r29, 0xFF	; 255
     bfc:	99 83       	std	Y+1, r25	; 0x01
     bfe:	88 83       	st	Y, r24
     c00:	cf 57       	subi	r28, 0x7F	; 127
     c02:	d0 40       	sbci	r29, 0x00	; 0
     c04:	cd 57       	subi	r28, 0x7D	; 125
     c06:	df 4f       	sbci	r29, 0xFF	; 255
     c08:	98 81       	ld	r25, Y
     c0a:	c3 58       	subi	r28, 0x83	; 131
     c0c:	d0 40       	sbci	r29, 0x00	; 0
     c0e:	91 50       	subi	r25, 0x01	; 1
     c10:	cd 57       	subi	r28, 0x7D	; 125
     c12:	df 4f       	sbci	r29, 0xFF	; 255
     c14:	98 83       	st	Y, r25
     c16:	c3 58       	subi	r28, 0x83	; 131
     c18:	d0 40       	sbci	r29, 0x00	; 0
     c1a:	cd 57       	subi	r28, 0x7D	; 125
     c1c:	df 4f       	sbci	r29, 0xFF	; 255
     c1e:	e8 81       	ld	r30, Y
     c20:	c3 58       	subi	r28, 0x83	; 131
     c22:	d0 40       	sbci	r29, 0x00	; 0
     c24:	ee 23       	and	r30, r30
     c26:	31 f6       	brne	.-116    	; 0xbb4 <main+0x5a>
	UART_init(&configUART);
     c28:	ce 01       	movw	r24, r28
     c2a:	80 5a       	subi	r24, 0xA0	; 160
     c2c:	9f 4f       	sbci	r25, 0xFF	; 255
     c2e:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <UART_init>

	/*
	 * set the call back pointer with changeFlagValue function
	 */
	TIMER1_setCallBack(changeFlagValue);
     c32:	83 ea       	ldi	r24, 0xA3	; 163
     c34:	95 e0       	ldi	r25, 0x05	; 5
     c36:	0e 94 40 1b 	call	0x3680	; 0x3680 <TIMER1_setCallBack>
	while (1) {
		do {
			/*
			 * ask the user to enter the password
			 */
			LCD_clearScreen();
     c3a:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <LCD_clearScreen>
			LCD_displayString("Plz enter pass:");
     c3e:	80 e6       	ldi	r24, 0x60	; 96
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	0e 94 ca 19 	call	0x3394	; 0x3394 <LCD_displayString>
			LCD_moveCursor(1, 0);
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	60 e0       	ldi	r22, 0x00	; 0
     c4a:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <LCD_moveCursor>

			/*
			 * variable to store the password entered by the user
			 */
			uint32 password = 0;
     c4e:	fe 01       	movw	r30, r28
     c50:	e9 59       	subi	r30, 0x99	; 153
     c52:	ff 4f       	sbci	r31, 0xFF	; 255
     c54:	10 82       	st	Z, r1
     c56:	11 82       	std	Z+1, r1	; 0x01
     c58:	12 82       	std	Z+2, r1	; 0x02
     c5a:	13 82       	std	Z+3, r1	; 0x03

			/*
			 * take the input entered by the user
			 */
			uint8 pressedKey = KEYPAD_getPressedKey();
     c5c:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <KEYPAD_getPressedKey>
     c60:	fe 01       	movw	r30, r28
     c62:	e2 5a       	subi	r30, 0xA2	; 162
     c64:	ff 4f       	sbci	r31, 0xFF	; 255
     c66:	80 83       	st	Z, r24
     c68:	fe 01       	movw	r30, r28
     c6a:	ef 5a       	subi	r30, 0xAF	; 175
     c6c:	ff 4f       	sbci	r31, 0xFF	; 255
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	a8 e4       	ldi	r26, 0x48	; 72
     c74:	b3 e4       	ldi	r27, 0x43	; 67
     c76:	80 83       	st	Z, r24
     c78:	91 83       	std	Z+1, r25	; 0x01
     c7a:	a2 83       	std	Z+2, r26	; 0x02
     c7c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c7e:	8e 01       	movw	r16, r28
     c80:	03 5b       	subi	r16, 0xB3	; 179
     c82:	1f 4f       	sbci	r17, 0xFF	; 255
     c84:	fe 01       	movw	r30, r28
     c86:	ef 5a       	subi	r30, 0xAF	; 175
     c88:	ff 4f       	sbci	r31, 0xFF	; 255
     c8a:	60 81       	ld	r22, Z
     c8c:	71 81       	ldd	r23, Z+1	; 0x01
     c8e:	82 81       	ldd	r24, Z+2	; 0x02
     c90:	93 81       	ldd	r25, Z+3	; 0x03
     c92:	20 e0       	ldi	r18, 0x00	; 0
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	4a e7       	ldi	r20, 0x7A	; 122
     c98:	53 e4       	ldi	r21, 0x43	; 67
     c9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c9e:	dc 01       	movw	r26, r24
     ca0:	cb 01       	movw	r24, r22
     ca2:	f8 01       	movw	r30, r16
     ca4:	80 83       	st	Z, r24
     ca6:	91 83       	std	Z+1, r25	; 0x01
     ca8:	a2 83       	std	Z+2, r26	; 0x02
     caa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     cac:	fe 01       	movw	r30, r28
     cae:	e3 5b       	subi	r30, 0xB3	; 179
     cb0:	ff 4f       	sbci	r31, 0xFF	; 255
     cb2:	60 81       	ld	r22, Z
     cb4:	71 81       	ldd	r23, Z+1	; 0x01
     cb6:	82 81       	ldd	r24, Z+2	; 0x02
     cb8:	93 81       	ldd	r25, Z+3	; 0x03
     cba:	20 e0       	ldi	r18, 0x00	; 0
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	40 e8       	ldi	r20, 0x80	; 128
     cc0:	5f e3       	ldi	r21, 0x3F	; 63
     cc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cc6:	88 23       	and	r24, r24
     cc8:	44 f4       	brge	.+16     	; 0xcda <main+0x180>
		__ticks = 1;
     cca:	fe 01       	movw	r30, r28
     ccc:	e5 5b       	subi	r30, 0xB5	; 181
     cce:	ff 4f       	sbci	r31, 0xFF	; 255
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	91 83       	std	Z+1, r25	; 0x01
     cd6:	80 83       	st	Z, r24
     cd8:	64 c0       	rjmp	.+200    	; 0xda2 <main+0x248>
	else if (__tmp > 65535)
     cda:	fe 01       	movw	r30, r28
     cdc:	e3 5b       	subi	r30, 0xB3	; 179
     cde:	ff 4f       	sbci	r31, 0xFF	; 255
     ce0:	60 81       	ld	r22, Z
     ce2:	71 81       	ldd	r23, Z+1	; 0x01
     ce4:	82 81       	ldd	r24, Z+2	; 0x02
     ce6:	93 81       	ldd	r25, Z+3	; 0x03
     ce8:	20 e0       	ldi	r18, 0x00	; 0
     cea:	3f ef       	ldi	r19, 0xFF	; 255
     cec:	4f e7       	ldi	r20, 0x7F	; 127
     cee:	57 e4       	ldi	r21, 0x47	; 71
     cf0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cf4:	18 16       	cp	r1, r24
     cf6:	0c f0       	brlt	.+2      	; 0xcfa <main+0x1a0>
     cf8:	43 c0       	rjmp	.+134    	; 0xd80 <main+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cfa:	fe 01       	movw	r30, r28
     cfc:	ef 5a       	subi	r30, 0xAF	; 175
     cfe:	ff 4f       	sbci	r31, 0xFF	; 255
     d00:	60 81       	ld	r22, Z
     d02:	71 81       	ldd	r23, Z+1	; 0x01
     d04:	82 81       	ldd	r24, Z+2	; 0x02
     d06:	93 81       	ldd	r25, Z+3	; 0x03
     d08:	20 e0       	ldi	r18, 0x00	; 0
     d0a:	30 e0       	ldi	r19, 0x00	; 0
     d0c:	40 e2       	ldi	r20, 0x20	; 32
     d0e:	51 e4       	ldi	r21, 0x41	; 65
     d10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d14:	dc 01       	movw	r26, r24
     d16:	cb 01       	movw	r24, r22
     d18:	8e 01       	movw	r16, r28
     d1a:	05 5b       	subi	r16, 0xB5	; 181
     d1c:	1f 4f       	sbci	r17, 0xFF	; 255
     d1e:	bc 01       	movw	r22, r24
     d20:	cd 01       	movw	r24, r26
     d22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d26:	dc 01       	movw	r26, r24
     d28:	cb 01       	movw	r24, r22
     d2a:	f8 01       	movw	r30, r16
     d2c:	91 83       	std	Z+1, r25	; 0x01
     d2e:	80 83       	st	Z, r24
     d30:	1f c0       	rjmp	.+62     	; 0xd70 <main+0x216>
     d32:	fe 01       	movw	r30, r28
     d34:	e7 5b       	subi	r30, 0xB7	; 183
     d36:	ff 4f       	sbci	r31, 0xFF	; 255
     d38:	89 e1       	ldi	r24, 0x19	; 25
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	91 83       	std	Z+1, r25	; 0x01
     d3e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d40:	fe 01       	movw	r30, r28
     d42:	e7 5b       	subi	r30, 0xB7	; 183
     d44:	ff 4f       	sbci	r31, 0xFF	; 255
     d46:	80 81       	ld	r24, Z
     d48:	91 81       	ldd	r25, Z+1	; 0x01
     d4a:	01 97       	sbiw	r24, 0x01	; 1
     d4c:	f1 f7       	brne	.-4      	; 0xd4a <main+0x1f0>
     d4e:	fe 01       	movw	r30, r28
     d50:	e7 5b       	subi	r30, 0xB7	; 183
     d52:	ff 4f       	sbci	r31, 0xFF	; 255
     d54:	91 83       	std	Z+1, r25	; 0x01
     d56:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d58:	de 01       	movw	r26, r28
     d5a:	a5 5b       	subi	r26, 0xB5	; 181
     d5c:	bf 4f       	sbci	r27, 0xFF	; 255
     d5e:	fe 01       	movw	r30, r28
     d60:	e5 5b       	subi	r30, 0xB5	; 181
     d62:	ff 4f       	sbci	r31, 0xFF	; 255
     d64:	80 81       	ld	r24, Z
     d66:	91 81       	ldd	r25, Z+1	; 0x01
     d68:	01 97       	sbiw	r24, 0x01	; 1
     d6a:	11 96       	adiw	r26, 0x01	; 1
     d6c:	9c 93       	st	X, r25
     d6e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d70:	fe 01       	movw	r30, r28
     d72:	e5 5b       	subi	r30, 0xB5	; 181
     d74:	ff 4f       	sbci	r31, 0xFF	; 255
     d76:	80 81       	ld	r24, Z
     d78:	91 81       	ldd	r25, Z+1	; 0x01
     d7a:	00 97       	sbiw	r24, 0x00	; 0
     d7c:	d1 f6       	brne	.-76     	; 0xd32 <main+0x1d8>
     d7e:	db c0       	rjmp	.+438    	; 0xf36 <main+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d80:	8e 01       	movw	r16, r28
     d82:	05 5b       	subi	r16, 0xB5	; 181
     d84:	1f 4f       	sbci	r17, 0xFF	; 255
     d86:	fe 01       	movw	r30, r28
     d88:	e3 5b       	subi	r30, 0xB3	; 179
     d8a:	ff 4f       	sbci	r31, 0xFF	; 255
     d8c:	60 81       	ld	r22, Z
     d8e:	71 81       	ldd	r23, Z+1	; 0x01
     d90:	82 81       	ldd	r24, Z+2	; 0x02
     d92:	93 81       	ldd	r25, Z+3	; 0x03
     d94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d98:	dc 01       	movw	r26, r24
     d9a:	cb 01       	movw	r24, r22
     d9c:	f8 01       	movw	r30, r16
     d9e:	91 83       	std	Z+1, r25	; 0x01
     da0:	80 83       	st	Z, r24
     da2:	de 01       	movw	r26, r28
     da4:	a9 5b       	subi	r26, 0xB9	; 185
     da6:	bf 4f       	sbci	r27, 0xFF	; 255
     da8:	fe 01       	movw	r30, r28
     daa:	e5 5b       	subi	r30, 0xB5	; 181
     dac:	ff 4f       	sbci	r31, 0xFF	; 255
     dae:	80 81       	ld	r24, Z
     db0:	91 81       	ldd	r25, Z+1	; 0x01
     db2:	11 96       	adiw	r26, 0x01	; 1
     db4:	9c 93       	st	X, r25
     db6:	8e 93       	st	-X, r24
     db8:	fe 01       	movw	r30, r28
     dba:	e9 5b       	subi	r30, 0xB9	; 185
     dbc:	ff 4f       	sbci	r31, 0xFF	; 255
     dbe:	80 81       	ld	r24, Z
     dc0:	91 81       	ldd	r25, Z+1	; 0x01
     dc2:	01 97       	sbiw	r24, 0x01	; 1
     dc4:	f1 f7       	brne	.-4      	; 0xdc2 <main+0x268>
     dc6:	fe 01       	movw	r30, r28
     dc8:	e9 5b       	subi	r30, 0xB9	; 185
     dca:	ff 4f       	sbci	r31, 0xFF	; 255
     dcc:	91 83       	std	Z+1, r25	; 0x01
     dce:	80 83       	st	Z, r24
     dd0:	b2 c0       	rjmp	.+356    	; 0xf36 <main+0x3dc>
			_delay_ms(200);
			while (pressedKey != ENTER) {
				password = password * 10 + pressedKey;
     dd2:	fe 01       	movw	r30, r28
     dd4:	e9 59       	subi	r30, 0x99	; 153
     dd6:	ff 4f       	sbci	r31, 0xFF	; 255
     dd8:	80 81       	ld	r24, Z
     dda:	91 81       	ldd	r25, Z+1	; 0x01
     ddc:	a2 81       	ldd	r26, Z+2	; 0x02
     dde:	b3 81       	ldd	r27, Z+3	; 0x03
     de0:	2a e0       	ldi	r18, 0x0A	; 10
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	40 e0       	ldi	r20, 0x00	; 0
     de6:	50 e0       	ldi	r21, 0x00	; 0
     de8:	bc 01       	movw	r22, r24
     dea:	cd 01       	movw	r24, r26
     dec:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <__mulsi3>
     df0:	9b 01       	movw	r18, r22
     df2:	ac 01       	movw	r20, r24
     df4:	fe 01       	movw	r30, r28
     df6:	e2 5a       	subi	r30, 0xA2	; 162
     df8:	ff 4f       	sbci	r31, 0xFF	; 255
     dfa:	80 81       	ld	r24, Z
     dfc:	88 2f       	mov	r24, r24
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	a0 e0       	ldi	r26, 0x00	; 0
     e02:	b0 e0       	ldi	r27, 0x00	; 0
     e04:	82 0f       	add	r24, r18
     e06:	93 1f       	adc	r25, r19
     e08:	a4 1f       	adc	r26, r20
     e0a:	b5 1f       	adc	r27, r21
     e0c:	fe 01       	movw	r30, r28
     e0e:	e9 59       	subi	r30, 0x99	; 153
     e10:	ff 4f       	sbci	r31, 0xFF	; 255
     e12:	80 83       	st	Z, r24
     e14:	91 83       	std	Z+1, r25	; 0x01
     e16:	a2 83       	std	Z+2, r26	; 0x02
     e18:	b3 83       	std	Z+3, r27	; 0x03
				LCD_displayCharacter('*');
     e1a:	8a e2       	ldi	r24, 0x2A	; 42
     e1c:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <LCD_displayCharacter>

				pressedKey = KEYPAD_getPressedKey();
     e20:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <KEYPAD_getPressedKey>
     e24:	fe 01       	movw	r30, r28
     e26:	e2 5a       	subi	r30, 0xA2	; 162
     e28:	ff 4f       	sbci	r31, 0xFF	; 255
     e2a:	80 83       	st	Z, r24
     e2c:	fe 01       	movw	r30, r28
     e2e:	ed 5b       	subi	r30, 0xBD	; 189
     e30:	ff 4f       	sbci	r31, 0xFF	; 255
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	a8 e4       	ldi	r26, 0x48	; 72
     e38:	b3 e4       	ldi	r27, 0x43	; 67
     e3a:	80 83       	st	Z, r24
     e3c:	91 83       	std	Z+1, r25	; 0x01
     e3e:	a2 83       	std	Z+2, r26	; 0x02
     e40:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e42:	8e 01       	movw	r16, r28
     e44:	01 5c       	subi	r16, 0xC1	; 193
     e46:	1f 4f       	sbci	r17, 0xFF	; 255
     e48:	fe 01       	movw	r30, r28
     e4a:	ed 5b       	subi	r30, 0xBD	; 189
     e4c:	ff 4f       	sbci	r31, 0xFF	; 255
     e4e:	60 81       	ld	r22, Z
     e50:	71 81       	ldd	r23, Z+1	; 0x01
     e52:	82 81       	ldd	r24, Z+2	; 0x02
     e54:	93 81       	ldd	r25, Z+3	; 0x03
     e56:	20 e0       	ldi	r18, 0x00	; 0
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	4a e7       	ldi	r20, 0x7A	; 122
     e5c:	53 e4       	ldi	r21, 0x43	; 67
     e5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e62:	dc 01       	movw	r26, r24
     e64:	cb 01       	movw	r24, r22
     e66:	f8 01       	movw	r30, r16
     e68:	80 83       	st	Z, r24
     e6a:	91 83       	std	Z+1, r25	; 0x01
     e6c:	a2 83       	std	Z+2, r26	; 0x02
     e6e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e70:	fe 01       	movw	r30, r28
     e72:	ff 96       	adiw	r30, 0x3f	; 63
     e74:	60 81       	ld	r22, Z
     e76:	71 81       	ldd	r23, Z+1	; 0x01
     e78:	82 81       	ldd	r24, Z+2	; 0x02
     e7a:	93 81       	ldd	r25, Z+3	; 0x03
     e7c:	20 e0       	ldi	r18, 0x00	; 0
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	40 e8       	ldi	r20, 0x80	; 128
     e82:	5f e3       	ldi	r21, 0x3F	; 63
     e84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e88:	88 23       	and	r24, r24
     e8a:	2c f4       	brge	.+10     	; 0xe96 <main+0x33c>
		__ticks = 1;
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	9e af       	std	Y+62, r25	; 0x3e
     e92:	8d af       	std	Y+61, r24	; 0x3d
     e94:	46 c0       	rjmp	.+140    	; 0xf22 <main+0x3c8>
	else if (__tmp > 65535)
     e96:	fe 01       	movw	r30, r28
     e98:	ff 96       	adiw	r30, 0x3f	; 63
     e9a:	60 81       	ld	r22, Z
     e9c:	71 81       	ldd	r23, Z+1	; 0x01
     e9e:	82 81       	ldd	r24, Z+2	; 0x02
     ea0:	93 81       	ldd	r25, Z+3	; 0x03
     ea2:	20 e0       	ldi	r18, 0x00	; 0
     ea4:	3f ef       	ldi	r19, 0xFF	; 255
     ea6:	4f e7       	ldi	r20, 0x7F	; 127
     ea8:	57 e4       	ldi	r21, 0x47	; 71
     eaa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     eae:	18 16       	cp	r1, r24
     eb0:	64 f5       	brge	.+88     	; 0xf0a <main+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eb2:	fe 01       	movw	r30, r28
     eb4:	ed 5b       	subi	r30, 0xBD	; 189
     eb6:	ff 4f       	sbci	r31, 0xFF	; 255
     eb8:	60 81       	ld	r22, Z
     eba:	71 81       	ldd	r23, Z+1	; 0x01
     ebc:	82 81       	ldd	r24, Z+2	; 0x02
     ebe:	93 81       	ldd	r25, Z+3	; 0x03
     ec0:	20 e0       	ldi	r18, 0x00	; 0
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	40 e2       	ldi	r20, 0x20	; 32
     ec6:	51 e4       	ldi	r21, 0x41	; 65
     ec8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ecc:	dc 01       	movw	r26, r24
     ece:	cb 01       	movw	r24, r22
     ed0:	bc 01       	movw	r22, r24
     ed2:	cd 01       	movw	r24, r26
     ed4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ed8:	dc 01       	movw	r26, r24
     eda:	cb 01       	movw	r24, r22
     edc:	9e af       	std	Y+62, r25	; 0x3e
     ede:	8d af       	std	Y+61, r24	; 0x3d
     ee0:	0f c0       	rjmp	.+30     	; 0xf00 <main+0x3a6>
     ee2:	89 e1       	ldi	r24, 0x19	; 25
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	9c af       	std	Y+60, r25	; 0x3c
     ee8:	8b af       	std	Y+59, r24	; 0x3b
     eea:	8b ad       	ldd	r24, Y+59	; 0x3b
     eec:	9c ad       	ldd	r25, Y+60	; 0x3c
     eee:	01 97       	sbiw	r24, 0x01	; 1
     ef0:	f1 f7       	brne	.-4      	; 0xeee <main+0x394>
     ef2:	9c af       	std	Y+60, r25	; 0x3c
     ef4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ef6:	8d ad       	ldd	r24, Y+61	; 0x3d
     ef8:	9e ad       	ldd	r25, Y+62	; 0x3e
     efa:	01 97       	sbiw	r24, 0x01	; 1
     efc:	9e af       	std	Y+62, r25	; 0x3e
     efe:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f00:	8d ad       	ldd	r24, Y+61	; 0x3d
     f02:	9e ad       	ldd	r25, Y+62	; 0x3e
     f04:	00 97       	sbiw	r24, 0x00	; 0
     f06:	69 f7       	brne	.-38     	; 0xee2 <main+0x388>
     f08:	16 c0       	rjmp	.+44     	; 0xf36 <main+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f0a:	fe 01       	movw	r30, r28
     f0c:	ff 96       	adiw	r30, 0x3f	; 63
     f0e:	60 81       	ld	r22, Z
     f10:	71 81       	ldd	r23, Z+1	; 0x01
     f12:	82 81       	ldd	r24, Z+2	; 0x02
     f14:	93 81       	ldd	r25, Z+3	; 0x03
     f16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f1a:	dc 01       	movw	r26, r24
     f1c:	cb 01       	movw	r24, r22
     f1e:	9e af       	std	Y+62, r25	; 0x3e
     f20:	8d af       	std	Y+61, r24	; 0x3d
     f22:	8d ad       	ldd	r24, Y+61	; 0x3d
     f24:	9e ad       	ldd	r25, Y+62	; 0x3e
     f26:	9a af       	std	Y+58, r25	; 0x3a
     f28:	89 af       	std	Y+57, r24	; 0x39
     f2a:	89 ad       	ldd	r24, Y+57	; 0x39
     f2c:	9a ad       	ldd	r25, Y+58	; 0x3a
     f2e:	01 97       	sbiw	r24, 0x01	; 1
     f30:	f1 f7       	brne	.-4      	; 0xf2e <main+0x3d4>
     f32:	9a af       	std	Y+58, r25	; 0x3a
     f34:	89 af       	std	Y+57, r24	; 0x39
			/*
			 * take the input entered by the user
			 */
			uint8 pressedKey = KEYPAD_getPressedKey();
			_delay_ms(200);
			while (pressedKey != ENTER) {
     f36:	fe 01       	movw	r30, r28
     f38:	e2 5a       	subi	r30, 0xA2	; 162
     f3a:	ff 4f       	sbci	r31, 0xFF	; 255
     f3c:	80 81       	ld	r24, Z
     f3e:	8d 30       	cpi	r24, 0x0D	; 13
     f40:	09 f0       	breq	.+2      	; 0xf44 <main+0x3ea>
     f42:	47 cf       	rjmp	.-370    	; 0xdd2 <main+0x278>
			}

			/*
			 * ask the user to re-enter the same password
			 */
			LCD_clearScreen();
     f44:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <LCD_clearScreen>
			LCD_displayString("Plz re-entre the");
     f48:	80 e7       	ldi	r24, 0x70	; 112
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	0e 94 ca 19 	call	0x3394	; 0x3394 <LCD_displayString>
			LCD_moveCursor(1, 0);
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	60 e0       	ldi	r22, 0x00	; 0
     f54:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <LCD_moveCursor>
			LCD_displayString("same pass: ");
     f58:	81 e8       	ldi	r24, 0x81	; 129
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	0e 94 ca 19 	call	0x3394	; 0x3394 <LCD_displayString>

			/*
			 * variable to store the re-entered password
			 */
			uint32 confirmPassword = 0;
     f60:	fe 01       	movw	r30, r28
     f62:	e5 59       	subi	r30, 0x95	; 149
     f64:	ff 4f       	sbci	r31, 0xFF	; 255
     f66:	10 82       	st	Z, r1
     f68:	11 82       	std	Z+1, r1	; 0x01
     f6a:	12 82       	std	Z+2, r1	; 0x02
     f6c:	13 82       	std	Z+3, r1	; 0x03

			/*
			 * take input from the user
			 */
			pressedKey = KEYPAD_getPressedKey();
     f6e:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <KEYPAD_getPressedKey>
     f72:	fe 01       	movw	r30, r28
     f74:	e2 5a       	subi	r30, 0xA2	; 162
     f76:	ff 4f       	sbci	r31, 0xFF	; 255
     f78:	80 83       	st	Z, r24
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	a8 e4       	ldi	r26, 0x48	; 72
     f80:	b3 e4       	ldi	r27, 0x43	; 67
     f82:	8d ab       	std	Y+53, r24	; 0x35
     f84:	9e ab       	std	Y+54, r25	; 0x36
     f86:	af ab       	std	Y+55, r26	; 0x37
     f88:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f8a:	6d a9       	ldd	r22, Y+53	; 0x35
     f8c:	7e a9       	ldd	r23, Y+54	; 0x36
     f8e:	8f a9       	ldd	r24, Y+55	; 0x37
     f90:	98 ad       	ldd	r25, Y+56	; 0x38
     f92:	20 e0       	ldi	r18, 0x00	; 0
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	4a e7       	ldi	r20, 0x7A	; 122
     f98:	53 e4       	ldi	r21, 0x43	; 67
     f9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f9e:	dc 01       	movw	r26, r24
     fa0:	cb 01       	movw	r24, r22
     fa2:	89 ab       	std	Y+49, r24	; 0x31
     fa4:	9a ab       	std	Y+50, r25	; 0x32
     fa6:	ab ab       	std	Y+51, r26	; 0x33
     fa8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     faa:	69 a9       	ldd	r22, Y+49	; 0x31
     fac:	7a a9       	ldd	r23, Y+50	; 0x32
     fae:	8b a9       	ldd	r24, Y+51	; 0x33
     fb0:	9c a9       	ldd	r25, Y+52	; 0x34
     fb2:	20 e0       	ldi	r18, 0x00	; 0
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	40 e8       	ldi	r20, 0x80	; 128
     fb8:	5f e3       	ldi	r21, 0x3F	; 63
     fba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fbe:	88 23       	and	r24, r24
     fc0:	2c f4       	brge	.+10     	; 0xfcc <main+0x472>
		__ticks = 1;
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	98 ab       	std	Y+48, r25	; 0x30
     fc8:	8f a7       	std	Y+47, r24	; 0x2f
     fca:	3f c0       	rjmp	.+126    	; 0x104a <main+0x4f0>
	else if (__tmp > 65535)
     fcc:	69 a9       	ldd	r22, Y+49	; 0x31
     fce:	7a a9       	ldd	r23, Y+50	; 0x32
     fd0:	8b a9       	ldd	r24, Y+51	; 0x33
     fd2:	9c a9       	ldd	r25, Y+52	; 0x34
     fd4:	20 e0       	ldi	r18, 0x00	; 0
     fd6:	3f ef       	ldi	r19, 0xFF	; 255
     fd8:	4f e7       	ldi	r20, 0x7F	; 127
     fda:	57 e4       	ldi	r21, 0x47	; 71
     fdc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fe0:	18 16       	cp	r1, r24
     fe2:	4c f5       	brge	.+82     	; 0x1036 <main+0x4dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fe4:	6d a9       	ldd	r22, Y+53	; 0x35
     fe6:	7e a9       	ldd	r23, Y+54	; 0x36
     fe8:	8f a9       	ldd	r24, Y+55	; 0x37
     fea:	98 ad       	ldd	r25, Y+56	; 0x38
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	40 e2       	ldi	r20, 0x20	; 32
     ff2:	51 e4       	ldi	r21, 0x41	; 65
     ff4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ff8:	dc 01       	movw	r26, r24
     ffa:	cb 01       	movw	r24, r22
     ffc:	bc 01       	movw	r22, r24
     ffe:	cd 01       	movw	r24, r26
    1000:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1004:	dc 01       	movw	r26, r24
    1006:	cb 01       	movw	r24, r22
    1008:	98 ab       	std	Y+48, r25	; 0x30
    100a:	8f a7       	std	Y+47, r24	; 0x2f
    100c:	0f c0       	rjmp	.+30     	; 0x102c <main+0x4d2>
    100e:	89 e1       	ldi	r24, 0x19	; 25
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	9e a7       	std	Y+46, r25	; 0x2e
    1014:	8d a7       	std	Y+45, r24	; 0x2d
    1016:	8d a5       	ldd	r24, Y+45	; 0x2d
    1018:	9e a5       	ldd	r25, Y+46	; 0x2e
    101a:	01 97       	sbiw	r24, 0x01	; 1
    101c:	f1 f7       	brne	.-4      	; 0x101a <main+0x4c0>
    101e:	9e a7       	std	Y+46, r25	; 0x2e
    1020:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1022:	8f a5       	ldd	r24, Y+47	; 0x2f
    1024:	98 a9       	ldd	r25, Y+48	; 0x30
    1026:	01 97       	sbiw	r24, 0x01	; 1
    1028:	98 ab       	std	Y+48, r25	; 0x30
    102a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    102c:	8f a5       	ldd	r24, Y+47	; 0x2f
    102e:	98 a9       	ldd	r25, Y+48	; 0x30
    1030:	00 97       	sbiw	r24, 0x00	; 0
    1032:	69 f7       	brne	.-38     	; 0x100e <main+0x4b4>
    1034:	b4 c0       	rjmp	.+360    	; 0x119e <main+0x644>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1036:	69 a9       	ldd	r22, Y+49	; 0x31
    1038:	7a a9       	ldd	r23, Y+50	; 0x32
    103a:	8b a9       	ldd	r24, Y+51	; 0x33
    103c:	9c a9       	ldd	r25, Y+52	; 0x34
    103e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1042:	dc 01       	movw	r26, r24
    1044:	cb 01       	movw	r24, r22
    1046:	98 ab       	std	Y+48, r25	; 0x30
    1048:	8f a7       	std	Y+47, r24	; 0x2f
    104a:	8f a5       	ldd	r24, Y+47	; 0x2f
    104c:	98 a9       	ldd	r25, Y+48	; 0x30
    104e:	9c a7       	std	Y+44, r25	; 0x2c
    1050:	8b a7       	std	Y+43, r24	; 0x2b
    1052:	8b a5       	ldd	r24, Y+43	; 0x2b
    1054:	9c a5       	ldd	r25, Y+44	; 0x2c
    1056:	01 97       	sbiw	r24, 0x01	; 1
    1058:	f1 f7       	brne	.-4      	; 0x1056 <main+0x4fc>
    105a:	9c a7       	std	Y+44, r25	; 0x2c
    105c:	8b a7       	std	Y+43, r24	; 0x2b
    105e:	9f c0       	rjmp	.+318    	; 0x119e <main+0x644>
			_delay_ms(200);
			while (pressedKey != ENTER) {
				confirmPassword = confirmPassword * 10 + pressedKey;
    1060:	fe 01       	movw	r30, r28
    1062:	e5 59       	subi	r30, 0x95	; 149
    1064:	ff 4f       	sbci	r31, 0xFF	; 255
    1066:	80 81       	ld	r24, Z
    1068:	91 81       	ldd	r25, Z+1	; 0x01
    106a:	a2 81       	ldd	r26, Z+2	; 0x02
    106c:	b3 81       	ldd	r27, Z+3	; 0x03
    106e:	2a e0       	ldi	r18, 0x0A	; 10
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	40 e0       	ldi	r20, 0x00	; 0
    1074:	50 e0       	ldi	r21, 0x00	; 0
    1076:	bc 01       	movw	r22, r24
    1078:	cd 01       	movw	r24, r26
    107a:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <__mulsi3>
    107e:	9b 01       	movw	r18, r22
    1080:	ac 01       	movw	r20, r24
    1082:	fe 01       	movw	r30, r28
    1084:	e2 5a       	subi	r30, 0xA2	; 162
    1086:	ff 4f       	sbci	r31, 0xFF	; 255
    1088:	80 81       	ld	r24, Z
    108a:	88 2f       	mov	r24, r24
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	a0 e0       	ldi	r26, 0x00	; 0
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	82 0f       	add	r24, r18
    1094:	93 1f       	adc	r25, r19
    1096:	a4 1f       	adc	r26, r20
    1098:	b5 1f       	adc	r27, r21
    109a:	fe 01       	movw	r30, r28
    109c:	e5 59       	subi	r30, 0x95	; 149
    109e:	ff 4f       	sbci	r31, 0xFF	; 255
    10a0:	80 83       	st	Z, r24
    10a2:	91 83       	std	Z+1, r25	; 0x01
    10a4:	a2 83       	std	Z+2, r26	; 0x02
    10a6:	b3 83       	std	Z+3, r27	; 0x03
				LCD_displayCharacter('*');
    10a8:	8a e2       	ldi	r24, 0x2A	; 42
    10aa:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <LCD_displayCharacter>

				pressedKey = KEYPAD_getPressedKey();
    10ae:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <KEYPAD_getPressedKey>
    10b2:	fe 01       	movw	r30, r28
    10b4:	e2 5a       	subi	r30, 0xA2	; 162
    10b6:	ff 4f       	sbci	r31, 0xFF	; 255
    10b8:	80 83       	st	Z, r24
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	a8 e4       	ldi	r26, 0x48	; 72
    10c0:	b3 e4       	ldi	r27, 0x43	; 67
    10c2:	8f a3       	std	Y+39, r24	; 0x27
    10c4:	98 a7       	std	Y+40, r25	; 0x28
    10c6:	a9 a7       	std	Y+41, r26	; 0x29
    10c8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10ca:	6f a1       	ldd	r22, Y+39	; 0x27
    10cc:	78 a5       	ldd	r23, Y+40	; 0x28
    10ce:	89 a5       	ldd	r24, Y+41	; 0x29
    10d0:	9a a5       	ldd	r25, Y+42	; 0x2a
    10d2:	20 e0       	ldi	r18, 0x00	; 0
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	4a e7       	ldi	r20, 0x7A	; 122
    10d8:	53 e4       	ldi	r21, 0x43	; 67
    10da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10de:	dc 01       	movw	r26, r24
    10e0:	cb 01       	movw	r24, r22
    10e2:	8b a3       	std	Y+35, r24	; 0x23
    10e4:	9c a3       	std	Y+36, r25	; 0x24
    10e6:	ad a3       	std	Y+37, r26	; 0x25
    10e8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    10ea:	6b a1       	ldd	r22, Y+35	; 0x23
    10ec:	7c a1       	ldd	r23, Y+36	; 0x24
    10ee:	8d a1       	ldd	r24, Y+37	; 0x25
    10f0:	9e a1       	ldd	r25, Y+38	; 0x26
    10f2:	20 e0       	ldi	r18, 0x00	; 0
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	40 e8       	ldi	r20, 0x80	; 128
    10f8:	5f e3       	ldi	r21, 0x3F	; 63
    10fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10fe:	88 23       	and	r24, r24
    1100:	2c f4       	brge	.+10     	; 0x110c <main+0x5b2>
		__ticks = 1;
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	9a a3       	std	Y+34, r25	; 0x22
    1108:	89 a3       	std	Y+33, r24	; 0x21
    110a:	3f c0       	rjmp	.+126    	; 0x118a <main+0x630>
	else if (__tmp > 65535)
    110c:	6b a1       	ldd	r22, Y+35	; 0x23
    110e:	7c a1       	ldd	r23, Y+36	; 0x24
    1110:	8d a1       	ldd	r24, Y+37	; 0x25
    1112:	9e a1       	ldd	r25, Y+38	; 0x26
    1114:	20 e0       	ldi	r18, 0x00	; 0
    1116:	3f ef       	ldi	r19, 0xFF	; 255
    1118:	4f e7       	ldi	r20, 0x7F	; 127
    111a:	57 e4       	ldi	r21, 0x47	; 71
    111c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1120:	18 16       	cp	r1, r24
    1122:	4c f5       	brge	.+82     	; 0x1176 <main+0x61c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1124:	6f a1       	ldd	r22, Y+39	; 0x27
    1126:	78 a5       	ldd	r23, Y+40	; 0x28
    1128:	89 a5       	ldd	r24, Y+41	; 0x29
    112a:	9a a5       	ldd	r25, Y+42	; 0x2a
    112c:	20 e0       	ldi	r18, 0x00	; 0
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	40 e2       	ldi	r20, 0x20	; 32
    1132:	51 e4       	ldi	r21, 0x41	; 65
    1134:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1138:	dc 01       	movw	r26, r24
    113a:	cb 01       	movw	r24, r22
    113c:	bc 01       	movw	r22, r24
    113e:	cd 01       	movw	r24, r26
    1140:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1144:	dc 01       	movw	r26, r24
    1146:	cb 01       	movw	r24, r22
    1148:	9a a3       	std	Y+34, r25	; 0x22
    114a:	89 a3       	std	Y+33, r24	; 0x21
    114c:	0f c0       	rjmp	.+30     	; 0x116c <main+0x612>
    114e:	89 e1       	ldi	r24, 0x19	; 25
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	98 a3       	std	Y+32, r25	; 0x20
    1154:	8f 8f       	std	Y+31, r24	; 0x1f
    1156:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1158:	98 a1       	ldd	r25, Y+32	; 0x20
    115a:	01 97       	sbiw	r24, 0x01	; 1
    115c:	f1 f7       	brne	.-4      	; 0x115a <main+0x600>
    115e:	98 a3       	std	Y+32, r25	; 0x20
    1160:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1162:	89 a1       	ldd	r24, Y+33	; 0x21
    1164:	9a a1       	ldd	r25, Y+34	; 0x22
    1166:	01 97       	sbiw	r24, 0x01	; 1
    1168:	9a a3       	std	Y+34, r25	; 0x22
    116a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    116c:	89 a1       	ldd	r24, Y+33	; 0x21
    116e:	9a a1       	ldd	r25, Y+34	; 0x22
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	69 f7       	brne	.-38     	; 0x114e <main+0x5f4>
    1174:	14 c0       	rjmp	.+40     	; 0x119e <main+0x644>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1176:	6b a1       	ldd	r22, Y+35	; 0x23
    1178:	7c a1       	ldd	r23, Y+36	; 0x24
    117a:	8d a1       	ldd	r24, Y+37	; 0x25
    117c:	9e a1       	ldd	r25, Y+38	; 0x26
    117e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1182:	dc 01       	movw	r26, r24
    1184:	cb 01       	movw	r24, r22
    1186:	9a a3       	std	Y+34, r25	; 0x22
    1188:	89 a3       	std	Y+33, r24	; 0x21
    118a:	89 a1       	ldd	r24, Y+33	; 0x21
    118c:	9a a1       	ldd	r25, Y+34	; 0x22
    118e:	9e 8f       	std	Y+30, r25	; 0x1e
    1190:	8d 8f       	std	Y+29, r24	; 0x1d
    1192:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1194:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1196:	01 97       	sbiw	r24, 0x01	; 1
    1198:	f1 f7       	brne	.-4      	; 0x1196 <main+0x63c>
    119a:	9e 8f       	std	Y+30, r25	; 0x1e
    119c:	8d 8f       	std	Y+29, r24	; 0x1d
			/*
			 * take input from the user
			 */
			pressedKey = KEYPAD_getPressedKey();
			_delay_ms(200);
			while (pressedKey != ENTER) {
    119e:	fe 01       	movw	r30, r28
    11a0:	e2 5a       	subi	r30, 0xA2	; 162
    11a2:	ff 4f       	sbci	r31, 0xFF	; 255
    11a4:	80 81       	ld	r24, Z
    11a6:	8d 30       	cpi	r24, 0x0D	; 13
    11a8:	09 f0       	breq	.+2      	; 0x11ac <main+0x652>
    11aa:	5a cf       	rjmp	.-332    	; 0x1060 <main+0x506>

			/*
			 * send the entered password to the other micro using UART
			 * byte by byte using the password_ptr pointer
			 */
			uint8 *password_ptr = (uint8*) &password;
    11ac:	fe 01       	movw	r30, r28
    11ae:	e4 5a       	subi	r30, 0xA4	; 164
    11b0:	ff 4f       	sbci	r31, 0xFF	; 255
    11b2:	ce 01       	movw	r24, r28
    11b4:	89 59       	subi	r24, 0x99	; 153
    11b6:	9f 4f       	sbci	r25, 0xFF	; 255
    11b8:	91 83       	std	Z+1, r25	; 0x01
    11ba:	80 83       	st	Z, r24
			for (uint8 i = 0; i < 4; i++) {
    11bc:	fe 01       	movw	r30, r28
    11be:	e5 5a       	subi	r30, 0xA5	; 165
    11c0:	ff 4f       	sbci	r31, 0xFF	; 255
    11c2:	10 82       	st	Z, r1
    11c4:	1a c0       	rjmp	.+52     	; 0x11fa <main+0x6a0>
				UART_sendByte(*(password_ptr + i));
    11c6:	fe 01       	movw	r30, r28
    11c8:	e5 5a       	subi	r30, 0xA5	; 165
    11ca:	ff 4f       	sbci	r31, 0xFF	; 255
    11cc:	80 81       	ld	r24, Z
    11ce:	28 2f       	mov	r18, r24
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	fe 01       	movw	r30, r28
    11d4:	e4 5a       	subi	r30, 0xA4	; 164
    11d6:	ff 4f       	sbci	r31, 0xFF	; 255
    11d8:	80 81       	ld	r24, Z
    11da:	91 81       	ldd	r25, Z+1	; 0x01
    11dc:	fc 01       	movw	r30, r24
    11de:	e2 0f       	add	r30, r18
    11e0:	f3 1f       	adc	r31, r19
    11e2:	80 81       	ld	r24, Z
    11e4:	0e 94 ca 1b 	call	0x3794	; 0x3794 <UART_sendByte>
			/*
			 * send the entered password to the other micro using UART
			 * byte by byte using the password_ptr pointer
			 */
			uint8 *password_ptr = (uint8*) &password;
			for (uint8 i = 0; i < 4; i++) {
    11e8:	de 01       	movw	r26, r28
    11ea:	a5 5a       	subi	r26, 0xA5	; 165
    11ec:	bf 4f       	sbci	r27, 0xFF	; 255
    11ee:	fe 01       	movw	r30, r28
    11f0:	e5 5a       	subi	r30, 0xA5	; 165
    11f2:	ff 4f       	sbci	r31, 0xFF	; 255
    11f4:	80 81       	ld	r24, Z
    11f6:	8f 5f       	subi	r24, 0xFF	; 255
    11f8:	8c 93       	st	X, r24
    11fa:	fe 01       	movw	r30, r28
    11fc:	e5 5a       	subi	r30, 0xA5	; 165
    11fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1200:	80 81       	ld	r24, Z
    1202:	84 30       	cpi	r24, 0x04	; 4
    1204:	00 f3       	brcs	.-64     	; 0x11c6 <main+0x66c>

			/*
			 * send the re-entered password to the other micro using UART
			 * byte by byte using the password_ptr pointer
			 */
			password_ptr = (uint8*) &confirmPassword;
    1206:	fe 01       	movw	r30, r28
    1208:	e4 5a       	subi	r30, 0xA4	; 164
    120a:	ff 4f       	sbci	r31, 0xFF	; 255
    120c:	ce 01       	movw	r24, r28
    120e:	85 59       	subi	r24, 0x95	; 149
    1210:	9f 4f       	sbci	r25, 0xFF	; 255
    1212:	91 83       	std	Z+1, r25	; 0x01
    1214:	80 83       	st	Z, r24
			for (uint8 i = 0; i < 4; i++) {
    1216:	fe 01       	movw	r30, r28
    1218:	e6 5a       	subi	r30, 0xA6	; 166
    121a:	ff 4f       	sbci	r31, 0xFF	; 255
    121c:	10 82       	st	Z, r1
    121e:	1a c0       	rjmp	.+52     	; 0x1254 <main+0x6fa>
				UART_sendByte(*(password_ptr + i));
    1220:	fe 01       	movw	r30, r28
    1222:	e6 5a       	subi	r30, 0xA6	; 166
    1224:	ff 4f       	sbci	r31, 0xFF	; 255
    1226:	80 81       	ld	r24, Z
    1228:	28 2f       	mov	r18, r24
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	fe 01       	movw	r30, r28
    122e:	e4 5a       	subi	r30, 0xA4	; 164
    1230:	ff 4f       	sbci	r31, 0xFF	; 255
    1232:	80 81       	ld	r24, Z
    1234:	91 81       	ldd	r25, Z+1	; 0x01
    1236:	fc 01       	movw	r30, r24
    1238:	e2 0f       	add	r30, r18
    123a:	f3 1f       	adc	r31, r19
    123c:	80 81       	ld	r24, Z
    123e:	0e 94 ca 1b 	call	0x3794	; 0x3794 <UART_sendByte>
			/*
			 * send the re-entered password to the other micro using UART
			 * byte by byte using the password_ptr pointer
			 */
			password_ptr = (uint8*) &confirmPassword;
			for (uint8 i = 0; i < 4; i++) {
    1242:	de 01       	movw	r26, r28
    1244:	a6 5a       	subi	r26, 0xA6	; 166
    1246:	bf 4f       	sbci	r27, 0xFF	; 255
    1248:	fe 01       	movw	r30, r28
    124a:	e6 5a       	subi	r30, 0xA6	; 166
    124c:	ff 4f       	sbci	r31, 0xFF	; 255
    124e:	80 81       	ld	r24, Z
    1250:	8f 5f       	subi	r24, 0xFF	; 255
    1252:	8c 93       	st	X, r24
    1254:	fe 01       	movw	r30, r28
    1256:	e6 5a       	subi	r30, 0xA6	; 166
    1258:	ff 4f       	sbci	r31, 0xFF	; 255
    125a:	80 81       	ld	r24, Z
    125c:	84 30       	cpi	r24, 0x04	; 4
    125e:	00 f3       	brcs	.-64     	; 0x1220 <main+0x6c6>

			/*
			 * waiting for confirmation for matching from
			 * the other micro if not matched repeat again
			 */
		} while (UART_recieveByte() == WRONG);
    1260:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <UART_recieveByte>
    1264:	88 23       	and	r24, r24
    1266:	09 f4       	brne	.+2      	; 0x126a <main+0x710>
    1268:	e8 cc       	rjmp	.-1584   	; 0xc3a <main+0xe0>

		/*
		 * variable to store the selected option by the user
		 */
		uint8 selectedOption = 0;
    126a:	fe 01       	movw	r30, r28
    126c:	e1 5a       	subi	r30, 0xA1	; 161
    126e:	ff 4f       	sbci	r31, 0xFF	; 255
    1270:	10 82       	st	Z, r1

			/*
			 * variable to track numbers of wrong passwords
			 * entered by the user
			 */
			uint8 i = 0;
    1272:	fe 01       	movw	r30, r28
    1274:	e7 5a       	subi	r30, 0xA7	; 167
    1276:	ff 4f       	sbci	r31, 0xFF	; 255
    1278:	10 82       	st	Z, r1

			/*
			 * display the options on the LCD
			 */
			LCD_clearScreen();
    127a:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <LCD_clearScreen>
			LCD_displayString("+ : Open Door");
    127e:	8d e8       	ldi	r24, 0x8D	; 141
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	0e 94 ca 19 	call	0x3394	; 0x3394 <LCD_displayString>
			LCD_moveCursor(1, 0);
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	60 e0       	ldi	r22, 0x00	; 0
    128a:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <LCD_moveCursor>
			LCD_displayString("- : Change Pass");
    128e:	8b e9       	ldi	r24, 0x9B	; 155
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	0e 94 ca 19 	call	0x3394	; 0x3394 <LCD_displayString>

			/*
			 * take the option entered by the user
			 */
			selectedOption = KEYPAD_getPressedKey();
    1296:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <KEYPAD_getPressedKey>
    129a:	fe 01       	movw	r30, r28
    129c:	e1 5a       	subi	r30, 0xA1	; 161
    129e:	ff 4f       	sbci	r31, 0xFF	; 255
    12a0:	80 83       	st	Z, r24

			do {
				/*
				 * incrementing i each time asking for the password
				 */
				i++;
    12a2:	de 01       	movw	r26, r28
    12a4:	a7 5a       	subi	r26, 0xA7	; 167
    12a6:	bf 4f       	sbci	r27, 0xFF	; 255
    12a8:	fe 01       	movw	r30, r28
    12aa:	e7 5a       	subi	r30, 0xA7	; 167
    12ac:	ff 4f       	sbci	r31, 0xFF	; 255
    12ae:	80 81       	ld	r24, Z
    12b0:	8f 5f       	subi	r24, 0xFF	; 255
    12b2:	8c 93       	st	X, r24

				/*
				 * break when asking for password for the fourth consecutive time
				 */
				if (i == 4) {
    12b4:	fe 01       	movw	r30, r28
    12b6:	e7 5a       	subi	r30, 0xA7	; 167
    12b8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ba:	80 81       	ld	r24, Z
    12bc:	84 30       	cpi	r24, 0x04	; 4
    12be:	09 f4       	brne	.+2      	; 0x12c2 <main+0x768>
    12c0:	62 c1       	rjmp	.+708    	; 0x1586 <main+0xa2c>
				}

				/*
				 * ask the user for password
				 */
				LCD_clearScreen();
    12c2:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <LCD_clearScreen>
				LCD_displayString("Plz enter pass:");
    12c6:	80 e6       	ldi	r24, 0x60	; 96
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	0e 94 ca 19 	call	0x3394	; 0x3394 <LCD_displayString>
				LCD_moveCursor(1, 0);
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	60 e0       	ldi	r22, 0x00	; 0
    12d2:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <LCD_moveCursor>

				/*
				 * variable to store the entered password
				 */
				uint32 password = 0;
    12d6:	fe 01       	movw	r30, r28
    12d8:	e1 59       	subi	r30, 0x91	; 145
    12da:	ff 4f       	sbci	r31, 0xFF	; 255
    12dc:	10 82       	st	Z, r1
    12de:	11 82       	std	Z+1, r1	; 0x01
    12e0:	12 82       	std	Z+2, r1	; 0x02
    12e2:	13 82       	std	Z+3, r1	; 0x03

				/*
				 * take password entered by user
				 */
				uint8 pressedKey = KEYPAD_getPressedKey();
    12e4:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <KEYPAD_getPressedKey>
    12e8:	fe 01       	movw	r30, r28
    12ea:	e8 5a       	subi	r30, 0xA8	; 168
    12ec:	ff 4f       	sbci	r31, 0xFF	; 255
    12ee:	80 83       	st	Z, r24
    12f0:	80 e0       	ldi	r24, 0x00	; 0
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	a8 e4       	ldi	r26, 0x48	; 72
    12f6:	b3 e4       	ldi	r27, 0x43	; 67
    12f8:	89 8f       	std	Y+25, r24	; 0x19
    12fa:	9a 8f       	std	Y+26, r25	; 0x1a
    12fc:	ab 8f       	std	Y+27, r26	; 0x1b
    12fe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1300:	69 8d       	ldd	r22, Y+25	; 0x19
    1302:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1304:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1306:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1308:	20 e0       	ldi	r18, 0x00	; 0
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	4a e7       	ldi	r20, 0x7A	; 122
    130e:	53 e4       	ldi	r21, 0x43	; 67
    1310:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1314:	dc 01       	movw	r26, r24
    1316:	cb 01       	movw	r24, r22
    1318:	8d 8b       	std	Y+21, r24	; 0x15
    131a:	9e 8b       	std	Y+22, r25	; 0x16
    131c:	af 8b       	std	Y+23, r26	; 0x17
    131e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1320:	6d 89       	ldd	r22, Y+21	; 0x15
    1322:	7e 89       	ldd	r23, Y+22	; 0x16
    1324:	8f 89       	ldd	r24, Y+23	; 0x17
    1326:	98 8d       	ldd	r25, Y+24	; 0x18
    1328:	20 e0       	ldi	r18, 0x00	; 0
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	40 e8       	ldi	r20, 0x80	; 128
    132e:	5f e3       	ldi	r21, 0x3F	; 63
    1330:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1334:	88 23       	and	r24, r24
    1336:	2c f4       	brge	.+10     	; 0x1342 <main+0x7e8>
		__ticks = 1;
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	9c 8b       	std	Y+20, r25	; 0x14
    133e:	8b 8b       	std	Y+19, r24	; 0x13
    1340:	3f c0       	rjmp	.+126    	; 0x13c0 <main+0x866>
	else if (__tmp > 65535)
    1342:	6d 89       	ldd	r22, Y+21	; 0x15
    1344:	7e 89       	ldd	r23, Y+22	; 0x16
    1346:	8f 89       	ldd	r24, Y+23	; 0x17
    1348:	98 8d       	ldd	r25, Y+24	; 0x18
    134a:	20 e0       	ldi	r18, 0x00	; 0
    134c:	3f ef       	ldi	r19, 0xFF	; 255
    134e:	4f e7       	ldi	r20, 0x7F	; 127
    1350:	57 e4       	ldi	r21, 0x47	; 71
    1352:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1356:	18 16       	cp	r1, r24
    1358:	4c f5       	brge	.+82     	; 0x13ac <main+0x852>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    135a:	69 8d       	ldd	r22, Y+25	; 0x19
    135c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    135e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1360:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1362:	20 e0       	ldi	r18, 0x00	; 0
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	40 e2       	ldi	r20, 0x20	; 32
    1368:	51 e4       	ldi	r21, 0x41	; 65
    136a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    136e:	dc 01       	movw	r26, r24
    1370:	cb 01       	movw	r24, r22
    1372:	bc 01       	movw	r22, r24
    1374:	cd 01       	movw	r24, r26
    1376:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    137a:	dc 01       	movw	r26, r24
    137c:	cb 01       	movw	r24, r22
    137e:	9c 8b       	std	Y+20, r25	; 0x14
    1380:	8b 8b       	std	Y+19, r24	; 0x13
    1382:	0f c0       	rjmp	.+30     	; 0x13a2 <main+0x848>
    1384:	89 e1       	ldi	r24, 0x19	; 25
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	9a 8b       	std	Y+18, r25	; 0x12
    138a:	89 8b       	std	Y+17, r24	; 0x11
    138c:	89 89       	ldd	r24, Y+17	; 0x11
    138e:	9a 89       	ldd	r25, Y+18	; 0x12
    1390:	01 97       	sbiw	r24, 0x01	; 1
    1392:	f1 f7       	brne	.-4      	; 0x1390 <main+0x836>
    1394:	9a 8b       	std	Y+18, r25	; 0x12
    1396:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1398:	8b 89       	ldd	r24, Y+19	; 0x13
    139a:	9c 89       	ldd	r25, Y+20	; 0x14
    139c:	01 97       	sbiw	r24, 0x01	; 1
    139e:	9c 8b       	std	Y+20, r25	; 0x14
    13a0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13a2:	8b 89       	ldd	r24, Y+19	; 0x13
    13a4:	9c 89       	ldd	r25, Y+20	; 0x14
    13a6:	00 97       	sbiw	r24, 0x00	; 0
    13a8:	69 f7       	brne	.-38     	; 0x1384 <main+0x82a>
    13aa:	b4 c0       	rjmp	.+360    	; 0x1514 <main+0x9ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13ac:	6d 89       	ldd	r22, Y+21	; 0x15
    13ae:	7e 89       	ldd	r23, Y+22	; 0x16
    13b0:	8f 89       	ldd	r24, Y+23	; 0x17
    13b2:	98 8d       	ldd	r25, Y+24	; 0x18
    13b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13b8:	dc 01       	movw	r26, r24
    13ba:	cb 01       	movw	r24, r22
    13bc:	9c 8b       	std	Y+20, r25	; 0x14
    13be:	8b 8b       	std	Y+19, r24	; 0x13
    13c0:	8b 89       	ldd	r24, Y+19	; 0x13
    13c2:	9c 89       	ldd	r25, Y+20	; 0x14
    13c4:	98 8b       	std	Y+16, r25	; 0x10
    13c6:	8f 87       	std	Y+15, r24	; 0x0f
    13c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    13ca:	98 89       	ldd	r25, Y+16	; 0x10
    13cc:	01 97       	sbiw	r24, 0x01	; 1
    13ce:	f1 f7       	brne	.-4      	; 0x13cc <main+0x872>
    13d0:	98 8b       	std	Y+16, r25	; 0x10
    13d2:	8f 87       	std	Y+15, r24	; 0x0f
    13d4:	9f c0       	rjmp	.+318    	; 0x1514 <main+0x9ba>
				_delay_ms(200);
				while (pressedKey != ENTER) {
					password = password * 10 + pressedKey;
    13d6:	fe 01       	movw	r30, r28
    13d8:	e1 59       	subi	r30, 0x91	; 145
    13da:	ff 4f       	sbci	r31, 0xFF	; 255
    13dc:	80 81       	ld	r24, Z
    13de:	91 81       	ldd	r25, Z+1	; 0x01
    13e0:	a2 81       	ldd	r26, Z+2	; 0x02
    13e2:	b3 81       	ldd	r27, Z+3	; 0x03
    13e4:	2a e0       	ldi	r18, 0x0A	; 10
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	40 e0       	ldi	r20, 0x00	; 0
    13ea:	50 e0       	ldi	r21, 0x00	; 0
    13ec:	bc 01       	movw	r22, r24
    13ee:	cd 01       	movw	r24, r26
    13f0:	0e 94 5c 1c 	call	0x38b8	; 0x38b8 <__mulsi3>
    13f4:	9b 01       	movw	r18, r22
    13f6:	ac 01       	movw	r20, r24
    13f8:	fe 01       	movw	r30, r28
    13fa:	e8 5a       	subi	r30, 0xA8	; 168
    13fc:	ff 4f       	sbci	r31, 0xFF	; 255
    13fe:	80 81       	ld	r24, Z
    1400:	88 2f       	mov	r24, r24
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	a0 e0       	ldi	r26, 0x00	; 0
    1406:	b0 e0       	ldi	r27, 0x00	; 0
    1408:	82 0f       	add	r24, r18
    140a:	93 1f       	adc	r25, r19
    140c:	a4 1f       	adc	r26, r20
    140e:	b5 1f       	adc	r27, r21
    1410:	fe 01       	movw	r30, r28
    1412:	e1 59       	subi	r30, 0x91	; 145
    1414:	ff 4f       	sbci	r31, 0xFF	; 255
    1416:	80 83       	st	Z, r24
    1418:	91 83       	std	Z+1, r25	; 0x01
    141a:	a2 83       	std	Z+2, r26	; 0x02
    141c:	b3 83       	std	Z+3, r27	; 0x03
					LCD_displayCharacter('*');
    141e:	8a e2       	ldi	r24, 0x2A	; 42
    1420:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <LCD_displayCharacter>

					pressedKey = KEYPAD_getPressedKey();
    1424:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <KEYPAD_getPressedKey>
    1428:	fe 01       	movw	r30, r28
    142a:	e8 5a       	subi	r30, 0xA8	; 168
    142c:	ff 4f       	sbci	r31, 0xFF	; 255
    142e:	80 83       	st	Z, r24
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	a8 e4       	ldi	r26, 0x48	; 72
    1436:	b3 e4       	ldi	r27, 0x43	; 67
    1438:	8b 87       	std	Y+11, r24	; 0x0b
    143a:	9c 87       	std	Y+12, r25	; 0x0c
    143c:	ad 87       	std	Y+13, r26	; 0x0d
    143e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1440:	6b 85       	ldd	r22, Y+11	; 0x0b
    1442:	7c 85       	ldd	r23, Y+12	; 0x0c
    1444:	8d 85       	ldd	r24, Y+13	; 0x0d
    1446:	9e 85       	ldd	r25, Y+14	; 0x0e
    1448:	20 e0       	ldi	r18, 0x00	; 0
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	4a e7       	ldi	r20, 0x7A	; 122
    144e:	53 e4       	ldi	r21, 0x43	; 67
    1450:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1454:	dc 01       	movw	r26, r24
    1456:	cb 01       	movw	r24, r22
    1458:	8f 83       	std	Y+7, r24	; 0x07
    145a:	98 87       	std	Y+8, r25	; 0x08
    145c:	a9 87       	std	Y+9, r26	; 0x09
    145e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1460:	6f 81       	ldd	r22, Y+7	; 0x07
    1462:	78 85       	ldd	r23, Y+8	; 0x08
    1464:	89 85       	ldd	r24, Y+9	; 0x09
    1466:	9a 85       	ldd	r25, Y+10	; 0x0a
    1468:	20 e0       	ldi	r18, 0x00	; 0
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	40 e8       	ldi	r20, 0x80	; 128
    146e:	5f e3       	ldi	r21, 0x3F	; 63
    1470:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1474:	88 23       	and	r24, r24
    1476:	2c f4       	brge	.+10     	; 0x1482 <main+0x928>
		__ticks = 1;
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	9e 83       	std	Y+6, r25	; 0x06
    147e:	8d 83       	std	Y+5, r24	; 0x05
    1480:	3f c0       	rjmp	.+126    	; 0x1500 <main+0x9a6>
	else if (__tmp > 65535)
    1482:	6f 81       	ldd	r22, Y+7	; 0x07
    1484:	78 85       	ldd	r23, Y+8	; 0x08
    1486:	89 85       	ldd	r24, Y+9	; 0x09
    1488:	9a 85       	ldd	r25, Y+10	; 0x0a
    148a:	20 e0       	ldi	r18, 0x00	; 0
    148c:	3f ef       	ldi	r19, 0xFF	; 255
    148e:	4f e7       	ldi	r20, 0x7F	; 127
    1490:	57 e4       	ldi	r21, 0x47	; 71
    1492:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1496:	18 16       	cp	r1, r24
    1498:	4c f5       	brge	.+82     	; 0x14ec <main+0x992>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    149a:	6b 85       	ldd	r22, Y+11	; 0x0b
    149c:	7c 85       	ldd	r23, Y+12	; 0x0c
    149e:	8d 85       	ldd	r24, Y+13	; 0x0d
    14a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    14a2:	20 e0       	ldi	r18, 0x00	; 0
    14a4:	30 e0       	ldi	r19, 0x00	; 0
    14a6:	40 e2       	ldi	r20, 0x20	; 32
    14a8:	51 e4       	ldi	r21, 0x41	; 65
    14aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ae:	dc 01       	movw	r26, r24
    14b0:	cb 01       	movw	r24, r22
    14b2:	bc 01       	movw	r22, r24
    14b4:	cd 01       	movw	r24, r26
    14b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ba:	dc 01       	movw	r26, r24
    14bc:	cb 01       	movw	r24, r22
    14be:	9e 83       	std	Y+6, r25	; 0x06
    14c0:	8d 83       	std	Y+5, r24	; 0x05
    14c2:	0f c0       	rjmp	.+30     	; 0x14e2 <main+0x988>
    14c4:	89 e1       	ldi	r24, 0x19	; 25
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	9c 83       	std	Y+4, r25	; 0x04
    14ca:	8b 83       	std	Y+3, r24	; 0x03
    14cc:	8b 81       	ldd	r24, Y+3	; 0x03
    14ce:	9c 81       	ldd	r25, Y+4	; 0x04
    14d0:	01 97       	sbiw	r24, 0x01	; 1
    14d2:	f1 f7       	brne	.-4      	; 0x14d0 <main+0x976>
    14d4:	9c 83       	std	Y+4, r25	; 0x04
    14d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14d8:	8d 81       	ldd	r24, Y+5	; 0x05
    14da:	9e 81       	ldd	r25, Y+6	; 0x06
    14dc:	01 97       	sbiw	r24, 0x01	; 1
    14de:	9e 83       	std	Y+6, r25	; 0x06
    14e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14e2:	8d 81       	ldd	r24, Y+5	; 0x05
    14e4:	9e 81       	ldd	r25, Y+6	; 0x06
    14e6:	00 97       	sbiw	r24, 0x00	; 0
    14e8:	69 f7       	brne	.-38     	; 0x14c4 <main+0x96a>
    14ea:	14 c0       	rjmp	.+40     	; 0x1514 <main+0x9ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14ec:	6f 81       	ldd	r22, Y+7	; 0x07
    14ee:	78 85       	ldd	r23, Y+8	; 0x08
    14f0:	89 85       	ldd	r24, Y+9	; 0x09
    14f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    14f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14f8:	dc 01       	movw	r26, r24
    14fa:	cb 01       	movw	r24, r22
    14fc:	9e 83       	std	Y+6, r25	; 0x06
    14fe:	8d 83       	std	Y+5, r24	; 0x05
    1500:	8d 81       	ldd	r24, Y+5	; 0x05
    1502:	9e 81       	ldd	r25, Y+6	; 0x06
    1504:	9a 83       	std	Y+2, r25	; 0x02
    1506:	89 83       	std	Y+1, r24	; 0x01
    1508:	89 81       	ldd	r24, Y+1	; 0x01
    150a:	9a 81       	ldd	r25, Y+2	; 0x02
    150c:	01 97       	sbiw	r24, 0x01	; 1
    150e:	f1 f7       	brne	.-4      	; 0x150c <main+0x9b2>
    1510:	9a 83       	std	Y+2, r25	; 0x02
    1512:	89 83       	std	Y+1, r24	; 0x01
				/*
				 * take password entered by user
				 */
				uint8 pressedKey = KEYPAD_getPressedKey();
				_delay_ms(200);
				while (pressedKey != ENTER) {
    1514:	fe 01       	movw	r30, r28
    1516:	e8 5a       	subi	r30, 0xA8	; 168
    1518:	ff 4f       	sbci	r31, 0xFF	; 255
    151a:	80 81       	ld	r24, Z
    151c:	8d 30       	cpi	r24, 0x0D	; 13
    151e:	09 f0       	breq	.+2      	; 0x1522 <main+0x9c8>
    1520:	5a cf       	rjmp	.-332    	; 0x13d6 <main+0x87c>

				/*
				 * send the entered password to the other micro
				 * byte by byte using password_ptr pointer
				 */
				uint8 *password_ptr = (uint8*) &password;
    1522:	fe 01       	movw	r30, r28
    1524:	ea 5a       	subi	r30, 0xAA	; 170
    1526:	ff 4f       	sbci	r31, 0xFF	; 255
    1528:	ce 01       	movw	r24, r28
    152a:	81 59       	subi	r24, 0x91	; 145
    152c:	9f 4f       	sbci	r25, 0xFF	; 255
    152e:	91 83       	std	Z+1, r25	; 0x01
    1530:	80 83       	st	Z, r24
				for (uint8 i = 0; i < 4; i++) {
    1532:	fe 01       	movw	r30, r28
    1534:	eb 5a       	subi	r30, 0xAB	; 171
    1536:	ff 4f       	sbci	r31, 0xFF	; 255
    1538:	10 82       	st	Z, r1
    153a:	1a c0       	rjmp	.+52     	; 0x1570 <main+0xa16>
					UART_sendByte(*(password_ptr + i));
    153c:	fe 01       	movw	r30, r28
    153e:	eb 5a       	subi	r30, 0xAB	; 171
    1540:	ff 4f       	sbci	r31, 0xFF	; 255
    1542:	80 81       	ld	r24, Z
    1544:	28 2f       	mov	r18, r24
    1546:	30 e0       	ldi	r19, 0x00	; 0
    1548:	fe 01       	movw	r30, r28
    154a:	ea 5a       	subi	r30, 0xAA	; 170
    154c:	ff 4f       	sbci	r31, 0xFF	; 255
    154e:	80 81       	ld	r24, Z
    1550:	91 81       	ldd	r25, Z+1	; 0x01
    1552:	fc 01       	movw	r30, r24
    1554:	e2 0f       	add	r30, r18
    1556:	f3 1f       	adc	r31, r19
    1558:	80 81       	ld	r24, Z
    155a:	0e 94 ca 1b 	call	0x3794	; 0x3794 <UART_sendByte>
				/*
				 * send the entered password to the other micro
				 * byte by byte using password_ptr pointer
				 */
				uint8 *password_ptr = (uint8*) &password;
				for (uint8 i = 0; i < 4; i++) {
    155e:	de 01       	movw	r26, r28
    1560:	ab 5a       	subi	r26, 0xAB	; 171
    1562:	bf 4f       	sbci	r27, 0xFF	; 255
    1564:	fe 01       	movw	r30, r28
    1566:	eb 5a       	subi	r30, 0xAB	; 171
    1568:	ff 4f       	sbci	r31, 0xFF	; 255
    156a:	80 81       	ld	r24, Z
    156c:	8f 5f       	subi	r24, 0xFF	; 255
    156e:	8c 93       	st	X, r24
    1570:	fe 01       	movw	r30, r28
    1572:	eb 5a       	subi	r30, 0xAB	; 171
    1574:	ff 4f       	sbci	r31, 0xFF	; 255
    1576:	80 81       	ld	r24, Z
    1578:	84 30       	cpi	r24, 0x04	; 4
    157a:	00 f3       	brcs	.-64     	; 0x153c <main+0x9e2>

				/*
				 * waiting for confirmation fro the other micro
				 *  for correct password
				 */
			} while (UART_recieveByte() == WRONG);
    157c:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <UART_recieveByte>
    1580:	88 23       	and	r24, r24
    1582:	09 f4       	brne	.+2      	; 0x1586 <main+0xa2c>
    1584:	8e ce       	rjmp	.-740    	; 0x12a2 <main+0x748>

			/*
			 * turn on alaram when the user enter wrong password for
			 * three consecutive time
			 */
			if (i == 4) {
    1586:	fe 01       	movw	r30, r28
    1588:	e7 5a       	subi	r30, 0xA7	; 167
    158a:	ff 4f       	sbci	r31, 0xFF	; 255
    158c:	80 81       	ld	r24, Z
    158e:	84 30       	cpi	r24, 0x04	; 4
    1590:	09 f0       	breq	.+2      	; 0x1594 <main+0xa3a>
    1592:	6b c0       	rjmp	.+214    	; 0x166a <main+0xb10>
				LCD_clearScreen();
    1594:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <LCD_clearScreen>
				LCD_moveCursor(0, 5);
    1598:	80 e0       	ldi	r24, 0x00	; 0
    159a:	65 e0       	ldi	r22, 0x05	; 5
    159c:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <LCD_moveCursor>

				/*
				 * configure timer1 to count 1 minute in CTC mode
				 */
				TIMER1_ConfigType configTIMER1 =
						{ 0, 58560, PRESCALER_1024, CTC };
    15a0:	ce 01       	movw	r24, r28
    15a2:	8d 58       	subi	r24, 0x8D	; 141
    15a4:	9f 4f       	sbci	r25, 0xFF	; 255
    15a6:	cc 57       	subi	r28, 0x7C	; 124
    15a8:	df 4f       	sbci	r29, 0xFF	; 255
    15aa:	99 83       	std	Y+1, r25	; 0x01
    15ac:	88 83       	st	Y, r24
    15ae:	c4 58       	subi	r28, 0x84	; 132
    15b0:	d0 40       	sbci	r29, 0x00	; 0
    15b2:	8b ed       	ldi	r24, 0xDB	; 219
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	ca 57       	subi	r28, 0x7A	; 122
    15b8:	df 4f       	sbci	r29, 0xFF	; 255
    15ba:	99 83       	std	Y+1, r25	; 0x01
    15bc:	88 83       	st	Y, r24
    15be:	c6 58       	subi	r28, 0x86	; 134
    15c0:	d0 40       	sbci	r29, 0x00	; 0
    15c2:	96 e0       	ldi	r25, 0x06	; 6
    15c4:	c8 57       	subi	r28, 0x78	; 120
    15c6:	df 4f       	sbci	r29, 0xFF	; 255
    15c8:	98 83       	st	Y, r25
    15ca:	c8 58       	subi	r28, 0x88	; 136
    15cc:	d0 40       	sbci	r29, 0x00	; 0
    15ce:	ca 57       	subi	r28, 0x7A	; 122
    15d0:	df 4f       	sbci	r29, 0xFF	; 255
    15d2:	e8 81       	ld	r30, Y
    15d4:	f9 81       	ldd	r31, Y+1	; 0x01
    15d6:	c6 58       	subi	r28, 0x86	; 134
    15d8:	d0 40       	sbci	r29, 0x00	; 0
    15da:	00 80       	ld	r0, Z
    15dc:	ca 57       	subi	r28, 0x7A	; 122
    15de:	df 4f       	sbci	r29, 0xFF	; 255
    15e0:	88 81       	ld	r24, Y
    15e2:	99 81       	ldd	r25, Y+1	; 0x01
    15e4:	c6 58       	subi	r28, 0x86	; 134
    15e6:	d0 40       	sbci	r29, 0x00	; 0
    15e8:	01 96       	adiw	r24, 0x01	; 1
    15ea:	ca 57       	subi	r28, 0x7A	; 122
    15ec:	df 4f       	sbci	r29, 0xFF	; 255
    15ee:	99 83       	std	Y+1, r25	; 0x01
    15f0:	88 83       	st	Y, r24
    15f2:	c6 58       	subi	r28, 0x86	; 134
    15f4:	d0 40       	sbci	r29, 0x00	; 0
    15f6:	cc 57       	subi	r28, 0x7C	; 124
    15f8:	df 4f       	sbci	r29, 0xFF	; 255
    15fa:	e8 81       	ld	r30, Y
    15fc:	f9 81       	ldd	r31, Y+1	; 0x01
    15fe:	c4 58       	subi	r28, 0x84	; 132
    1600:	d0 40       	sbci	r29, 0x00	; 0
    1602:	00 82       	st	Z, r0
    1604:	cc 57       	subi	r28, 0x7C	; 124
    1606:	df 4f       	sbci	r29, 0xFF	; 255
    1608:	88 81       	ld	r24, Y
    160a:	99 81       	ldd	r25, Y+1	; 0x01
    160c:	c4 58       	subi	r28, 0x84	; 132
    160e:	d0 40       	sbci	r29, 0x00	; 0
    1610:	01 96       	adiw	r24, 0x01	; 1
    1612:	cc 57       	subi	r28, 0x7C	; 124
    1614:	df 4f       	sbci	r29, 0xFF	; 255
    1616:	99 83       	std	Y+1, r25	; 0x01
    1618:	88 83       	st	Y, r24
    161a:	c4 58       	subi	r28, 0x84	; 132
    161c:	d0 40       	sbci	r29, 0x00	; 0
    161e:	c8 57       	subi	r28, 0x78	; 120
    1620:	df 4f       	sbci	r29, 0xFF	; 255
    1622:	98 81       	ld	r25, Y
    1624:	c8 58       	subi	r28, 0x88	; 136
    1626:	d0 40       	sbci	r29, 0x00	; 0
    1628:	91 50       	subi	r25, 0x01	; 1
    162a:	c8 57       	subi	r28, 0x78	; 120
    162c:	df 4f       	sbci	r29, 0xFF	; 255
    162e:	98 83       	st	Y, r25
    1630:	c8 58       	subi	r28, 0x88	; 136
    1632:	d0 40       	sbci	r29, 0x00	; 0
    1634:	c8 57       	subi	r28, 0x78	; 120
    1636:	df 4f       	sbci	r29, 0xFF	; 255
    1638:	e8 81       	ld	r30, Y
    163a:	c8 58       	subi	r28, 0x88	; 136
    163c:	d0 40       	sbci	r29, 0x00	; 0
    163e:	ee 23       	and	r30, r30
    1640:	31 f6       	brne	.-116    	; 0x15ce <main+0xa74>
				TIMER1_init(&configTIMER1);
    1642:	ce 01       	movw	r24, r28
    1644:	8d 58       	subi	r24, 0x8D	; 141
    1646:	9f 4f       	sbci	r25, 0xFF	; 255
    1648:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <TIMER1_init>

				/*
				 * display error on the LCD
				 */
				LCD_displayString("ERROR");
    164c:	8b ea       	ldi	r24, 0xAB	; 171
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	0e 94 ca 19 	call	0x3394	; 0x3394 <LCD_displayString>

				/*
				 * wait for the 1 minute to pass
				 */
				while (g_flag == 0) {
    1654:	80 91 e8 00 	lds	r24, 0x00E8
    1658:	88 23       	and	r24, r24
    165a:	e1 f3       	breq	.-8      	; 0x1654 <main+0xafa>
				}

				/*
				 * return the flag to its initial value
				 */
				g_flag = 0;
    165c:	10 92 e8 00 	sts	0x00E8, r1

				/*
				 * disable timer1
				 */
				TIMER1_deInit();
    1660:	0e 94 2c 1b 	call	0x3658	; 0x3658 <TIMER1_deInit>

				LCD_clearScreen();
    1664:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <LCD_clearScreen>
    1668:	04 ce       	rjmp	.-1016   	; 0x1272 <main+0x718>
		}

		/*
		 * send the selected option to the other micro
		 */
		UART_sendByte(selectedOption);
    166a:	fe 01       	movw	r30, r28
    166c:	e1 5a       	subi	r30, 0xA1	; 161
    166e:	ff 4f       	sbci	r31, 0xFF	; 255
    1670:	80 81       	ld	r24, Z
    1672:	0e 94 ca 1b 	call	0x3794	; 0x3794 <UART_sendByte>

		LCD_clearScreen();
    1676:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <LCD_clearScreen>

		/*
		 * if the selecte option is open door
		 */
		if (selectedOption == OPEN_DOOR) {
    167a:	fe 01       	movw	r30, r28
    167c:	e1 5a       	subi	r30, 0xA1	; 161
    167e:	ff 4f       	sbci	r31, 0xFF	; 255
    1680:	80 81       	ld	r24, Z
    1682:	8b 32       	cpi	r24, 0x2B	; 43
    1684:	09 f0       	breq	.+2      	; 0x1688 <main+0xb2e>
    1686:	d9 ca       	rjmp	.-2638   	; 0xc3a <main+0xe0>
			/*
			 * configure timer1 to count 15 seconds in CTC mode
			 */
			TIMER1_ConfigType configTIMER1 = { 0, 14648, PRESCALER_1024, CTC };
    1688:	ce 01       	movw	r24, r28
    168a:	87 58       	subi	r24, 0x87	; 135
    168c:	9f 4f       	sbci	r25, 0xFF	; 255
    168e:	c7 57       	subi	r28, 0x77	; 119
    1690:	df 4f       	sbci	r29, 0xFF	; 255
    1692:	99 83       	std	Y+1, r25	; 0x01
    1694:	88 83       	st	Y, r24
    1696:	c9 58       	subi	r28, 0x89	; 137
    1698:	d0 40       	sbci	r29, 0x00	; 0
    169a:	85 ed       	ldi	r24, 0xD5	; 213
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	c5 57       	subi	r28, 0x75	; 117
    16a0:	df 4f       	sbci	r29, 0xFF	; 255
    16a2:	99 83       	std	Y+1, r25	; 0x01
    16a4:	88 83       	st	Y, r24
    16a6:	cb 58       	subi	r28, 0x8B	; 139
    16a8:	d0 40       	sbci	r29, 0x00	; 0
    16aa:	96 e0       	ldi	r25, 0x06	; 6
    16ac:	c3 57       	subi	r28, 0x73	; 115
    16ae:	df 4f       	sbci	r29, 0xFF	; 255
    16b0:	98 83       	st	Y, r25
    16b2:	cd 58       	subi	r28, 0x8D	; 141
    16b4:	d0 40       	sbci	r29, 0x00	; 0
    16b6:	c5 57       	subi	r28, 0x75	; 117
    16b8:	df 4f       	sbci	r29, 0xFF	; 255
    16ba:	e8 81       	ld	r30, Y
    16bc:	f9 81       	ldd	r31, Y+1	; 0x01
    16be:	cb 58       	subi	r28, 0x8B	; 139
    16c0:	d0 40       	sbci	r29, 0x00	; 0
    16c2:	00 80       	ld	r0, Z
    16c4:	c5 57       	subi	r28, 0x75	; 117
    16c6:	df 4f       	sbci	r29, 0xFF	; 255
    16c8:	88 81       	ld	r24, Y
    16ca:	99 81       	ldd	r25, Y+1	; 0x01
    16cc:	cb 58       	subi	r28, 0x8B	; 139
    16ce:	d0 40       	sbci	r29, 0x00	; 0
    16d0:	01 96       	adiw	r24, 0x01	; 1
    16d2:	c5 57       	subi	r28, 0x75	; 117
    16d4:	df 4f       	sbci	r29, 0xFF	; 255
    16d6:	99 83       	std	Y+1, r25	; 0x01
    16d8:	88 83       	st	Y, r24
    16da:	cb 58       	subi	r28, 0x8B	; 139
    16dc:	d0 40       	sbci	r29, 0x00	; 0
    16de:	c7 57       	subi	r28, 0x77	; 119
    16e0:	df 4f       	sbci	r29, 0xFF	; 255
    16e2:	e8 81       	ld	r30, Y
    16e4:	f9 81       	ldd	r31, Y+1	; 0x01
    16e6:	c9 58       	subi	r28, 0x89	; 137
    16e8:	d0 40       	sbci	r29, 0x00	; 0
    16ea:	00 82       	st	Z, r0
    16ec:	c7 57       	subi	r28, 0x77	; 119
    16ee:	df 4f       	sbci	r29, 0xFF	; 255
    16f0:	88 81       	ld	r24, Y
    16f2:	99 81       	ldd	r25, Y+1	; 0x01
    16f4:	c9 58       	subi	r28, 0x89	; 137
    16f6:	d0 40       	sbci	r29, 0x00	; 0
    16f8:	01 96       	adiw	r24, 0x01	; 1
    16fa:	c7 57       	subi	r28, 0x77	; 119
    16fc:	df 4f       	sbci	r29, 0xFF	; 255
    16fe:	99 83       	std	Y+1, r25	; 0x01
    1700:	88 83       	st	Y, r24
    1702:	c9 58       	subi	r28, 0x89	; 137
    1704:	d0 40       	sbci	r29, 0x00	; 0
    1706:	c3 57       	subi	r28, 0x73	; 115
    1708:	df 4f       	sbci	r29, 0xFF	; 255
    170a:	98 81       	ld	r25, Y
    170c:	cd 58       	subi	r28, 0x8D	; 141
    170e:	d0 40       	sbci	r29, 0x00	; 0
    1710:	91 50       	subi	r25, 0x01	; 1
    1712:	c3 57       	subi	r28, 0x73	; 115
    1714:	df 4f       	sbci	r29, 0xFF	; 255
    1716:	98 83       	st	Y, r25
    1718:	cd 58       	subi	r28, 0x8D	; 141
    171a:	d0 40       	sbci	r29, 0x00	; 0
    171c:	c3 57       	subi	r28, 0x73	; 115
    171e:	df 4f       	sbci	r29, 0xFF	; 255
    1720:	e8 81       	ld	r30, Y
    1722:	cd 58       	subi	r28, 0x8D	; 141
    1724:	d0 40       	sbci	r29, 0x00	; 0
    1726:	ee 23       	and	r30, r30
    1728:	31 f6       	brne	.-116    	; 0x16b6 <main+0xb5c>
			TIMER1_init(&configTIMER1);
    172a:	ce 01       	movw	r24, r28
    172c:	87 58       	subi	r24, 0x87	; 135
    172e:	9f 4f       	sbci	r25, 0xFF	; 255
    1730:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <TIMER1_init>

			/*
			 * display door unlocking on the LCD
			 */
			LCD_displayString("Door Unlocking");
    1734:	81 eb       	ldi	r24, 0xB1	; 177
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	0e 94 ca 19 	call	0x3394	; 0x3394 <LCD_displayString>

			/*
			 * wait for the 15 seconds to pass
			 */
			while (g_flag == 0) {
    173c:	80 91 e8 00 	lds	r24, 0x00E8
    1740:	88 23       	and	r24, r24
    1742:	e1 f3       	breq	.-8      	; 0x173c <main+0xbe2>
			}

			/*
			 * return flag to initial value again
			 */
			g_flag = 0;
    1744:	10 92 e8 00 	sts	0x00E8, r1

			/*
			 * disable timer1
			 */
			TIMER1_deInit();
    1748:	0e 94 2c 1b 	call	0x3658	; 0x3658 <TIMER1_deInit>

			/*
			 * configure timer1 to count 3 seconds
			 */
			configTIMER1.compareValue = 2929;
    174c:	fe 01       	movw	r30, r28
    174e:	e7 58       	subi	r30, 0x87	; 135
    1750:	ff 4f       	sbci	r31, 0xFF	; 255
    1752:	81 e7       	ldi	r24, 0x71	; 113
    1754:	9b e0       	ldi	r25, 0x0B	; 11
    1756:	93 83       	std	Z+3, r25	; 0x03
    1758:	82 83       	std	Z+2, r24	; 0x02
			TIMER1_init(&configTIMER1);
    175a:	ce 01       	movw	r24, r28
    175c:	87 58       	subi	r24, 0x87	; 135
    175e:	9f 4f       	sbci	r25, 0xFF	; 255
    1760:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <TIMER1_init>

			LCD_clearScreen();
    1764:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <LCD_clearScreen>

			/*
			 * wait for the 3 sceonds to pass
			 */
			while (g_flag == 0) {
    1768:	80 91 e8 00 	lds	r24, 0x00E8
    176c:	88 23       	and	r24, r24
    176e:	e1 f3       	breq	.-8      	; 0x1768 <main+0xc0e>
			}

			/*
			 * return flag to initial value again
			 */
			g_flag = 0;
    1770:	10 92 e8 00 	sts	0x00E8, r1

			/*
			 * disable timer1
			 */
			TIMER1_deInit();
    1774:	0e 94 2c 1b 	call	0x3658	; 0x3658 <TIMER1_deInit>

			/*
			 * configure timer 1 to count 15 seconds in CTC mode
			 */
			configTIMER1.compareValue = 14648;
    1778:	fe 01       	movw	r30, r28
    177a:	e7 58       	subi	r30, 0x87	; 135
    177c:	ff 4f       	sbci	r31, 0xFF	; 255
    177e:	88 e3       	ldi	r24, 0x38	; 56
    1780:	99 e3       	ldi	r25, 0x39	; 57
    1782:	93 83       	std	Z+3, r25	; 0x03
    1784:	82 83       	std	Z+2, r24	; 0x02
			TIMER1_init(&configTIMER1);
    1786:	ce 01       	movw	r24, r28
    1788:	87 58       	subi	r24, 0x87	; 135
    178a:	9f 4f       	sbci	r25, 0xFF	; 255
    178c:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <TIMER1_init>

			/*
			 * display door locking on the LCD
			 */
			LCD_displayString("Door Locking");
    1790:	80 ec       	ldi	r24, 0xC0	; 192
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	0e 94 ca 19 	call	0x3394	; 0x3394 <LCD_displayString>

			/*
			 * wait for the 15 seconds to pass
			 */
			while (g_flag == 0) {
    1798:	80 91 e8 00 	lds	r24, 0x00E8
    179c:	88 23       	and	r24, r24
    179e:	e1 f3       	breq	.-8      	; 0x1798 <main+0xc3e>
			}

			/*
			 * return flag to initial value again
			 */
			g_flag = 0;
    17a0:	10 92 e8 00 	sts	0x00E8, r1

			/*
			 * disable timer1
			 */
			TIMER1_deInit();
    17a4:	0e 94 2c 1b 	call	0x3658	; 0x3658 <TIMER1_deInit>
    17a8:	48 ca       	rjmp	.-2928   	; 0xc3a <main+0xe0>

000017aa <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    17aa:	df 93       	push	r29
    17ac:	cf 93       	push	r28
    17ae:	00 d0       	rcall	.+0      	; 0x17b0 <GPIO_setupPinDirection+0x6>
    17b0:	00 d0       	rcall	.+0      	; 0x17b2 <GPIO_setupPinDirection+0x8>
    17b2:	0f 92       	push	r0
    17b4:	cd b7       	in	r28, 0x3d	; 61
    17b6:	de b7       	in	r29, 0x3e	; 62
    17b8:	89 83       	std	Y+1, r24	; 0x01
    17ba:	6a 83       	std	Y+2, r22	; 0x02
    17bc:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    17be:	8a 81       	ldd	r24, Y+2	; 0x02
    17c0:	88 30       	cpi	r24, 0x08	; 8
    17c2:	08 f0       	brcs	.+2      	; 0x17c6 <GPIO_setupPinDirection+0x1c>
    17c4:	d5 c0       	rjmp	.+426    	; 0x1970 <GPIO_setupPinDirection+0x1c6>
    17c6:	89 81       	ldd	r24, Y+1	; 0x01
    17c8:	84 30       	cpi	r24, 0x04	; 4
    17ca:	08 f0       	brcs	.+2      	; 0x17ce <GPIO_setupPinDirection+0x24>
    17cc:	d1 c0       	rjmp	.+418    	; 0x1970 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    17ce:	89 81       	ldd	r24, Y+1	; 0x01
    17d0:	28 2f       	mov	r18, r24
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	3d 83       	std	Y+5, r19	; 0x05
    17d6:	2c 83       	std	Y+4, r18	; 0x04
    17d8:	8c 81       	ldd	r24, Y+4	; 0x04
    17da:	9d 81       	ldd	r25, Y+5	; 0x05
    17dc:	81 30       	cpi	r24, 0x01	; 1
    17de:	91 05       	cpc	r25, r1
    17e0:	09 f4       	brne	.+2      	; 0x17e4 <GPIO_setupPinDirection+0x3a>
    17e2:	43 c0       	rjmp	.+134    	; 0x186a <GPIO_setupPinDirection+0xc0>
    17e4:	2c 81       	ldd	r18, Y+4	; 0x04
    17e6:	3d 81       	ldd	r19, Y+5	; 0x05
    17e8:	22 30       	cpi	r18, 0x02	; 2
    17ea:	31 05       	cpc	r19, r1
    17ec:	2c f4       	brge	.+10     	; 0x17f8 <GPIO_setupPinDirection+0x4e>
    17ee:	8c 81       	ldd	r24, Y+4	; 0x04
    17f0:	9d 81       	ldd	r25, Y+5	; 0x05
    17f2:	00 97       	sbiw	r24, 0x00	; 0
    17f4:	71 f0       	breq	.+28     	; 0x1812 <GPIO_setupPinDirection+0x68>
    17f6:	bc c0       	rjmp	.+376    	; 0x1970 <GPIO_setupPinDirection+0x1c6>
    17f8:	2c 81       	ldd	r18, Y+4	; 0x04
    17fa:	3d 81       	ldd	r19, Y+5	; 0x05
    17fc:	22 30       	cpi	r18, 0x02	; 2
    17fe:	31 05       	cpc	r19, r1
    1800:	09 f4       	brne	.+2      	; 0x1804 <GPIO_setupPinDirection+0x5a>
    1802:	5f c0       	rjmp	.+190    	; 0x18c2 <GPIO_setupPinDirection+0x118>
    1804:	8c 81       	ldd	r24, Y+4	; 0x04
    1806:	9d 81       	ldd	r25, Y+5	; 0x05
    1808:	83 30       	cpi	r24, 0x03	; 3
    180a:	91 05       	cpc	r25, r1
    180c:	09 f4       	brne	.+2      	; 0x1810 <GPIO_setupPinDirection+0x66>
    180e:	85 c0       	rjmp	.+266    	; 0x191a <GPIO_setupPinDirection+0x170>
    1810:	af c0       	rjmp	.+350    	; 0x1970 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1812:	8b 81       	ldd	r24, Y+3	; 0x03
    1814:	81 30       	cpi	r24, 0x01	; 1
    1816:	a1 f4       	brne	.+40     	; 0x1840 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1818:	aa e3       	ldi	r26, 0x3A	; 58
    181a:	b0 e0       	ldi	r27, 0x00	; 0
    181c:	ea e3       	ldi	r30, 0x3A	; 58
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	48 2f       	mov	r20, r24
    1824:	8a 81       	ldd	r24, Y+2	; 0x02
    1826:	28 2f       	mov	r18, r24
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	02 2e       	mov	r0, r18
    1830:	02 c0       	rjmp	.+4      	; 0x1836 <GPIO_setupPinDirection+0x8c>
    1832:	88 0f       	add	r24, r24
    1834:	99 1f       	adc	r25, r25
    1836:	0a 94       	dec	r0
    1838:	e2 f7       	brpl	.-8      	; 0x1832 <GPIO_setupPinDirection+0x88>
    183a:	84 2b       	or	r24, r20
    183c:	8c 93       	st	X, r24
    183e:	98 c0       	rjmp	.+304    	; 0x1970 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1840:	aa e3       	ldi	r26, 0x3A	; 58
    1842:	b0 e0       	ldi	r27, 0x00	; 0
    1844:	ea e3       	ldi	r30, 0x3A	; 58
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	80 81       	ld	r24, Z
    184a:	48 2f       	mov	r20, r24
    184c:	8a 81       	ldd	r24, Y+2	; 0x02
    184e:	28 2f       	mov	r18, r24
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	02 2e       	mov	r0, r18
    1858:	02 c0       	rjmp	.+4      	; 0x185e <GPIO_setupPinDirection+0xb4>
    185a:	88 0f       	add	r24, r24
    185c:	99 1f       	adc	r25, r25
    185e:	0a 94       	dec	r0
    1860:	e2 f7       	brpl	.-8      	; 0x185a <GPIO_setupPinDirection+0xb0>
    1862:	80 95       	com	r24
    1864:	84 23       	and	r24, r20
    1866:	8c 93       	st	X, r24
    1868:	83 c0       	rjmp	.+262    	; 0x1970 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    186a:	8b 81       	ldd	r24, Y+3	; 0x03
    186c:	81 30       	cpi	r24, 0x01	; 1
    186e:	a1 f4       	brne	.+40     	; 0x1898 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1870:	a7 e3       	ldi	r26, 0x37	; 55
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	e7 e3       	ldi	r30, 0x37	; 55
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	48 2f       	mov	r20, r24
    187c:	8a 81       	ldd	r24, Y+2	; 0x02
    187e:	28 2f       	mov	r18, r24
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	02 2e       	mov	r0, r18
    1888:	02 c0       	rjmp	.+4      	; 0x188e <GPIO_setupPinDirection+0xe4>
    188a:	88 0f       	add	r24, r24
    188c:	99 1f       	adc	r25, r25
    188e:	0a 94       	dec	r0
    1890:	e2 f7       	brpl	.-8      	; 0x188a <GPIO_setupPinDirection+0xe0>
    1892:	84 2b       	or	r24, r20
    1894:	8c 93       	st	X, r24
    1896:	6c c0       	rjmp	.+216    	; 0x1970 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1898:	a7 e3       	ldi	r26, 0x37	; 55
    189a:	b0 e0       	ldi	r27, 0x00	; 0
    189c:	e7 e3       	ldi	r30, 0x37	; 55
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	48 2f       	mov	r20, r24
    18a4:	8a 81       	ldd	r24, Y+2	; 0x02
    18a6:	28 2f       	mov	r18, r24
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	02 2e       	mov	r0, r18
    18b0:	02 c0       	rjmp	.+4      	; 0x18b6 <GPIO_setupPinDirection+0x10c>
    18b2:	88 0f       	add	r24, r24
    18b4:	99 1f       	adc	r25, r25
    18b6:	0a 94       	dec	r0
    18b8:	e2 f7       	brpl	.-8      	; 0x18b2 <GPIO_setupPinDirection+0x108>
    18ba:	80 95       	com	r24
    18bc:	84 23       	and	r24, r20
    18be:	8c 93       	st	X, r24
    18c0:	57 c0       	rjmp	.+174    	; 0x1970 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    18c2:	8b 81       	ldd	r24, Y+3	; 0x03
    18c4:	81 30       	cpi	r24, 0x01	; 1
    18c6:	a1 f4       	brne	.+40     	; 0x18f0 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    18c8:	a4 e3       	ldi	r26, 0x34	; 52
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	e4 e3       	ldi	r30, 0x34	; 52
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	48 2f       	mov	r20, r24
    18d4:	8a 81       	ldd	r24, Y+2	; 0x02
    18d6:	28 2f       	mov	r18, r24
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	02 2e       	mov	r0, r18
    18e0:	02 c0       	rjmp	.+4      	; 0x18e6 <GPIO_setupPinDirection+0x13c>
    18e2:	88 0f       	add	r24, r24
    18e4:	99 1f       	adc	r25, r25
    18e6:	0a 94       	dec	r0
    18e8:	e2 f7       	brpl	.-8      	; 0x18e2 <GPIO_setupPinDirection+0x138>
    18ea:	84 2b       	or	r24, r20
    18ec:	8c 93       	st	X, r24
    18ee:	40 c0       	rjmp	.+128    	; 0x1970 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    18f0:	a4 e3       	ldi	r26, 0x34	; 52
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	e4 e3       	ldi	r30, 0x34	; 52
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	48 2f       	mov	r20, r24
    18fc:	8a 81       	ldd	r24, Y+2	; 0x02
    18fe:	28 2f       	mov	r18, r24
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	02 2e       	mov	r0, r18
    1908:	02 c0       	rjmp	.+4      	; 0x190e <GPIO_setupPinDirection+0x164>
    190a:	88 0f       	add	r24, r24
    190c:	99 1f       	adc	r25, r25
    190e:	0a 94       	dec	r0
    1910:	e2 f7       	brpl	.-8      	; 0x190a <GPIO_setupPinDirection+0x160>
    1912:	80 95       	com	r24
    1914:	84 23       	and	r24, r20
    1916:	8c 93       	st	X, r24
    1918:	2b c0       	rjmp	.+86     	; 0x1970 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    191a:	8b 81       	ldd	r24, Y+3	; 0x03
    191c:	81 30       	cpi	r24, 0x01	; 1
    191e:	a1 f4       	brne	.+40     	; 0x1948 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1920:	a1 e3       	ldi	r26, 0x31	; 49
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	e1 e3       	ldi	r30, 0x31	; 49
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	48 2f       	mov	r20, r24
    192c:	8a 81       	ldd	r24, Y+2	; 0x02
    192e:	28 2f       	mov	r18, r24
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	02 2e       	mov	r0, r18
    1938:	02 c0       	rjmp	.+4      	; 0x193e <GPIO_setupPinDirection+0x194>
    193a:	88 0f       	add	r24, r24
    193c:	99 1f       	adc	r25, r25
    193e:	0a 94       	dec	r0
    1940:	e2 f7       	brpl	.-8      	; 0x193a <GPIO_setupPinDirection+0x190>
    1942:	84 2b       	or	r24, r20
    1944:	8c 93       	st	X, r24
    1946:	14 c0       	rjmp	.+40     	; 0x1970 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1948:	a1 e3       	ldi	r26, 0x31	; 49
    194a:	b0 e0       	ldi	r27, 0x00	; 0
    194c:	e1 e3       	ldi	r30, 0x31	; 49
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	80 81       	ld	r24, Z
    1952:	48 2f       	mov	r20, r24
    1954:	8a 81       	ldd	r24, Y+2	; 0x02
    1956:	28 2f       	mov	r18, r24
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	02 2e       	mov	r0, r18
    1960:	02 c0       	rjmp	.+4      	; 0x1966 <GPIO_setupPinDirection+0x1bc>
    1962:	88 0f       	add	r24, r24
    1964:	99 1f       	adc	r25, r25
    1966:	0a 94       	dec	r0
    1968:	e2 f7       	brpl	.-8      	; 0x1962 <GPIO_setupPinDirection+0x1b8>
    196a:	80 95       	com	r24
    196c:	84 23       	and	r24, r20
    196e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1970:	0f 90       	pop	r0
    1972:	0f 90       	pop	r0
    1974:	0f 90       	pop	r0
    1976:	0f 90       	pop	r0
    1978:	0f 90       	pop	r0
    197a:	cf 91       	pop	r28
    197c:	df 91       	pop	r29
    197e:	08 95       	ret

00001980 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1980:	df 93       	push	r29
    1982:	cf 93       	push	r28
    1984:	00 d0       	rcall	.+0      	; 0x1986 <GPIO_writePin+0x6>
    1986:	00 d0       	rcall	.+0      	; 0x1988 <GPIO_writePin+0x8>
    1988:	0f 92       	push	r0
    198a:	cd b7       	in	r28, 0x3d	; 61
    198c:	de b7       	in	r29, 0x3e	; 62
    198e:	89 83       	std	Y+1, r24	; 0x01
    1990:	6a 83       	std	Y+2, r22	; 0x02
    1992:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1994:	8a 81       	ldd	r24, Y+2	; 0x02
    1996:	88 30       	cpi	r24, 0x08	; 8
    1998:	08 f0       	brcs	.+2      	; 0x199c <GPIO_writePin+0x1c>
    199a:	d5 c0       	rjmp	.+426    	; 0x1b46 <GPIO_writePin+0x1c6>
    199c:	89 81       	ldd	r24, Y+1	; 0x01
    199e:	84 30       	cpi	r24, 0x04	; 4
    19a0:	08 f0       	brcs	.+2      	; 0x19a4 <GPIO_writePin+0x24>
    19a2:	d1 c0       	rjmp	.+418    	; 0x1b46 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    19a4:	89 81       	ldd	r24, Y+1	; 0x01
    19a6:	28 2f       	mov	r18, r24
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	3d 83       	std	Y+5, r19	; 0x05
    19ac:	2c 83       	std	Y+4, r18	; 0x04
    19ae:	8c 81       	ldd	r24, Y+4	; 0x04
    19b0:	9d 81       	ldd	r25, Y+5	; 0x05
    19b2:	81 30       	cpi	r24, 0x01	; 1
    19b4:	91 05       	cpc	r25, r1
    19b6:	09 f4       	brne	.+2      	; 0x19ba <GPIO_writePin+0x3a>
    19b8:	43 c0       	rjmp	.+134    	; 0x1a40 <GPIO_writePin+0xc0>
    19ba:	2c 81       	ldd	r18, Y+4	; 0x04
    19bc:	3d 81       	ldd	r19, Y+5	; 0x05
    19be:	22 30       	cpi	r18, 0x02	; 2
    19c0:	31 05       	cpc	r19, r1
    19c2:	2c f4       	brge	.+10     	; 0x19ce <GPIO_writePin+0x4e>
    19c4:	8c 81       	ldd	r24, Y+4	; 0x04
    19c6:	9d 81       	ldd	r25, Y+5	; 0x05
    19c8:	00 97       	sbiw	r24, 0x00	; 0
    19ca:	71 f0       	breq	.+28     	; 0x19e8 <GPIO_writePin+0x68>
    19cc:	bc c0       	rjmp	.+376    	; 0x1b46 <GPIO_writePin+0x1c6>
    19ce:	2c 81       	ldd	r18, Y+4	; 0x04
    19d0:	3d 81       	ldd	r19, Y+5	; 0x05
    19d2:	22 30       	cpi	r18, 0x02	; 2
    19d4:	31 05       	cpc	r19, r1
    19d6:	09 f4       	brne	.+2      	; 0x19da <GPIO_writePin+0x5a>
    19d8:	5f c0       	rjmp	.+190    	; 0x1a98 <GPIO_writePin+0x118>
    19da:	8c 81       	ldd	r24, Y+4	; 0x04
    19dc:	9d 81       	ldd	r25, Y+5	; 0x05
    19de:	83 30       	cpi	r24, 0x03	; 3
    19e0:	91 05       	cpc	r25, r1
    19e2:	09 f4       	brne	.+2      	; 0x19e6 <GPIO_writePin+0x66>
    19e4:	85 c0       	rjmp	.+266    	; 0x1af0 <GPIO_writePin+0x170>
    19e6:	af c0       	rjmp	.+350    	; 0x1b46 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    19e8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ea:	81 30       	cpi	r24, 0x01	; 1
    19ec:	a1 f4       	brne	.+40     	; 0x1a16 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    19ee:	ab e3       	ldi	r26, 0x3B	; 59
    19f0:	b0 e0       	ldi	r27, 0x00	; 0
    19f2:	eb e3       	ldi	r30, 0x3B	; 59
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	48 2f       	mov	r20, r24
    19fa:	8a 81       	ldd	r24, Y+2	; 0x02
    19fc:	28 2f       	mov	r18, r24
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	02 2e       	mov	r0, r18
    1a06:	02 c0       	rjmp	.+4      	; 0x1a0c <GPIO_writePin+0x8c>
    1a08:	88 0f       	add	r24, r24
    1a0a:	99 1f       	adc	r25, r25
    1a0c:	0a 94       	dec	r0
    1a0e:	e2 f7       	brpl	.-8      	; 0x1a08 <GPIO_writePin+0x88>
    1a10:	84 2b       	or	r24, r20
    1a12:	8c 93       	st	X, r24
    1a14:	98 c0       	rjmp	.+304    	; 0x1b46 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1a16:	ab e3       	ldi	r26, 0x3B	; 59
    1a18:	b0 e0       	ldi	r27, 0x00	; 0
    1a1a:	eb e3       	ldi	r30, 0x3B	; 59
    1a1c:	f0 e0       	ldi	r31, 0x00	; 0
    1a1e:	80 81       	ld	r24, Z
    1a20:	48 2f       	mov	r20, r24
    1a22:	8a 81       	ldd	r24, Y+2	; 0x02
    1a24:	28 2f       	mov	r18, r24
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	02 2e       	mov	r0, r18
    1a2e:	02 c0       	rjmp	.+4      	; 0x1a34 <GPIO_writePin+0xb4>
    1a30:	88 0f       	add	r24, r24
    1a32:	99 1f       	adc	r25, r25
    1a34:	0a 94       	dec	r0
    1a36:	e2 f7       	brpl	.-8      	; 0x1a30 <GPIO_writePin+0xb0>
    1a38:	80 95       	com	r24
    1a3a:	84 23       	and	r24, r20
    1a3c:	8c 93       	st	X, r24
    1a3e:	83 c0       	rjmp	.+262    	; 0x1b46 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1a40:	8b 81       	ldd	r24, Y+3	; 0x03
    1a42:	81 30       	cpi	r24, 0x01	; 1
    1a44:	a1 f4       	brne	.+40     	; 0x1a6e <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1a46:	a8 e3       	ldi	r26, 0x38	; 56
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	e8 e3       	ldi	r30, 0x38	; 56
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	48 2f       	mov	r20, r24
    1a52:	8a 81       	ldd	r24, Y+2	; 0x02
    1a54:	28 2f       	mov	r18, r24
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	02 2e       	mov	r0, r18
    1a5e:	02 c0       	rjmp	.+4      	; 0x1a64 <GPIO_writePin+0xe4>
    1a60:	88 0f       	add	r24, r24
    1a62:	99 1f       	adc	r25, r25
    1a64:	0a 94       	dec	r0
    1a66:	e2 f7       	brpl	.-8      	; 0x1a60 <GPIO_writePin+0xe0>
    1a68:	84 2b       	or	r24, r20
    1a6a:	8c 93       	st	X, r24
    1a6c:	6c c0       	rjmp	.+216    	; 0x1b46 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1a6e:	a8 e3       	ldi	r26, 0x38	; 56
    1a70:	b0 e0       	ldi	r27, 0x00	; 0
    1a72:	e8 e3       	ldi	r30, 0x38	; 56
    1a74:	f0 e0       	ldi	r31, 0x00	; 0
    1a76:	80 81       	ld	r24, Z
    1a78:	48 2f       	mov	r20, r24
    1a7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7c:	28 2f       	mov	r18, r24
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	02 2e       	mov	r0, r18
    1a86:	02 c0       	rjmp	.+4      	; 0x1a8c <GPIO_writePin+0x10c>
    1a88:	88 0f       	add	r24, r24
    1a8a:	99 1f       	adc	r25, r25
    1a8c:	0a 94       	dec	r0
    1a8e:	e2 f7       	brpl	.-8      	; 0x1a88 <GPIO_writePin+0x108>
    1a90:	80 95       	com	r24
    1a92:	84 23       	and	r24, r20
    1a94:	8c 93       	st	X, r24
    1a96:	57 c0       	rjmp	.+174    	; 0x1b46 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1a98:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9a:	81 30       	cpi	r24, 0x01	; 1
    1a9c:	a1 f4       	brne	.+40     	; 0x1ac6 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1a9e:	a5 e3       	ldi	r26, 0x35	; 53
    1aa0:	b0 e0       	ldi	r27, 0x00	; 0
    1aa2:	e5 e3       	ldi	r30, 0x35	; 53
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	48 2f       	mov	r20, r24
    1aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1aac:	28 2f       	mov	r18, r24
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	02 2e       	mov	r0, r18
    1ab6:	02 c0       	rjmp	.+4      	; 0x1abc <GPIO_writePin+0x13c>
    1ab8:	88 0f       	add	r24, r24
    1aba:	99 1f       	adc	r25, r25
    1abc:	0a 94       	dec	r0
    1abe:	e2 f7       	brpl	.-8      	; 0x1ab8 <GPIO_writePin+0x138>
    1ac0:	84 2b       	or	r24, r20
    1ac2:	8c 93       	st	X, r24
    1ac4:	40 c0       	rjmp	.+128    	; 0x1b46 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1ac6:	a5 e3       	ldi	r26, 0x35	; 53
    1ac8:	b0 e0       	ldi	r27, 0x00	; 0
    1aca:	e5 e3       	ldi	r30, 0x35	; 53
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	80 81       	ld	r24, Z
    1ad0:	48 2f       	mov	r20, r24
    1ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad4:	28 2f       	mov	r18, r24
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	02 2e       	mov	r0, r18
    1ade:	02 c0       	rjmp	.+4      	; 0x1ae4 <GPIO_writePin+0x164>
    1ae0:	88 0f       	add	r24, r24
    1ae2:	99 1f       	adc	r25, r25
    1ae4:	0a 94       	dec	r0
    1ae6:	e2 f7       	brpl	.-8      	; 0x1ae0 <GPIO_writePin+0x160>
    1ae8:	80 95       	com	r24
    1aea:	84 23       	and	r24, r20
    1aec:	8c 93       	st	X, r24
    1aee:	2b c0       	rjmp	.+86     	; 0x1b46 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1af0:	8b 81       	ldd	r24, Y+3	; 0x03
    1af2:	81 30       	cpi	r24, 0x01	; 1
    1af4:	a1 f4       	brne	.+40     	; 0x1b1e <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1af6:	a2 e3       	ldi	r26, 0x32	; 50
    1af8:	b0 e0       	ldi	r27, 0x00	; 0
    1afa:	e2 e3       	ldi	r30, 0x32	; 50
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	80 81       	ld	r24, Z
    1b00:	48 2f       	mov	r20, r24
    1b02:	8a 81       	ldd	r24, Y+2	; 0x02
    1b04:	28 2f       	mov	r18, r24
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	02 2e       	mov	r0, r18
    1b0e:	02 c0       	rjmp	.+4      	; 0x1b14 <GPIO_writePin+0x194>
    1b10:	88 0f       	add	r24, r24
    1b12:	99 1f       	adc	r25, r25
    1b14:	0a 94       	dec	r0
    1b16:	e2 f7       	brpl	.-8      	; 0x1b10 <GPIO_writePin+0x190>
    1b18:	84 2b       	or	r24, r20
    1b1a:	8c 93       	st	X, r24
    1b1c:	14 c0       	rjmp	.+40     	; 0x1b46 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1b1e:	a2 e3       	ldi	r26, 0x32	; 50
    1b20:	b0 e0       	ldi	r27, 0x00	; 0
    1b22:	e2 e3       	ldi	r30, 0x32	; 50
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	80 81       	ld	r24, Z
    1b28:	48 2f       	mov	r20, r24
    1b2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2c:	28 2f       	mov	r18, r24
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	02 2e       	mov	r0, r18
    1b36:	02 c0       	rjmp	.+4      	; 0x1b3c <GPIO_writePin+0x1bc>
    1b38:	88 0f       	add	r24, r24
    1b3a:	99 1f       	adc	r25, r25
    1b3c:	0a 94       	dec	r0
    1b3e:	e2 f7       	brpl	.-8      	; 0x1b38 <GPIO_writePin+0x1b8>
    1b40:	80 95       	com	r24
    1b42:	84 23       	and	r24, r20
    1b44:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1b46:	0f 90       	pop	r0
    1b48:	0f 90       	pop	r0
    1b4a:	0f 90       	pop	r0
    1b4c:	0f 90       	pop	r0
    1b4e:	0f 90       	pop	r0
    1b50:	cf 91       	pop	r28
    1b52:	df 91       	pop	r29
    1b54:	08 95       	ret

00001b56 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1b56:	df 93       	push	r29
    1b58:	cf 93       	push	r28
    1b5a:	00 d0       	rcall	.+0      	; 0x1b5c <GPIO_readPin+0x6>
    1b5c:	00 d0       	rcall	.+0      	; 0x1b5e <GPIO_readPin+0x8>
    1b5e:	0f 92       	push	r0
    1b60:	cd b7       	in	r28, 0x3d	; 61
    1b62:	de b7       	in	r29, 0x3e	; 62
    1b64:	8a 83       	std	Y+2, r24	; 0x02
    1b66:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1b68:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1b6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6c:	88 30       	cpi	r24, 0x08	; 8
    1b6e:	08 f0       	brcs	.+2      	; 0x1b72 <GPIO_readPin+0x1c>
    1b70:	84 c0       	rjmp	.+264    	; 0x1c7a <GPIO_readPin+0x124>
    1b72:	8a 81       	ldd	r24, Y+2	; 0x02
    1b74:	84 30       	cpi	r24, 0x04	; 4
    1b76:	08 f0       	brcs	.+2      	; 0x1b7a <GPIO_readPin+0x24>
    1b78:	80 c0       	rjmp	.+256    	; 0x1c7a <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7c:	28 2f       	mov	r18, r24
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	3d 83       	std	Y+5, r19	; 0x05
    1b82:	2c 83       	std	Y+4, r18	; 0x04
    1b84:	4c 81       	ldd	r20, Y+4	; 0x04
    1b86:	5d 81       	ldd	r21, Y+5	; 0x05
    1b88:	41 30       	cpi	r20, 0x01	; 1
    1b8a:	51 05       	cpc	r21, r1
    1b8c:	79 f1       	breq	.+94     	; 0x1bec <GPIO_readPin+0x96>
    1b8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b90:	9d 81       	ldd	r25, Y+5	; 0x05
    1b92:	82 30       	cpi	r24, 0x02	; 2
    1b94:	91 05       	cpc	r25, r1
    1b96:	34 f4       	brge	.+12     	; 0x1ba4 <GPIO_readPin+0x4e>
    1b98:	2c 81       	ldd	r18, Y+4	; 0x04
    1b9a:	3d 81       	ldd	r19, Y+5	; 0x05
    1b9c:	21 15       	cp	r18, r1
    1b9e:	31 05       	cpc	r19, r1
    1ba0:	69 f0       	breq	.+26     	; 0x1bbc <GPIO_readPin+0x66>
    1ba2:	6b c0       	rjmp	.+214    	; 0x1c7a <GPIO_readPin+0x124>
    1ba4:	4c 81       	ldd	r20, Y+4	; 0x04
    1ba6:	5d 81       	ldd	r21, Y+5	; 0x05
    1ba8:	42 30       	cpi	r20, 0x02	; 2
    1baa:	51 05       	cpc	r21, r1
    1bac:	b9 f1       	breq	.+110    	; 0x1c1c <GPIO_readPin+0xc6>
    1bae:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb0:	9d 81       	ldd	r25, Y+5	; 0x05
    1bb2:	83 30       	cpi	r24, 0x03	; 3
    1bb4:	91 05       	cpc	r25, r1
    1bb6:	09 f4       	brne	.+2      	; 0x1bba <GPIO_readPin+0x64>
    1bb8:	49 c0       	rjmp	.+146    	; 0x1c4c <GPIO_readPin+0xf6>
    1bba:	5f c0       	rjmp	.+190    	; 0x1c7a <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1bbc:	e9 e3       	ldi	r30, 0x39	; 57
    1bbe:	f0 e0       	ldi	r31, 0x00	; 0
    1bc0:	80 81       	ld	r24, Z
    1bc2:	28 2f       	mov	r18, r24
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc8:	88 2f       	mov	r24, r24
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	a9 01       	movw	r20, r18
    1bce:	02 c0       	rjmp	.+4      	; 0x1bd4 <GPIO_readPin+0x7e>
    1bd0:	55 95       	asr	r21
    1bd2:	47 95       	ror	r20
    1bd4:	8a 95       	dec	r24
    1bd6:	e2 f7       	brpl	.-8      	; 0x1bd0 <GPIO_readPin+0x7a>
    1bd8:	ca 01       	movw	r24, r20
    1bda:	81 70       	andi	r24, 0x01	; 1
    1bdc:	90 70       	andi	r25, 0x00	; 0
    1bde:	88 23       	and	r24, r24
    1be0:	19 f0       	breq	.+6      	; 0x1be8 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	89 83       	std	Y+1, r24	; 0x01
    1be6:	49 c0       	rjmp	.+146    	; 0x1c7a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1be8:	19 82       	std	Y+1, r1	; 0x01
    1bea:	47 c0       	rjmp	.+142    	; 0x1c7a <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1bec:	e6 e3       	ldi	r30, 0x36	; 54
    1bee:	f0 e0       	ldi	r31, 0x00	; 0
    1bf0:	80 81       	ld	r24, Z
    1bf2:	28 2f       	mov	r18, r24
    1bf4:	30 e0       	ldi	r19, 0x00	; 0
    1bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf8:	88 2f       	mov	r24, r24
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	a9 01       	movw	r20, r18
    1bfe:	02 c0       	rjmp	.+4      	; 0x1c04 <GPIO_readPin+0xae>
    1c00:	55 95       	asr	r21
    1c02:	47 95       	ror	r20
    1c04:	8a 95       	dec	r24
    1c06:	e2 f7       	brpl	.-8      	; 0x1c00 <GPIO_readPin+0xaa>
    1c08:	ca 01       	movw	r24, r20
    1c0a:	81 70       	andi	r24, 0x01	; 1
    1c0c:	90 70       	andi	r25, 0x00	; 0
    1c0e:	88 23       	and	r24, r24
    1c10:	19 f0       	breq	.+6      	; 0x1c18 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	89 83       	std	Y+1, r24	; 0x01
    1c16:	31 c0       	rjmp	.+98     	; 0x1c7a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1c18:	19 82       	std	Y+1, r1	; 0x01
    1c1a:	2f c0       	rjmp	.+94     	; 0x1c7a <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1c1c:	e3 e3       	ldi	r30, 0x33	; 51
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	28 2f       	mov	r18, r24
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	8b 81       	ldd	r24, Y+3	; 0x03
    1c28:	88 2f       	mov	r24, r24
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	a9 01       	movw	r20, r18
    1c2e:	02 c0       	rjmp	.+4      	; 0x1c34 <GPIO_readPin+0xde>
    1c30:	55 95       	asr	r21
    1c32:	47 95       	ror	r20
    1c34:	8a 95       	dec	r24
    1c36:	e2 f7       	brpl	.-8      	; 0x1c30 <GPIO_readPin+0xda>
    1c38:	ca 01       	movw	r24, r20
    1c3a:	81 70       	andi	r24, 0x01	; 1
    1c3c:	90 70       	andi	r25, 0x00	; 0
    1c3e:	88 23       	and	r24, r24
    1c40:	19 f0       	breq	.+6      	; 0x1c48 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	89 83       	std	Y+1, r24	; 0x01
    1c46:	19 c0       	rjmp	.+50     	; 0x1c7a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1c48:	19 82       	std	Y+1, r1	; 0x01
    1c4a:	17 c0       	rjmp	.+46     	; 0x1c7a <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1c4c:	e0 e3       	ldi	r30, 0x30	; 48
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	80 81       	ld	r24, Z
    1c52:	28 2f       	mov	r18, r24
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	8b 81       	ldd	r24, Y+3	; 0x03
    1c58:	88 2f       	mov	r24, r24
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	a9 01       	movw	r20, r18
    1c5e:	02 c0       	rjmp	.+4      	; 0x1c64 <GPIO_readPin+0x10e>
    1c60:	55 95       	asr	r21
    1c62:	47 95       	ror	r20
    1c64:	8a 95       	dec	r24
    1c66:	e2 f7       	brpl	.-8      	; 0x1c60 <GPIO_readPin+0x10a>
    1c68:	ca 01       	movw	r24, r20
    1c6a:	81 70       	andi	r24, 0x01	; 1
    1c6c:	90 70       	andi	r25, 0x00	; 0
    1c6e:	88 23       	and	r24, r24
    1c70:	19 f0       	breq	.+6      	; 0x1c78 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	89 83       	std	Y+1, r24	; 0x01
    1c76:	01 c0       	rjmp	.+2      	; 0x1c7a <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1c78:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1c7a:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c7c:	0f 90       	pop	r0
    1c7e:	0f 90       	pop	r0
    1c80:	0f 90       	pop	r0
    1c82:	0f 90       	pop	r0
    1c84:	0f 90       	pop	r0
    1c86:	cf 91       	pop	r28
    1c88:	df 91       	pop	r29
    1c8a:	08 95       	ret

00001c8c <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1c8c:	df 93       	push	r29
    1c8e:	cf 93       	push	r28
    1c90:	00 d0       	rcall	.+0      	; 0x1c92 <GPIO_setupPortDirection+0x6>
    1c92:	00 d0       	rcall	.+0      	; 0x1c94 <GPIO_setupPortDirection+0x8>
    1c94:	cd b7       	in	r28, 0x3d	; 61
    1c96:	de b7       	in	r29, 0x3e	; 62
    1c98:	89 83       	std	Y+1, r24	; 0x01
    1c9a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1c9c:	89 81       	ldd	r24, Y+1	; 0x01
    1c9e:	84 30       	cpi	r24, 0x04	; 4
    1ca0:	90 f5       	brcc	.+100    	; 0x1d06 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1ca2:	89 81       	ldd	r24, Y+1	; 0x01
    1ca4:	28 2f       	mov	r18, r24
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	3c 83       	std	Y+4, r19	; 0x04
    1caa:	2b 83       	std	Y+3, r18	; 0x03
    1cac:	8b 81       	ldd	r24, Y+3	; 0x03
    1cae:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb0:	81 30       	cpi	r24, 0x01	; 1
    1cb2:	91 05       	cpc	r25, r1
    1cb4:	d1 f0       	breq	.+52     	; 0x1cea <GPIO_setupPortDirection+0x5e>
    1cb6:	2b 81       	ldd	r18, Y+3	; 0x03
    1cb8:	3c 81       	ldd	r19, Y+4	; 0x04
    1cba:	22 30       	cpi	r18, 0x02	; 2
    1cbc:	31 05       	cpc	r19, r1
    1cbe:	2c f4       	brge	.+10     	; 0x1cca <GPIO_setupPortDirection+0x3e>
    1cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc4:	00 97       	sbiw	r24, 0x00	; 0
    1cc6:	61 f0       	breq	.+24     	; 0x1ce0 <GPIO_setupPortDirection+0x54>
    1cc8:	1e c0       	rjmp	.+60     	; 0x1d06 <GPIO_setupPortDirection+0x7a>
    1cca:	2b 81       	ldd	r18, Y+3	; 0x03
    1ccc:	3c 81       	ldd	r19, Y+4	; 0x04
    1cce:	22 30       	cpi	r18, 0x02	; 2
    1cd0:	31 05       	cpc	r19, r1
    1cd2:	81 f0       	breq	.+32     	; 0x1cf4 <GPIO_setupPortDirection+0x68>
    1cd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd8:	83 30       	cpi	r24, 0x03	; 3
    1cda:	91 05       	cpc	r25, r1
    1cdc:	81 f0       	breq	.+32     	; 0x1cfe <GPIO_setupPortDirection+0x72>
    1cde:	13 c0       	rjmp	.+38     	; 0x1d06 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1ce0:	ea e3       	ldi	r30, 0x3A	; 58
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce6:	80 83       	st	Z, r24
    1ce8:	0e c0       	rjmp	.+28     	; 0x1d06 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1cea:	e7 e3       	ldi	r30, 0x37	; 55
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf0:	80 83       	st	Z, r24
    1cf2:	09 c0       	rjmp	.+18     	; 0x1d06 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1cf4:	e4 e3       	ldi	r30, 0x34	; 52
    1cf6:	f0 e0       	ldi	r31, 0x00	; 0
    1cf8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfa:	80 83       	st	Z, r24
    1cfc:	04 c0       	rjmp	.+8      	; 0x1d06 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1cfe:	e1 e3       	ldi	r30, 0x31	; 49
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	8a 81       	ldd	r24, Y+2	; 0x02
    1d04:	80 83       	st	Z, r24
			break;
		}
	}
}
    1d06:	0f 90       	pop	r0
    1d08:	0f 90       	pop	r0
    1d0a:	0f 90       	pop	r0
    1d0c:	0f 90       	pop	r0
    1d0e:	cf 91       	pop	r28
    1d10:	df 91       	pop	r29
    1d12:	08 95       	ret

00001d14 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1d14:	df 93       	push	r29
    1d16:	cf 93       	push	r28
    1d18:	00 d0       	rcall	.+0      	; 0x1d1a <GPIO_writePort+0x6>
    1d1a:	00 d0       	rcall	.+0      	; 0x1d1c <GPIO_writePort+0x8>
    1d1c:	cd b7       	in	r28, 0x3d	; 61
    1d1e:	de b7       	in	r29, 0x3e	; 62
    1d20:	89 83       	std	Y+1, r24	; 0x01
    1d22:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1d24:	89 81       	ldd	r24, Y+1	; 0x01
    1d26:	84 30       	cpi	r24, 0x04	; 4
    1d28:	90 f5       	brcc	.+100    	; 0x1d8e <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1d2a:	89 81       	ldd	r24, Y+1	; 0x01
    1d2c:	28 2f       	mov	r18, r24
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	3c 83       	std	Y+4, r19	; 0x04
    1d32:	2b 83       	std	Y+3, r18	; 0x03
    1d34:	8b 81       	ldd	r24, Y+3	; 0x03
    1d36:	9c 81       	ldd	r25, Y+4	; 0x04
    1d38:	81 30       	cpi	r24, 0x01	; 1
    1d3a:	91 05       	cpc	r25, r1
    1d3c:	d1 f0       	breq	.+52     	; 0x1d72 <GPIO_writePort+0x5e>
    1d3e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d40:	3c 81       	ldd	r19, Y+4	; 0x04
    1d42:	22 30       	cpi	r18, 0x02	; 2
    1d44:	31 05       	cpc	r19, r1
    1d46:	2c f4       	brge	.+10     	; 0x1d52 <GPIO_writePort+0x3e>
    1d48:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d4c:	00 97       	sbiw	r24, 0x00	; 0
    1d4e:	61 f0       	breq	.+24     	; 0x1d68 <GPIO_writePort+0x54>
    1d50:	1e c0       	rjmp	.+60     	; 0x1d8e <GPIO_writePort+0x7a>
    1d52:	2b 81       	ldd	r18, Y+3	; 0x03
    1d54:	3c 81       	ldd	r19, Y+4	; 0x04
    1d56:	22 30       	cpi	r18, 0x02	; 2
    1d58:	31 05       	cpc	r19, r1
    1d5a:	81 f0       	breq	.+32     	; 0x1d7c <GPIO_writePort+0x68>
    1d5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d60:	83 30       	cpi	r24, 0x03	; 3
    1d62:	91 05       	cpc	r25, r1
    1d64:	81 f0       	breq	.+32     	; 0x1d86 <GPIO_writePort+0x72>
    1d66:	13 c0       	rjmp	.+38     	; 0x1d8e <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1d68:	eb e3       	ldi	r30, 0x3B	; 59
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6e:	80 83       	st	Z, r24
    1d70:	0e c0       	rjmp	.+28     	; 0x1d8e <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1d72:	e8 e3       	ldi	r30, 0x38	; 56
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	8a 81       	ldd	r24, Y+2	; 0x02
    1d78:	80 83       	st	Z, r24
    1d7a:	09 c0       	rjmp	.+18     	; 0x1d8e <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1d7c:	e5 e3       	ldi	r30, 0x35	; 53
    1d7e:	f0 e0       	ldi	r31, 0x00	; 0
    1d80:	8a 81       	ldd	r24, Y+2	; 0x02
    1d82:	80 83       	st	Z, r24
    1d84:	04 c0       	rjmp	.+8      	; 0x1d8e <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1d86:	e2 e3       	ldi	r30, 0x32	; 50
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8c:	80 83       	st	Z, r24
			break;
		}
	}
}
    1d8e:	0f 90       	pop	r0
    1d90:	0f 90       	pop	r0
    1d92:	0f 90       	pop	r0
    1d94:	0f 90       	pop	r0
    1d96:	cf 91       	pop	r28
    1d98:	df 91       	pop	r29
    1d9a:	08 95       	ret

00001d9c <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1d9c:	df 93       	push	r29
    1d9e:	cf 93       	push	r28
    1da0:	00 d0       	rcall	.+0      	; 0x1da2 <GPIO_readPort+0x6>
    1da2:	00 d0       	rcall	.+0      	; 0x1da4 <GPIO_readPort+0x8>
    1da4:	cd b7       	in	r28, 0x3d	; 61
    1da6:	de b7       	in	r29, 0x3e	; 62
    1da8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1daa:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1dac:	8a 81       	ldd	r24, Y+2	; 0x02
    1dae:	84 30       	cpi	r24, 0x04	; 4
    1db0:	90 f5       	brcc	.+100    	; 0x1e16 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1db2:	8a 81       	ldd	r24, Y+2	; 0x02
    1db4:	28 2f       	mov	r18, r24
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	3c 83       	std	Y+4, r19	; 0x04
    1dba:	2b 83       	std	Y+3, r18	; 0x03
    1dbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc0:	81 30       	cpi	r24, 0x01	; 1
    1dc2:	91 05       	cpc	r25, r1
    1dc4:	d1 f0       	breq	.+52     	; 0x1dfa <GPIO_readPort+0x5e>
    1dc6:	2b 81       	ldd	r18, Y+3	; 0x03
    1dc8:	3c 81       	ldd	r19, Y+4	; 0x04
    1dca:	22 30       	cpi	r18, 0x02	; 2
    1dcc:	31 05       	cpc	r19, r1
    1dce:	2c f4       	brge	.+10     	; 0x1dda <GPIO_readPort+0x3e>
    1dd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd2:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd4:	00 97       	sbiw	r24, 0x00	; 0
    1dd6:	61 f0       	breq	.+24     	; 0x1df0 <GPIO_readPort+0x54>
    1dd8:	1e c0       	rjmp	.+60     	; 0x1e16 <GPIO_readPort+0x7a>
    1dda:	2b 81       	ldd	r18, Y+3	; 0x03
    1ddc:	3c 81       	ldd	r19, Y+4	; 0x04
    1dde:	22 30       	cpi	r18, 0x02	; 2
    1de0:	31 05       	cpc	r19, r1
    1de2:	81 f0       	breq	.+32     	; 0x1e04 <GPIO_readPort+0x68>
    1de4:	8b 81       	ldd	r24, Y+3	; 0x03
    1de6:	9c 81       	ldd	r25, Y+4	; 0x04
    1de8:	83 30       	cpi	r24, 0x03	; 3
    1dea:	91 05       	cpc	r25, r1
    1dec:	81 f0       	breq	.+32     	; 0x1e0e <GPIO_readPort+0x72>
    1dee:	13 c0       	rjmp	.+38     	; 0x1e16 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1df0:	e9 e3       	ldi	r30, 0x39	; 57
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	89 83       	std	Y+1, r24	; 0x01
    1df8:	0e c0       	rjmp	.+28     	; 0x1e16 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1dfa:	e6 e3       	ldi	r30, 0x36	; 54
    1dfc:	f0 e0       	ldi	r31, 0x00	; 0
    1dfe:	80 81       	ld	r24, Z
    1e00:	89 83       	std	Y+1, r24	; 0x01
    1e02:	09 c0       	rjmp	.+18     	; 0x1e16 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1e04:	e3 e3       	ldi	r30, 0x33	; 51
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	80 81       	ld	r24, Z
    1e0a:	89 83       	std	Y+1, r24	; 0x01
    1e0c:	04 c0       	rjmp	.+8      	; 0x1e16 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1e0e:	e0 e3       	ldi	r30, 0x30	; 48
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	80 81       	ld	r24, Z
    1e14:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1e16:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e18:	0f 90       	pop	r0
    1e1a:	0f 90       	pop	r0
    1e1c:	0f 90       	pop	r0
    1e1e:	0f 90       	pop	r0
    1e20:	cf 91       	pop	r28
    1e22:	df 91       	pop	r29
    1e24:	08 95       	ret

00001e26 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1e26:	df 93       	push	r29
    1e28:	cf 93       	push	r28
    1e2a:	00 d0       	rcall	.+0      	; 0x1e2c <KEYPAD_getPressedKey+0x6>
    1e2c:	cd b7       	in	r28, 0x3d	; 61
    1e2e:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1e30:	80 e0       	ldi	r24, 0x00	; 0
    1e32:	60 e0       	ldi	r22, 0x00	; 0
    1e34:	40 e0       	ldi	r20, 0x00	; 0
    1e36:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1e3a:	80 e0       	ldi	r24, 0x00	; 0
    1e3c:	61 e0       	ldi	r22, 0x01	; 1
    1e3e:	40 e0       	ldi	r20, 0x00	; 0
    1e40:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1e44:	80 e0       	ldi	r24, 0x00	; 0
    1e46:	62 e0       	ldi	r22, 0x02	; 2
    1e48:	40 e0       	ldi	r20, 0x00	; 0
    1e4a:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1e4e:	80 e0       	ldi	r24, 0x00	; 0
    1e50:	63 e0       	ldi	r22, 0x03	; 3
    1e52:	40 e0       	ldi	r20, 0x00	; 0
    1e54:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1e58:	80 e0       	ldi	r24, 0x00	; 0
    1e5a:	64 e0       	ldi	r22, 0x04	; 4
    1e5c:	40 e0       	ldi	r20, 0x00	; 0
    1e5e:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1e62:	80 e0       	ldi	r24, 0x00	; 0
    1e64:	65 e0       	ldi	r22, 0x05	; 5
    1e66:	40 e0       	ldi	r20, 0x00	; 0
    1e68:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1e6c:	80 e0       	ldi	r24, 0x00	; 0
    1e6e:	66 e0       	ldi	r22, 0x06	; 6
    1e70:	40 e0       	ldi	r20, 0x00	; 0
    1e72:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1e76:	80 e0       	ldi	r24, 0x00	; 0
    1e78:	67 e0       	ldi	r22, 0x07	; 7
    1e7a:	40 e0       	ldi	r20, 0x00	; 0
    1e7c:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1e80:	19 82       	std	Y+1, r1	; 0x01
    1e82:	35 c0       	rjmp	.+106    	; 0x1eee <KEYPAD_getPressedKey+0xc8>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1e84:	80 e0       	ldi	r24, 0x00	; 0
    1e86:	69 81       	ldd	r22, Y+1	; 0x01
    1e88:	41 e0       	ldi	r20, 0x01	; 1
    1e8a:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1e8e:	80 e0       	ldi	r24, 0x00	; 0
    1e90:	69 81       	ldd	r22, Y+1	; 0x01
    1e92:	40 e0       	ldi	r20, 0x00	; 0
    1e94:	0e 94 c0 0c 	call	0x1980	; 0x1980 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1e98:	1a 82       	std	Y+2, r1	; 0x02
    1e9a:	1e c0       	rjmp	.+60     	; 0x1ed8 <KEYPAD_getPressedKey+0xb2>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1e9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9e:	98 2f       	mov	r25, r24
    1ea0:	9c 5f       	subi	r25, 0xFC	; 252
    1ea2:	80 e0       	ldi	r24, 0x00	; 0
    1ea4:	69 2f       	mov	r22, r25
    1ea6:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <GPIO_readPin>
    1eaa:	88 23       	and	r24, r24
    1eac:	91 f4       	brne	.+36     	; 0x1ed2 <KEYPAD_getPressedKey+0xac>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1eae:	89 81       	ldd	r24, Y+1	; 0x01
    1eb0:	88 2f       	mov	r24, r24
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	88 0f       	add	r24, r24
    1eb6:	99 1f       	adc	r25, r25
    1eb8:	88 0f       	add	r24, r24
    1eba:	99 1f       	adc	r25, r25
    1ebc:	98 2f       	mov	r25, r24
    1ebe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec0:	89 0f       	add	r24, r25
    1ec2:	8f 5f       	subi	r24, 0xFF	; 255
    1ec4:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <KEYPAD_4x4_adjustKeyNumber>
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		}
	}	
}
    1ec8:	0f 90       	pop	r0
    1eca:	0f 90       	pop	r0
    1ecc:	cf 91       	pop	r28
    1ece:	df 91       	pop	r29
    1ed0:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1ed2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed4:	8f 5f       	subi	r24, 0xFF	; 255
    1ed6:	8a 83       	std	Y+2, r24	; 0x02
    1ed8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eda:	84 30       	cpi	r24, 0x04	; 4
    1edc:	f8 f2       	brcs	.-66     	; 0x1e9c <KEYPAD_getPressedKey+0x76>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1ede:	80 e0       	ldi	r24, 0x00	; 0
    1ee0:	69 81       	ldd	r22, Y+1	; 0x01
    1ee2:	40 e0       	ldi	r20, 0x00	; 0
    1ee4:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1ee8:	89 81       	ldd	r24, Y+1	; 0x01
    1eea:	8f 5f       	subi	r24, 0xFF	; 255
    1eec:	89 83       	std	Y+1, r24	; 0x01
    1eee:	89 81       	ldd	r24, Y+1	; 0x01
    1ef0:	84 30       	cpi	r24, 0x04	; 4
    1ef2:	40 f2       	brcs	.-112    	; 0x1e84 <KEYPAD_getPressedKey+0x5e>
    1ef4:	c5 cf       	rjmp	.-118    	; 0x1e80 <KEYPAD_getPressedKey+0x5a>

00001ef6 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1ef6:	df 93       	push	r29
    1ef8:	cf 93       	push	r28
    1efa:	00 d0       	rcall	.+0      	; 0x1efc <KEYPAD_4x4_adjustKeyNumber+0x6>
    1efc:	00 d0       	rcall	.+0      	; 0x1efe <KEYPAD_4x4_adjustKeyNumber+0x8>
    1efe:	cd b7       	in	r28, 0x3d	; 61
    1f00:	de b7       	in	r29, 0x3e	; 62
    1f02:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1f04:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1f06:	8a 81       	ldd	r24, Y+2	; 0x02
    1f08:	28 2f       	mov	r18, r24
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	3c 83       	std	Y+4, r19	; 0x04
    1f0e:	2b 83       	std	Y+3, r18	; 0x03
    1f10:	8b 81       	ldd	r24, Y+3	; 0x03
    1f12:	9c 81       	ldd	r25, Y+4	; 0x04
    1f14:	88 30       	cpi	r24, 0x08	; 8
    1f16:	91 05       	cpc	r25, r1
    1f18:	09 f4       	brne	.+2      	; 0x1f1c <KEYPAD_4x4_adjustKeyNumber+0x26>
    1f1a:	70 c0       	rjmp	.+224    	; 0x1ffc <KEYPAD_4x4_adjustKeyNumber+0x106>
    1f1c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f1e:	3c 81       	ldd	r19, Y+4	; 0x04
    1f20:	29 30       	cpi	r18, 0x09	; 9
    1f22:	31 05       	cpc	r19, r1
    1f24:	5c f5       	brge	.+86     	; 0x1f7c <KEYPAD_4x4_adjustKeyNumber+0x86>
    1f26:	8b 81       	ldd	r24, Y+3	; 0x03
    1f28:	9c 81       	ldd	r25, Y+4	; 0x04
    1f2a:	84 30       	cpi	r24, 0x04	; 4
    1f2c:	91 05       	cpc	r25, r1
    1f2e:	09 f4       	brne	.+2      	; 0x1f32 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1f30:	59 c0       	rjmp	.+178    	; 0x1fe4 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1f32:	2b 81       	ldd	r18, Y+3	; 0x03
    1f34:	3c 81       	ldd	r19, Y+4	; 0x04
    1f36:	25 30       	cpi	r18, 0x05	; 5
    1f38:	31 05       	cpc	r19, r1
    1f3a:	9c f4       	brge	.+38     	; 0x1f62 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1f3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f40:	82 30       	cpi	r24, 0x02	; 2
    1f42:	91 05       	cpc	r25, r1
    1f44:	09 f4       	brne	.+2      	; 0x1f48 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1f46:	48 c0       	rjmp	.+144    	; 0x1fd8 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1f48:	2b 81       	ldd	r18, Y+3	; 0x03
    1f4a:	3c 81       	ldd	r19, Y+4	; 0x04
    1f4c:	23 30       	cpi	r18, 0x03	; 3
    1f4e:	31 05       	cpc	r19, r1
    1f50:	0c f0       	brlt	.+2      	; 0x1f54 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1f52:	45 c0       	rjmp	.+138    	; 0x1fde <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1f54:	8b 81       	ldd	r24, Y+3	; 0x03
    1f56:	9c 81       	ldd	r25, Y+4	; 0x04
    1f58:	81 30       	cpi	r24, 0x01	; 1
    1f5a:	91 05       	cpc	r25, r1
    1f5c:	09 f4       	brne	.+2      	; 0x1f60 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1f5e:	39 c0       	rjmp	.+114    	; 0x1fd2 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1f60:	67 c0       	rjmp	.+206    	; 0x2030 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1f62:	2b 81       	ldd	r18, Y+3	; 0x03
    1f64:	3c 81       	ldd	r19, Y+4	; 0x04
    1f66:	26 30       	cpi	r18, 0x06	; 6
    1f68:	31 05       	cpc	r19, r1
    1f6a:	09 f4       	brne	.+2      	; 0x1f6e <KEYPAD_4x4_adjustKeyNumber+0x78>
    1f6c:	41 c0       	rjmp	.+130    	; 0x1ff0 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f70:	9c 81       	ldd	r25, Y+4	; 0x04
    1f72:	87 30       	cpi	r24, 0x07	; 7
    1f74:	91 05       	cpc	r25, r1
    1f76:	0c f0       	brlt	.+2      	; 0x1f7a <KEYPAD_4x4_adjustKeyNumber+0x84>
    1f78:	3e c0       	rjmp	.+124    	; 0x1ff6 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1f7a:	37 c0       	rjmp	.+110    	; 0x1fea <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1f7c:	2b 81       	ldd	r18, Y+3	; 0x03
    1f7e:	3c 81       	ldd	r19, Y+4	; 0x04
    1f80:	2c 30       	cpi	r18, 0x0C	; 12
    1f82:	31 05       	cpc	r19, r1
    1f84:	09 f4       	brne	.+2      	; 0x1f88 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1f86:	46 c0       	rjmp	.+140    	; 0x2014 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1f88:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8c:	8d 30       	cpi	r24, 0x0D	; 13
    1f8e:	91 05       	cpc	r25, r1
    1f90:	5c f4       	brge	.+22     	; 0x1fa8 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1f92:	2b 81       	ldd	r18, Y+3	; 0x03
    1f94:	3c 81       	ldd	r19, Y+4	; 0x04
    1f96:	2a 30       	cpi	r18, 0x0A	; 10
    1f98:	31 05       	cpc	r19, r1
    1f9a:	b1 f1       	breq	.+108    	; 0x2008 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa0:	8b 30       	cpi	r24, 0x0B	; 11
    1fa2:	91 05       	cpc	r25, r1
    1fa4:	a4 f5       	brge	.+104    	; 0x200e <KEYPAD_4x4_adjustKeyNumber+0x118>
    1fa6:	2d c0       	rjmp	.+90     	; 0x2002 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1fa8:	2b 81       	ldd	r18, Y+3	; 0x03
    1faa:	3c 81       	ldd	r19, Y+4	; 0x04
    1fac:	2e 30       	cpi	r18, 0x0E	; 14
    1fae:	31 05       	cpc	r19, r1
    1fb0:	b9 f1       	breq	.+110    	; 0x2020 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1fb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb6:	8e 30       	cpi	r24, 0x0E	; 14
    1fb8:	91 05       	cpc	r25, r1
    1fba:	7c f1       	brlt	.+94     	; 0x201a <KEYPAD_4x4_adjustKeyNumber+0x124>
    1fbc:	2b 81       	ldd	r18, Y+3	; 0x03
    1fbe:	3c 81       	ldd	r19, Y+4	; 0x04
    1fc0:	2f 30       	cpi	r18, 0x0F	; 15
    1fc2:	31 05       	cpc	r19, r1
    1fc4:	79 f1       	breq	.+94     	; 0x2024 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1fc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fca:	80 31       	cpi	r24, 0x10	; 16
    1fcc:	91 05       	cpc	r25, r1
    1fce:	69 f1       	breq	.+90     	; 0x202a <KEYPAD_4x4_adjustKeyNumber+0x134>
    1fd0:	2f c0       	rjmp	.+94     	; 0x2030 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1fd2:	87 e0       	ldi	r24, 0x07	; 7
    1fd4:	89 83       	std	Y+1, r24	; 0x01
    1fd6:	2e c0       	rjmp	.+92     	; 0x2034 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1fd8:	88 e0       	ldi	r24, 0x08	; 8
    1fda:	89 83       	std	Y+1, r24	; 0x01
    1fdc:	2b c0       	rjmp	.+86     	; 0x2034 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1fde:	89 e0       	ldi	r24, 0x09	; 9
    1fe0:	89 83       	std	Y+1, r24	; 0x01
    1fe2:	28 c0       	rjmp	.+80     	; 0x2034 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1fe4:	85 e2       	ldi	r24, 0x25	; 37
    1fe6:	89 83       	std	Y+1, r24	; 0x01
    1fe8:	25 c0       	rjmp	.+74     	; 0x2034 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1fea:	84 e0       	ldi	r24, 0x04	; 4
    1fec:	89 83       	std	Y+1, r24	; 0x01
    1fee:	22 c0       	rjmp	.+68     	; 0x2034 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1ff0:	85 e0       	ldi	r24, 0x05	; 5
    1ff2:	89 83       	std	Y+1, r24	; 0x01
    1ff4:	1f c0       	rjmp	.+62     	; 0x2034 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1ff6:	86 e0       	ldi	r24, 0x06	; 6
    1ff8:	89 83       	std	Y+1, r24	; 0x01
    1ffa:	1c c0       	rjmp	.+56     	; 0x2034 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1ffc:	8a e2       	ldi	r24, 0x2A	; 42
    1ffe:	89 83       	std	Y+1, r24	; 0x01
    2000:	19 c0       	rjmp	.+50     	; 0x2034 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    2002:	81 e0       	ldi	r24, 0x01	; 1
    2004:	89 83       	std	Y+1, r24	; 0x01
    2006:	16 c0       	rjmp	.+44     	; 0x2034 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2008:	82 e0       	ldi	r24, 0x02	; 2
    200a:	89 83       	std	Y+1, r24	; 0x01
    200c:	13 c0       	rjmp	.+38     	; 0x2034 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    200e:	83 e0       	ldi	r24, 0x03	; 3
    2010:	89 83       	std	Y+1, r24	; 0x01
    2012:	10 c0       	rjmp	.+32     	; 0x2034 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2014:	8d e2       	ldi	r24, 0x2D	; 45
    2016:	89 83       	std	Y+1, r24	; 0x01
    2018:	0d c0       	rjmp	.+26     	; 0x2034 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    201a:	8d e0       	ldi	r24, 0x0D	; 13
    201c:	89 83       	std	Y+1, r24	; 0x01
    201e:	0a c0       	rjmp	.+20     	; 0x2034 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    2020:	19 82       	std	Y+1, r1	; 0x01
    2022:	08 c0       	rjmp	.+16     	; 0x2034 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2024:	8d e3       	ldi	r24, 0x3D	; 61
    2026:	89 83       	std	Y+1, r24	; 0x01
    2028:	05 c0       	rjmp	.+10     	; 0x2034 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    202a:	8b e2       	ldi	r24, 0x2B	; 43
    202c:	89 83       	std	Y+1, r24	; 0x01
    202e:	02 c0       	rjmp	.+4      	; 0x2034 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    2030:	8a 81       	ldd	r24, Y+2	; 0x02
    2032:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2034:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2036:	0f 90       	pop	r0
    2038:	0f 90       	pop	r0
    203a:	0f 90       	pop	r0
    203c:	0f 90       	pop	r0
    203e:	cf 91       	pop	r28
    2040:	df 91       	pop	r29
    2042:	08 95       	ret

00002044 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2044:	df 93       	push	r29
    2046:	cf 93       	push	r28
    2048:	cd b7       	in	r28, 0x3d	; 61
    204a:	de b7       	in	r29, 0x3e	; 62
    204c:	2e 97       	sbiw	r28, 0x0e	; 14
    204e:	0f b6       	in	r0, 0x3f	; 63
    2050:	f8 94       	cli
    2052:	de bf       	out	0x3e, r29	; 62
    2054:	0f be       	out	0x3f, r0	; 63
    2056:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2058:	81 e0       	ldi	r24, 0x01	; 1
    205a:	61 e0       	ldi	r22, 0x01	; 1
    205c:	41 e0       	ldi	r20, 0x01	; 1
    205e:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2062:	81 e0       	ldi	r24, 0x01	; 1
    2064:	62 e0       	ldi	r22, 0x02	; 2
    2066:	41 e0       	ldi	r20, 0x01	; 1
    2068:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <GPIO_setupPinDirection>
    206c:	80 e0       	ldi	r24, 0x00	; 0
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	a0 ea       	ldi	r26, 0xA0	; 160
    2072:	b1 e4       	ldi	r27, 0x41	; 65
    2074:	8b 87       	std	Y+11, r24	; 0x0b
    2076:	9c 87       	std	Y+12, r25	; 0x0c
    2078:	ad 87       	std	Y+13, r26	; 0x0d
    207a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    207c:	6b 85       	ldd	r22, Y+11	; 0x0b
    207e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2080:	8d 85       	ldd	r24, Y+13	; 0x0d
    2082:	9e 85       	ldd	r25, Y+14	; 0x0e
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	4a e7       	ldi	r20, 0x7A	; 122
    208a:	53 e4       	ldi	r21, 0x43	; 67
    208c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2090:	dc 01       	movw	r26, r24
    2092:	cb 01       	movw	r24, r22
    2094:	8f 83       	std	Y+7, r24	; 0x07
    2096:	98 87       	std	Y+8, r25	; 0x08
    2098:	a9 87       	std	Y+9, r26	; 0x09
    209a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    209c:	6f 81       	ldd	r22, Y+7	; 0x07
    209e:	78 85       	ldd	r23, Y+8	; 0x08
    20a0:	89 85       	ldd	r24, Y+9	; 0x09
    20a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	40 e8       	ldi	r20, 0x80	; 128
    20aa:	5f e3       	ldi	r21, 0x3F	; 63
    20ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20b0:	88 23       	and	r24, r24
    20b2:	2c f4       	brge	.+10     	; 0x20be <LCD_init+0x7a>
		__ticks = 1;
    20b4:	81 e0       	ldi	r24, 0x01	; 1
    20b6:	90 e0       	ldi	r25, 0x00	; 0
    20b8:	9e 83       	std	Y+6, r25	; 0x06
    20ba:	8d 83       	std	Y+5, r24	; 0x05
    20bc:	3f c0       	rjmp	.+126    	; 0x213c <LCD_init+0xf8>
	else if (__tmp > 65535)
    20be:	6f 81       	ldd	r22, Y+7	; 0x07
    20c0:	78 85       	ldd	r23, Y+8	; 0x08
    20c2:	89 85       	ldd	r24, Y+9	; 0x09
    20c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c6:	20 e0       	ldi	r18, 0x00	; 0
    20c8:	3f ef       	ldi	r19, 0xFF	; 255
    20ca:	4f e7       	ldi	r20, 0x7F	; 127
    20cc:	57 e4       	ldi	r21, 0x47	; 71
    20ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20d2:	18 16       	cp	r1, r24
    20d4:	4c f5       	brge	.+82     	; 0x2128 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    20d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    20da:	8d 85       	ldd	r24, Y+13	; 0x0d
    20dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    20de:	20 e0       	ldi	r18, 0x00	; 0
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	40 e2       	ldi	r20, 0x20	; 32
    20e4:	51 e4       	ldi	r21, 0x41	; 65
    20e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20ea:	dc 01       	movw	r26, r24
    20ec:	cb 01       	movw	r24, r22
    20ee:	bc 01       	movw	r22, r24
    20f0:	cd 01       	movw	r24, r26
    20f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f6:	dc 01       	movw	r26, r24
    20f8:	cb 01       	movw	r24, r22
    20fa:	9e 83       	std	Y+6, r25	; 0x06
    20fc:	8d 83       	std	Y+5, r24	; 0x05
    20fe:	0f c0       	rjmp	.+30     	; 0x211e <LCD_init+0xda>
    2100:	89 e1       	ldi	r24, 0x19	; 25
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	9c 83       	std	Y+4, r25	; 0x04
    2106:	8b 83       	std	Y+3, r24	; 0x03
    2108:	8b 81       	ldd	r24, Y+3	; 0x03
    210a:	9c 81       	ldd	r25, Y+4	; 0x04
    210c:	01 97       	sbiw	r24, 0x01	; 1
    210e:	f1 f7       	brne	.-4      	; 0x210c <LCD_init+0xc8>
    2110:	9c 83       	std	Y+4, r25	; 0x04
    2112:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2114:	8d 81       	ldd	r24, Y+5	; 0x05
    2116:	9e 81       	ldd	r25, Y+6	; 0x06
    2118:	01 97       	sbiw	r24, 0x01	; 1
    211a:	9e 83       	std	Y+6, r25	; 0x06
    211c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    211e:	8d 81       	ldd	r24, Y+5	; 0x05
    2120:	9e 81       	ldd	r25, Y+6	; 0x06
    2122:	00 97       	sbiw	r24, 0x00	; 0
    2124:	69 f7       	brne	.-38     	; 0x2100 <LCD_init+0xbc>
    2126:	14 c0       	rjmp	.+40     	; 0x2150 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2128:	6f 81       	ldd	r22, Y+7	; 0x07
    212a:	78 85       	ldd	r23, Y+8	; 0x08
    212c:	89 85       	ldd	r24, Y+9	; 0x09
    212e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2130:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2134:	dc 01       	movw	r26, r24
    2136:	cb 01       	movw	r24, r22
    2138:	9e 83       	std	Y+6, r25	; 0x06
    213a:	8d 83       	std	Y+5, r24	; 0x05
    213c:	8d 81       	ldd	r24, Y+5	; 0x05
    213e:	9e 81       	ldd	r25, Y+6	; 0x06
    2140:	9a 83       	std	Y+2, r25	; 0x02
    2142:	89 83       	std	Y+1, r24	; 0x01
    2144:	89 81       	ldd	r24, Y+1	; 0x01
    2146:	9a 81       	ldd	r25, Y+2	; 0x02
    2148:	01 97       	sbiw	r24, 0x01	; 1
    214a:	f1 f7       	brne	.-4      	; 0x2148 <LCD_init+0x104>
    214c:	9a 83       	std	Y+2, r25	; 0x02
    214e:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    2150:	83 e0       	ldi	r24, 0x03	; 3
    2152:	64 e0       	ldi	r22, 0x04	; 4
    2154:	41 e0       	ldi	r20, 0x01	; 1
    2156:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    215a:	83 e0       	ldi	r24, 0x03	; 3
    215c:	65 e0       	ldi	r22, 0x05	; 5
    215e:	41 e0       	ldi	r20, 0x01	; 1
    2160:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    2164:	83 e0       	ldi	r24, 0x03	; 3
    2166:	66 e0       	ldi	r22, 0x06	; 6
    2168:	41 e0       	ldi	r20, 0x01	; 1
    216a:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    216e:	83 e0       	ldi	r24, 0x03	; 3
    2170:	67 e0       	ldi	r22, 0x07	; 7
    2172:	41 e0       	ldi	r20, 0x01	; 1
    2174:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    2178:	83 e3       	ldi	r24, 0x33	; 51
    217a:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    217e:	82 e3       	ldi	r24, 0x32	; 50
    2180:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    2184:	88 e2       	ldi	r24, 0x28	; 40
    2186:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    218a:	8c e0       	ldi	r24, 0x0C	; 12
    218c:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <LCD_sendCommand>
}
    2196:	2e 96       	adiw	r28, 0x0e	; 14
    2198:	0f b6       	in	r0, 0x3f	; 63
    219a:	f8 94       	cli
    219c:	de bf       	out	0x3e, r29	; 62
    219e:	0f be       	out	0x3f, r0	; 63
    21a0:	cd bf       	out	0x3d, r28	; 61
    21a2:	cf 91       	pop	r28
    21a4:	df 91       	pop	r29
    21a6:	08 95       	ret

000021a8 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    21a8:	0f 93       	push	r16
    21aa:	1f 93       	push	r17
    21ac:	df 93       	push	r29
    21ae:	cf 93       	push	r28
    21b0:	cd b7       	in	r28, 0x3d	; 61
    21b2:	de b7       	in	r29, 0x3e	; 62
    21b4:	c3 56       	subi	r28, 0x63	; 99
    21b6:	d0 40       	sbci	r29, 0x00	; 0
    21b8:	0f b6       	in	r0, 0x3f	; 63
    21ba:	f8 94       	cli
    21bc:	de bf       	out	0x3e, r29	; 62
    21be:	0f be       	out	0x3f, r0	; 63
    21c0:	cd bf       	out	0x3d, r28	; 61
    21c2:	fe 01       	movw	r30, r28
    21c4:	ed 59       	subi	r30, 0x9D	; 157
    21c6:	ff 4f       	sbci	r31, 0xFF	; 255
    21c8:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    21ca:	81 e0       	ldi	r24, 0x01	; 1
    21cc:	61 e0       	ldi	r22, 0x01	; 1
    21ce:	40 e0       	ldi	r20, 0x00	; 0
    21d0:	0e 94 c0 0c 	call	0x1980	; 0x1980 <GPIO_writePin>
    21d4:	fe 01       	movw	r30, r28
    21d6:	e1 5a       	subi	r30, 0xA1	; 161
    21d8:	ff 4f       	sbci	r31, 0xFF	; 255
    21da:	80 e0       	ldi	r24, 0x00	; 0
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	a0 e8       	ldi	r26, 0x80	; 128
    21e0:	bf e3       	ldi	r27, 0x3F	; 63
    21e2:	80 83       	st	Z, r24
    21e4:	91 83       	std	Z+1, r25	; 0x01
    21e6:	a2 83       	std	Z+2, r26	; 0x02
    21e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ea:	8e 01       	movw	r16, r28
    21ec:	05 5a       	subi	r16, 0xA5	; 165
    21ee:	1f 4f       	sbci	r17, 0xFF	; 255
    21f0:	fe 01       	movw	r30, r28
    21f2:	e1 5a       	subi	r30, 0xA1	; 161
    21f4:	ff 4f       	sbci	r31, 0xFF	; 255
    21f6:	60 81       	ld	r22, Z
    21f8:	71 81       	ldd	r23, Z+1	; 0x01
    21fa:	82 81       	ldd	r24, Z+2	; 0x02
    21fc:	93 81       	ldd	r25, Z+3	; 0x03
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	4a e7       	ldi	r20, 0x7A	; 122
    2204:	53 e4       	ldi	r21, 0x43	; 67
    2206:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    220a:	dc 01       	movw	r26, r24
    220c:	cb 01       	movw	r24, r22
    220e:	f8 01       	movw	r30, r16
    2210:	80 83       	st	Z, r24
    2212:	91 83       	std	Z+1, r25	; 0x01
    2214:	a2 83       	std	Z+2, r26	; 0x02
    2216:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2218:	fe 01       	movw	r30, r28
    221a:	e5 5a       	subi	r30, 0xA5	; 165
    221c:	ff 4f       	sbci	r31, 0xFF	; 255
    221e:	60 81       	ld	r22, Z
    2220:	71 81       	ldd	r23, Z+1	; 0x01
    2222:	82 81       	ldd	r24, Z+2	; 0x02
    2224:	93 81       	ldd	r25, Z+3	; 0x03
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	40 e8       	ldi	r20, 0x80	; 128
    222c:	5f e3       	ldi	r21, 0x3F	; 63
    222e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2232:	88 23       	and	r24, r24
    2234:	44 f4       	brge	.+16     	; 0x2246 <LCD_sendCommand+0x9e>
		__ticks = 1;
    2236:	fe 01       	movw	r30, r28
    2238:	e7 5a       	subi	r30, 0xA7	; 167
    223a:	ff 4f       	sbci	r31, 0xFF	; 255
    223c:	81 e0       	ldi	r24, 0x01	; 1
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	91 83       	std	Z+1, r25	; 0x01
    2242:	80 83       	st	Z, r24
    2244:	64 c0       	rjmp	.+200    	; 0x230e <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    2246:	fe 01       	movw	r30, r28
    2248:	e5 5a       	subi	r30, 0xA5	; 165
    224a:	ff 4f       	sbci	r31, 0xFF	; 255
    224c:	60 81       	ld	r22, Z
    224e:	71 81       	ldd	r23, Z+1	; 0x01
    2250:	82 81       	ldd	r24, Z+2	; 0x02
    2252:	93 81       	ldd	r25, Z+3	; 0x03
    2254:	20 e0       	ldi	r18, 0x00	; 0
    2256:	3f ef       	ldi	r19, 0xFF	; 255
    2258:	4f e7       	ldi	r20, 0x7F	; 127
    225a:	57 e4       	ldi	r21, 0x47	; 71
    225c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2260:	18 16       	cp	r1, r24
    2262:	0c f0       	brlt	.+2      	; 0x2266 <LCD_sendCommand+0xbe>
    2264:	43 c0       	rjmp	.+134    	; 0x22ec <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2266:	fe 01       	movw	r30, r28
    2268:	e1 5a       	subi	r30, 0xA1	; 161
    226a:	ff 4f       	sbci	r31, 0xFF	; 255
    226c:	60 81       	ld	r22, Z
    226e:	71 81       	ldd	r23, Z+1	; 0x01
    2270:	82 81       	ldd	r24, Z+2	; 0x02
    2272:	93 81       	ldd	r25, Z+3	; 0x03
    2274:	20 e0       	ldi	r18, 0x00	; 0
    2276:	30 e0       	ldi	r19, 0x00	; 0
    2278:	40 e2       	ldi	r20, 0x20	; 32
    227a:	51 e4       	ldi	r21, 0x41	; 65
    227c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2280:	dc 01       	movw	r26, r24
    2282:	cb 01       	movw	r24, r22
    2284:	8e 01       	movw	r16, r28
    2286:	07 5a       	subi	r16, 0xA7	; 167
    2288:	1f 4f       	sbci	r17, 0xFF	; 255
    228a:	bc 01       	movw	r22, r24
    228c:	cd 01       	movw	r24, r26
    228e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2292:	dc 01       	movw	r26, r24
    2294:	cb 01       	movw	r24, r22
    2296:	f8 01       	movw	r30, r16
    2298:	91 83       	std	Z+1, r25	; 0x01
    229a:	80 83       	st	Z, r24
    229c:	1f c0       	rjmp	.+62     	; 0x22dc <LCD_sendCommand+0x134>
    229e:	fe 01       	movw	r30, r28
    22a0:	e9 5a       	subi	r30, 0xA9	; 169
    22a2:	ff 4f       	sbci	r31, 0xFF	; 255
    22a4:	89 e1       	ldi	r24, 0x19	; 25
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	91 83       	std	Z+1, r25	; 0x01
    22aa:	80 83       	st	Z, r24
    22ac:	fe 01       	movw	r30, r28
    22ae:	e9 5a       	subi	r30, 0xA9	; 169
    22b0:	ff 4f       	sbci	r31, 0xFF	; 255
    22b2:	80 81       	ld	r24, Z
    22b4:	91 81       	ldd	r25, Z+1	; 0x01
    22b6:	01 97       	sbiw	r24, 0x01	; 1
    22b8:	f1 f7       	brne	.-4      	; 0x22b6 <LCD_sendCommand+0x10e>
    22ba:	fe 01       	movw	r30, r28
    22bc:	e9 5a       	subi	r30, 0xA9	; 169
    22be:	ff 4f       	sbci	r31, 0xFF	; 255
    22c0:	91 83       	std	Z+1, r25	; 0x01
    22c2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22c4:	de 01       	movw	r26, r28
    22c6:	a7 5a       	subi	r26, 0xA7	; 167
    22c8:	bf 4f       	sbci	r27, 0xFF	; 255
    22ca:	fe 01       	movw	r30, r28
    22cc:	e7 5a       	subi	r30, 0xA7	; 167
    22ce:	ff 4f       	sbci	r31, 0xFF	; 255
    22d0:	80 81       	ld	r24, Z
    22d2:	91 81       	ldd	r25, Z+1	; 0x01
    22d4:	01 97       	sbiw	r24, 0x01	; 1
    22d6:	11 96       	adiw	r26, 0x01	; 1
    22d8:	9c 93       	st	X, r25
    22da:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22dc:	fe 01       	movw	r30, r28
    22de:	e7 5a       	subi	r30, 0xA7	; 167
    22e0:	ff 4f       	sbci	r31, 0xFF	; 255
    22e2:	80 81       	ld	r24, Z
    22e4:	91 81       	ldd	r25, Z+1	; 0x01
    22e6:	00 97       	sbiw	r24, 0x00	; 0
    22e8:	d1 f6       	brne	.-76     	; 0x229e <LCD_sendCommand+0xf6>
    22ea:	27 c0       	rjmp	.+78     	; 0x233a <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ec:	8e 01       	movw	r16, r28
    22ee:	07 5a       	subi	r16, 0xA7	; 167
    22f0:	1f 4f       	sbci	r17, 0xFF	; 255
    22f2:	fe 01       	movw	r30, r28
    22f4:	e5 5a       	subi	r30, 0xA5	; 165
    22f6:	ff 4f       	sbci	r31, 0xFF	; 255
    22f8:	60 81       	ld	r22, Z
    22fa:	71 81       	ldd	r23, Z+1	; 0x01
    22fc:	82 81       	ldd	r24, Z+2	; 0x02
    22fe:	93 81       	ldd	r25, Z+3	; 0x03
    2300:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2304:	dc 01       	movw	r26, r24
    2306:	cb 01       	movw	r24, r22
    2308:	f8 01       	movw	r30, r16
    230a:	91 83       	std	Z+1, r25	; 0x01
    230c:	80 83       	st	Z, r24
    230e:	de 01       	movw	r26, r28
    2310:	ab 5a       	subi	r26, 0xAB	; 171
    2312:	bf 4f       	sbci	r27, 0xFF	; 255
    2314:	fe 01       	movw	r30, r28
    2316:	e7 5a       	subi	r30, 0xA7	; 167
    2318:	ff 4f       	sbci	r31, 0xFF	; 255
    231a:	80 81       	ld	r24, Z
    231c:	91 81       	ldd	r25, Z+1	; 0x01
    231e:	8d 93       	st	X+, r24
    2320:	9c 93       	st	X, r25
    2322:	fe 01       	movw	r30, r28
    2324:	eb 5a       	subi	r30, 0xAB	; 171
    2326:	ff 4f       	sbci	r31, 0xFF	; 255
    2328:	80 81       	ld	r24, Z
    232a:	91 81       	ldd	r25, Z+1	; 0x01
    232c:	01 97       	sbiw	r24, 0x01	; 1
    232e:	f1 f7       	brne	.-4      	; 0x232c <LCD_sendCommand+0x184>
    2330:	fe 01       	movw	r30, r28
    2332:	eb 5a       	subi	r30, 0xAB	; 171
    2334:	ff 4f       	sbci	r31, 0xFF	; 255
    2336:	91 83       	std	Z+1, r25	; 0x01
    2338:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    233a:	81 e0       	ldi	r24, 0x01	; 1
    233c:	62 e0       	ldi	r22, 0x02	; 2
    233e:	41 e0       	ldi	r20, 0x01	; 1
    2340:	0e 94 c0 0c 	call	0x1980	; 0x1980 <GPIO_writePin>
    2344:	fe 01       	movw	r30, r28
    2346:	ef 5a       	subi	r30, 0xAF	; 175
    2348:	ff 4f       	sbci	r31, 0xFF	; 255
    234a:	80 e0       	ldi	r24, 0x00	; 0
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	a0 e8       	ldi	r26, 0x80	; 128
    2350:	bf e3       	ldi	r27, 0x3F	; 63
    2352:	80 83       	st	Z, r24
    2354:	91 83       	std	Z+1, r25	; 0x01
    2356:	a2 83       	std	Z+2, r26	; 0x02
    2358:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    235a:	8e 01       	movw	r16, r28
    235c:	03 5b       	subi	r16, 0xB3	; 179
    235e:	1f 4f       	sbci	r17, 0xFF	; 255
    2360:	fe 01       	movw	r30, r28
    2362:	ef 5a       	subi	r30, 0xAF	; 175
    2364:	ff 4f       	sbci	r31, 0xFF	; 255
    2366:	60 81       	ld	r22, Z
    2368:	71 81       	ldd	r23, Z+1	; 0x01
    236a:	82 81       	ldd	r24, Z+2	; 0x02
    236c:	93 81       	ldd	r25, Z+3	; 0x03
    236e:	20 e0       	ldi	r18, 0x00	; 0
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	4a e7       	ldi	r20, 0x7A	; 122
    2374:	53 e4       	ldi	r21, 0x43	; 67
    2376:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    237a:	dc 01       	movw	r26, r24
    237c:	cb 01       	movw	r24, r22
    237e:	f8 01       	movw	r30, r16
    2380:	80 83       	st	Z, r24
    2382:	91 83       	std	Z+1, r25	; 0x01
    2384:	a2 83       	std	Z+2, r26	; 0x02
    2386:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2388:	fe 01       	movw	r30, r28
    238a:	e3 5b       	subi	r30, 0xB3	; 179
    238c:	ff 4f       	sbci	r31, 0xFF	; 255
    238e:	60 81       	ld	r22, Z
    2390:	71 81       	ldd	r23, Z+1	; 0x01
    2392:	82 81       	ldd	r24, Z+2	; 0x02
    2394:	93 81       	ldd	r25, Z+3	; 0x03
    2396:	20 e0       	ldi	r18, 0x00	; 0
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	40 e8       	ldi	r20, 0x80	; 128
    239c:	5f e3       	ldi	r21, 0x3F	; 63
    239e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23a2:	88 23       	and	r24, r24
    23a4:	44 f4       	brge	.+16     	; 0x23b6 <LCD_sendCommand+0x20e>
		__ticks = 1;
    23a6:	fe 01       	movw	r30, r28
    23a8:	e5 5b       	subi	r30, 0xB5	; 181
    23aa:	ff 4f       	sbci	r31, 0xFF	; 255
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	91 83       	std	Z+1, r25	; 0x01
    23b2:	80 83       	st	Z, r24
    23b4:	64 c0       	rjmp	.+200    	; 0x247e <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    23b6:	fe 01       	movw	r30, r28
    23b8:	e3 5b       	subi	r30, 0xB3	; 179
    23ba:	ff 4f       	sbci	r31, 0xFF	; 255
    23bc:	60 81       	ld	r22, Z
    23be:	71 81       	ldd	r23, Z+1	; 0x01
    23c0:	82 81       	ldd	r24, Z+2	; 0x02
    23c2:	93 81       	ldd	r25, Z+3	; 0x03
    23c4:	20 e0       	ldi	r18, 0x00	; 0
    23c6:	3f ef       	ldi	r19, 0xFF	; 255
    23c8:	4f e7       	ldi	r20, 0x7F	; 127
    23ca:	57 e4       	ldi	r21, 0x47	; 71
    23cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23d0:	18 16       	cp	r1, r24
    23d2:	0c f0       	brlt	.+2      	; 0x23d6 <LCD_sendCommand+0x22e>
    23d4:	43 c0       	rjmp	.+134    	; 0x245c <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23d6:	fe 01       	movw	r30, r28
    23d8:	ef 5a       	subi	r30, 0xAF	; 175
    23da:	ff 4f       	sbci	r31, 0xFF	; 255
    23dc:	60 81       	ld	r22, Z
    23de:	71 81       	ldd	r23, Z+1	; 0x01
    23e0:	82 81       	ldd	r24, Z+2	; 0x02
    23e2:	93 81       	ldd	r25, Z+3	; 0x03
    23e4:	20 e0       	ldi	r18, 0x00	; 0
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	40 e2       	ldi	r20, 0x20	; 32
    23ea:	51 e4       	ldi	r21, 0x41	; 65
    23ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f0:	dc 01       	movw	r26, r24
    23f2:	cb 01       	movw	r24, r22
    23f4:	8e 01       	movw	r16, r28
    23f6:	05 5b       	subi	r16, 0xB5	; 181
    23f8:	1f 4f       	sbci	r17, 0xFF	; 255
    23fa:	bc 01       	movw	r22, r24
    23fc:	cd 01       	movw	r24, r26
    23fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2402:	dc 01       	movw	r26, r24
    2404:	cb 01       	movw	r24, r22
    2406:	f8 01       	movw	r30, r16
    2408:	91 83       	std	Z+1, r25	; 0x01
    240a:	80 83       	st	Z, r24
    240c:	1f c0       	rjmp	.+62     	; 0x244c <LCD_sendCommand+0x2a4>
    240e:	fe 01       	movw	r30, r28
    2410:	e7 5b       	subi	r30, 0xB7	; 183
    2412:	ff 4f       	sbci	r31, 0xFF	; 255
    2414:	89 e1       	ldi	r24, 0x19	; 25
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	91 83       	std	Z+1, r25	; 0x01
    241a:	80 83       	st	Z, r24
    241c:	fe 01       	movw	r30, r28
    241e:	e7 5b       	subi	r30, 0xB7	; 183
    2420:	ff 4f       	sbci	r31, 0xFF	; 255
    2422:	80 81       	ld	r24, Z
    2424:	91 81       	ldd	r25, Z+1	; 0x01
    2426:	01 97       	sbiw	r24, 0x01	; 1
    2428:	f1 f7       	brne	.-4      	; 0x2426 <LCD_sendCommand+0x27e>
    242a:	fe 01       	movw	r30, r28
    242c:	e7 5b       	subi	r30, 0xB7	; 183
    242e:	ff 4f       	sbci	r31, 0xFF	; 255
    2430:	91 83       	std	Z+1, r25	; 0x01
    2432:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2434:	de 01       	movw	r26, r28
    2436:	a5 5b       	subi	r26, 0xB5	; 181
    2438:	bf 4f       	sbci	r27, 0xFF	; 255
    243a:	fe 01       	movw	r30, r28
    243c:	e5 5b       	subi	r30, 0xB5	; 181
    243e:	ff 4f       	sbci	r31, 0xFF	; 255
    2440:	80 81       	ld	r24, Z
    2442:	91 81       	ldd	r25, Z+1	; 0x01
    2444:	01 97       	sbiw	r24, 0x01	; 1
    2446:	11 96       	adiw	r26, 0x01	; 1
    2448:	9c 93       	st	X, r25
    244a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    244c:	fe 01       	movw	r30, r28
    244e:	e5 5b       	subi	r30, 0xB5	; 181
    2450:	ff 4f       	sbci	r31, 0xFF	; 255
    2452:	80 81       	ld	r24, Z
    2454:	91 81       	ldd	r25, Z+1	; 0x01
    2456:	00 97       	sbiw	r24, 0x00	; 0
    2458:	d1 f6       	brne	.-76     	; 0x240e <LCD_sendCommand+0x266>
    245a:	27 c0       	rjmp	.+78     	; 0x24aa <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    245c:	8e 01       	movw	r16, r28
    245e:	05 5b       	subi	r16, 0xB5	; 181
    2460:	1f 4f       	sbci	r17, 0xFF	; 255
    2462:	fe 01       	movw	r30, r28
    2464:	e3 5b       	subi	r30, 0xB3	; 179
    2466:	ff 4f       	sbci	r31, 0xFF	; 255
    2468:	60 81       	ld	r22, Z
    246a:	71 81       	ldd	r23, Z+1	; 0x01
    246c:	82 81       	ldd	r24, Z+2	; 0x02
    246e:	93 81       	ldd	r25, Z+3	; 0x03
    2470:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2474:	dc 01       	movw	r26, r24
    2476:	cb 01       	movw	r24, r22
    2478:	f8 01       	movw	r30, r16
    247a:	91 83       	std	Z+1, r25	; 0x01
    247c:	80 83       	st	Z, r24
    247e:	de 01       	movw	r26, r28
    2480:	a9 5b       	subi	r26, 0xB9	; 185
    2482:	bf 4f       	sbci	r27, 0xFF	; 255
    2484:	fe 01       	movw	r30, r28
    2486:	e5 5b       	subi	r30, 0xB5	; 181
    2488:	ff 4f       	sbci	r31, 0xFF	; 255
    248a:	80 81       	ld	r24, Z
    248c:	91 81       	ldd	r25, Z+1	; 0x01
    248e:	8d 93       	st	X+, r24
    2490:	9c 93       	st	X, r25
    2492:	fe 01       	movw	r30, r28
    2494:	e9 5b       	subi	r30, 0xB9	; 185
    2496:	ff 4f       	sbci	r31, 0xFF	; 255
    2498:	80 81       	ld	r24, Z
    249a:	91 81       	ldd	r25, Z+1	; 0x01
    249c:	01 97       	sbiw	r24, 0x01	; 1
    249e:	f1 f7       	brne	.-4      	; 0x249c <LCD_sendCommand+0x2f4>
    24a0:	fe 01       	movw	r30, r28
    24a2:	e9 5b       	subi	r30, 0xB9	; 185
    24a4:	ff 4f       	sbci	r31, 0xFF	; 255
    24a6:	91 83       	std	Z+1, r25	; 0x01
    24a8:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    24aa:	fe 01       	movw	r30, r28
    24ac:	ed 59       	subi	r30, 0x9D	; 157
    24ae:	ff 4f       	sbci	r31, 0xFF	; 255
    24b0:	80 81       	ld	r24, Z
    24b2:	88 2f       	mov	r24, r24
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	80 71       	andi	r24, 0x10	; 16
    24b8:	90 70       	andi	r25, 0x00	; 0
    24ba:	95 95       	asr	r25
    24bc:	87 95       	ror	r24
    24be:	95 95       	asr	r25
    24c0:	87 95       	ror	r24
    24c2:	95 95       	asr	r25
    24c4:	87 95       	ror	r24
    24c6:	95 95       	asr	r25
    24c8:	87 95       	ror	r24
    24ca:	98 2f       	mov	r25, r24
    24cc:	83 e0       	ldi	r24, 0x03	; 3
    24ce:	64 e0       	ldi	r22, 0x04	; 4
    24d0:	49 2f       	mov	r20, r25
    24d2:	0e 94 c0 0c 	call	0x1980	; 0x1980 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    24d6:	fe 01       	movw	r30, r28
    24d8:	ed 59       	subi	r30, 0x9D	; 157
    24da:	ff 4f       	sbci	r31, 0xFF	; 255
    24dc:	80 81       	ld	r24, Z
    24de:	88 2f       	mov	r24, r24
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	80 72       	andi	r24, 0x20	; 32
    24e4:	90 70       	andi	r25, 0x00	; 0
    24e6:	95 95       	asr	r25
    24e8:	87 95       	ror	r24
    24ea:	95 95       	asr	r25
    24ec:	87 95       	ror	r24
    24ee:	95 95       	asr	r25
    24f0:	87 95       	ror	r24
    24f2:	95 95       	asr	r25
    24f4:	87 95       	ror	r24
    24f6:	95 95       	asr	r25
    24f8:	87 95       	ror	r24
    24fa:	98 2f       	mov	r25, r24
    24fc:	83 e0       	ldi	r24, 0x03	; 3
    24fe:	65 e0       	ldi	r22, 0x05	; 5
    2500:	49 2f       	mov	r20, r25
    2502:	0e 94 c0 0c 	call	0x1980	; 0x1980 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    2506:	fe 01       	movw	r30, r28
    2508:	ed 59       	subi	r30, 0x9D	; 157
    250a:	ff 4f       	sbci	r31, 0xFF	; 255
    250c:	80 81       	ld	r24, Z
    250e:	88 2f       	mov	r24, r24
    2510:	90 e0       	ldi	r25, 0x00	; 0
    2512:	80 74       	andi	r24, 0x40	; 64
    2514:	90 70       	andi	r25, 0x00	; 0
    2516:	08 2e       	mov	r0, r24
    2518:	89 2f       	mov	r24, r25
    251a:	00 0c       	add	r0, r0
    251c:	88 1f       	adc	r24, r24
    251e:	99 0b       	sbc	r25, r25
    2520:	00 0c       	add	r0, r0
    2522:	88 1f       	adc	r24, r24
    2524:	99 1f       	adc	r25, r25
    2526:	98 2f       	mov	r25, r24
    2528:	83 e0       	ldi	r24, 0x03	; 3
    252a:	66 e0       	ldi	r22, 0x06	; 6
    252c:	49 2f       	mov	r20, r25
    252e:	0e 94 c0 0c 	call	0x1980	; 0x1980 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    2532:	fe 01       	movw	r30, r28
    2534:	ed 59       	subi	r30, 0x9D	; 157
    2536:	ff 4f       	sbci	r31, 0xFF	; 255
    2538:	80 81       	ld	r24, Z
    253a:	98 2f       	mov	r25, r24
    253c:	99 1f       	adc	r25, r25
    253e:	99 27       	eor	r25, r25
    2540:	99 1f       	adc	r25, r25
    2542:	83 e0       	ldi	r24, 0x03	; 3
    2544:	67 e0       	ldi	r22, 0x07	; 7
    2546:	49 2f       	mov	r20, r25
    2548:	0e 94 c0 0c 	call	0x1980	; 0x1980 <GPIO_writePin>
    254c:	fe 01       	movw	r30, r28
    254e:	ed 5b       	subi	r30, 0xBD	; 189
    2550:	ff 4f       	sbci	r31, 0xFF	; 255
    2552:	80 e0       	ldi	r24, 0x00	; 0
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	a0 e8       	ldi	r26, 0x80	; 128
    2558:	bf e3       	ldi	r27, 0x3F	; 63
    255a:	80 83       	st	Z, r24
    255c:	91 83       	std	Z+1, r25	; 0x01
    255e:	a2 83       	std	Z+2, r26	; 0x02
    2560:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2562:	8e 01       	movw	r16, r28
    2564:	01 5c       	subi	r16, 0xC1	; 193
    2566:	1f 4f       	sbci	r17, 0xFF	; 255
    2568:	fe 01       	movw	r30, r28
    256a:	ed 5b       	subi	r30, 0xBD	; 189
    256c:	ff 4f       	sbci	r31, 0xFF	; 255
    256e:	60 81       	ld	r22, Z
    2570:	71 81       	ldd	r23, Z+1	; 0x01
    2572:	82 81       	ldd	r24, Z+2	; 0x02
    2574:	93 81       	ldd	r25, Z+3	; 0x03
    2576:	20 e0       	ldi	r18, 0x00	; 0
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	4a e7       	ldi	r20, 0x7A	; 122
    257c:	53 e4       	ldi	r21, 0x43	; 67
    257e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2582:	dc 01       	movw	r26, r24
    2584:	cb 01       	movw	r24, r22
    2586:	f8 01       	movw	r30, r16
    2588:	80 83       	st	Z, r24
    258a:	91 83       	std	Z+1, r25	; 0x01
    258c:	a2 83       	std	Z+2, r26	; 0x02
    258e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2590:	fe 01       	movw	r30, r28
    2592:	ff 96       	adiw	r30, 0x3f	; 63
    2594:	60 81       	ld	r22, Z
    2596:	71 81       	ldd	r23, Z+1	; 0x01
    2598:	82 81       	ldd	r24, Z+2	; 0x02
    259a:	93 81       	ldd	r25, Z+3	; 0x03
    259c:	20 e0       	ldi	r18, 0x00	; 0
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	40 e8       	ldi	r20, 0x80	; 128
    25a2:	5f e3       	ldi	r21, 0x3F	; 63
    25a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25a8:	88 23       	and	r24, r24
    25aa:	2c f4       	brge	.+10     	; 0x25b6 <LCD_sendCommand+0x40e>
		__ticks = 1;
    25ac:	81 e0       	ldi	r24, 0x01	; 1
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	9e af       	std	Y+62, r25	; 0x3e
    25b2:	8d af       	std	Y+61, r24	; 0x3d
    25b4:	46 c0       	rjmp	.+140    	; 0x2642 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    25b6:	fe 01       	movw	r30, r28
    25b8:	ff 96       	adiw	r30, 0x3f	; 63
    25ba:	60 81       	ld	r22, Z
    25bc:	71 81       	ldd	r23, Z+1	; 0x01
    25be:	82 81       	ldd	r24, Z+2	; 0x02
    25c0:	93 81       	ldd	r25, Z+3	; 0x03
    25c2:	20 e0       	ldi	r18, 0x00	; 0
    25c4:	3f ef       	ldi	r19, 0xFF	; 255
    25c6:	4f e7       	ldi	r20, 0x7F	; 127
    25c8:	57 e4       	ldi	r21, 0x47	; 71
    25ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25ce:	18 16       	cp	r1, r24
    25d0:	64 f5       	brge	.+88     	; 0x262a <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25d2:	fe 01       	movw	r30, r28
    25d4:	ed 5b       	subi	r30, 0xBD	; 189
    25d6:	ff 4f       	sbci	r31, 0xFF	; 255
    25d8:	60 81       	ld	r22, Z
    25da:	71 81       	ldd	r23, Z+1	; 0x01
    25dc:	82 81       	ldd	r24, Z+2	; 0x02
    25de:	93 81       	ldd	r25, Z+3	; 0x03
    25e0:	20 e0       	ldi	r18, 0x00	; 0
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	40 e2       	ldi	r20, 0x20	; 32
    25e6:	51 e4       	ldi	r21, 0x41	; 65
    25e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ec:	dc 01       	movw	r26, r24
    25ee:	cb 01       	movw	r24, r22
    25f0:	bc 01       	movw	r22, r24
    25f2:	cd 01       	movw	r24, r26
    25f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f8:	dc 01       	movw	r26, r24
    25fa:	cb 01       	movw	r24, r22
    25fc:	9e af       	std	Y+62, r25	; 0x3e
    25fe:	8d af       	std	Y+61, r24	; 0x3d
    2600:	0f c0       	rjmp	.+30     	; 0x2620 <LCD_sendCommand+0x478>
    2602:	89 e1       	ldi	r24, 0x19	; 25
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	9c af       	std	Y+60, r25	; 0x3c
    2608:	8b af       	std	Y+59, r24	; 0x3b
    260a:	8b ad       	ldd	r24, Y+59	; 0x3b
    260c:	9c ad       	ldd	r25, Y+60	; 0x3c
    260e:	01 97       	sbiw	r24, 0x01	; 1
    2610:	f1 f7       	brne	.-4      	; 0x260e <LCD_sendCommand+0x466>
    2612:	9c af       	std	Y+60, r25	; 0x3c
    2614:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2616:	8d ad       	ldd	r24, Y+61	; 0x3d
    2618:	9e ad       	ldd	r25, Y+62	; 0x3e
    261a:	01 97       	sbiw	r24, 0x01	; 1
    261c:	9e af       	std	Y+62, r25	; 0x3e
    261e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2620:	8d ad       	ldd	r24, Y+61	; 0x3d
    2622:	9e ad       	ldd	r25, Y+62	; 0x3e
    2624:	00 97       	sbiw	r24, 0x00	; 0
    2626:	69 f7       	brne	.-38     	; 0x2602 <LCD_sendCommand+0x45a>
    2628:	16 c0       	rjmp	.+44     	; 0x2656 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    262a:	fe 01       	movw	r30, r28
    262c:	ff 96       	adiw	r30, 0x3f	; 63
    262e:	60 81       	ld	r22, Z
    2630:	71 81       	ldd	r23, Z+1	; 0x01
    2632:	82 81       	ldd	r24, Z+2	; 0x02
    2634:	93 81       	ldd	r25, Z+3	; 0x03
    2636:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    263a:	dc 01       	movw	r26, r24
    263c:	cb 01       	movw	r24, r22
    263e:	9e af       	std	Y+62, r25	; 0x3e
    2640:	8d af       	std	Y+61, r24	; 0x3d
    2642:	8d ad       	ldd	r24, Y+61	; 0x3d
    2644:	9e ad       	ldd	r25, Y+62	; 0x3e
    2646:	9a af       	std	Y+58, r25	; 0x3a
    2648:	89 af       	std	Y+57, r24	; 0x39
    264a:	89 ad       	ldd	r24, Y+57	; 0x39
    264c:	9a ad       	ldd	r25, Y+58	; 0x3a
    264e:	01 97       	sbiw	r24, 0x01	; 1
    2650:	f1 f7       	brne	.-4      	; 0x264e <LCD_sendCommand+0x4a6>
    2652:	9a af       	std	Y+58, r25	; 0x3a
    2654:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2656:	81 e0       	ldi	r24, 0x01	; 1
    2658:	62 e0       	ldi	r22, 0x02	; 2
    265a:	40 e0       	ldi	r20, 0x00	; 0
    265c:	0e 94 c0 0c 	call	0x1980	; 0x1980 <GPIO_writePin>
    2660:	80 e0       	ldi	r24, 0x00	; 0
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	a0 e8       	ldi	r26, 0x80	; 128
    2666:	bf e3       	ldi	r27, 0x3F	; 63
    2668:	8d ab       	std	Y+53, r24	; 0x35
    266a:	9e ab       	std	Y+54, r25	; 0x36
    266c:	af ab       	std	Y+55, r26	; 0x37
    266e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2670:	6d a9       	ldd	r22, Y+53	; 0x35
    2672:	7e a9       	ldd	r23, Y+54	; 0x36
    2674:	8f a9       	ldd	r24, Y+55	; 0x37
    2676:	98 ad       	ldd	r25, Y+56	; 0x38
    2678:	20 e0       	ldi	r18, 0x00	; 0
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	4a e7       	ldi	r20, 0x7A	; 122
    267e:	53 e4       	ldi	r21, 0x43	; 67
    2680:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2684:	dc 01       	movw	r26, r24
    2686:	cb 01       	movw	r24, r22
    2688:	89 ab       	std	Y+49, r24	; 0x31
    268a:	9a ab       	std	Y+50, r25	; 0x32
    268c:	ab ab       	std	Y+51, r26	; 0x33
    268e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2690:	69 a9       	ldd	r22, Y+49	; 0x31
    2692:	7a a9       	ldd	r23, Y+50	; 0x32
    2694:	8b a9       	ldd	r24, Y+51	; 0x33
    2696:	9c a9       	ldd	r25, Y+52	; 0x34
    2698:	20 e0       	ldi	r18, 0x00	; 0
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	40 e8       	ldi	r20, 0x80	; 128
    269e:	5f e3       	ldi	r21, 0x3F	; 63
    26a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26a4:	88 23       	and	r24, r24
    26a6:	2c f4       	brge	.+10     	; 0x26b2 <LCD_sendCommand+0x50a>
		__ticks = 1;
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	98 ab       	std	Y+48, r25	; 0x30
    26ae:	8f a7       	std	Y+47, r24	; 0x2f
    26b0:	3f c0       	rjmp	.+126    	; 0x2730 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    26b2:	69 a9       	ldd	r22, Y+49	; 0x31
    26b4:	7a a9       	ldd	r23, Y+50	; 0x32
    26b6:	8b a9       	ldd	r24, Y+51	; 0x33
    26b8:	9c a9       	ldd	r25, Y+52	; 0x34
    26ba:	20 e0       	ldi	r18, 0x00	; 0
    26bc:	3f ef       	ldi	r19, 0xFF	; 255
    26be:	4f e7       	ldi	r20, 0x7F	; 127
    26c0:	57 e4       	ldi	r21, 0x47	; 71
    26c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26c6:	18 16       	cp	r1, r24
    26c8:	4c f5       	brge	.+82     	; 0x271c <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ca:	6d a9       	ldd	r22, Y+53	; 0x35
    26cc:	7e a9       	ldd	r23, Y+54	; 0x36
    26ce:	8f a9       	ldd	r24, Y+55	; 0x37
    26d0:	98 ad       	ldd	r25, Y+56	; 0x38
    26d2:	20 e0       	ldi	r18, 0x00	; 0
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	40 e2       	ldi	r20, 0x20	; 32
    26d8:	51 e4       	ldi	r21, 0x41	; 65
    26da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26de:	dc 01       	movw	r26, r24
    26e0:	cb 01       	movw	r24, r22
    26e2:	bc 01       	movw	r22, r24
    26e4:	cd 01       	movw	r24, r26
    26e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ea:	dc 01       	movw	r26, r24
    26ec:	cb 01       	movw	r24, r22
    26ee:	98 ab       	std	Y+48, r25	; 0x30
    26f0:	8f a7       	std	Y+47, r24	; 0x2f
    26f2:	0f c0       	rjmp	.+30     	; 0x2712 <LCD_sendCommand+0x56a>
    26f4:	89 e1       	ldi	r24, 0x19	; 25
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	9e a7       	std	Y+46, r25	; 0x2e
    26fa:	8d a7       	std	Y+45, r24	; 0x2d
    26fc:	8d a5       	ldd	r24, Y+45	; 0x2d
    26fe:	9e a5       	ldd	r25, Y+46	; 0x2e
    2700:	01 97       	sbiw	r24, 0x01	; 1
    2702:	f1 f7       	brne	.-4      	; 0x2700 <LCD_sendCommand+0x558>
    2704:	9e a7       	std	Y+46, r25	; 0x2e
    2706:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2708:	8f a5       	ldd	r24, Y+47	; 0x2f
    270a:	98 a9       	ldd	r25, Y+48	; 0x30
    270c:	01 97       	sbiw	r24, 0x01	; 1
    270e:	98 ab       	std	Y+48, r25	; 0x30
    2710:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2712:	8f a5       	ldd	r24, Y+47	; 0x2f
    2714:	98 a9       	ldd	r25, Y+48	; 0x30
    2716:	00 97       	sbiw	r24, 0x00	; 0
    2718:	69 f7       	brne	.-38     	; 0x26f4 <LCD_sendCommand+0x54c>
    271a:	14 c0       	rjmp	.+40     	; 0x2744 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    271c:	69 a9       	ldd	r22, Y+49	; 0x31
    271e:	7a a9       	ldd	r23, Y+50	; 0x32
    2720:	8b a9       	ldd	r24, Y+51	; 0x33
    2722:	9c a9       	ldd	r25, Y+52	; 0x34
    2724:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2728:	dc 01       	movw	r26, r24
    272a:	cb 01       	movw	r24, r22
    272c:	98 ab       	std	Y+48, r25	; 0x30
    272e:	8f a7       	std	Y+47, r24	; 0x2f
    2730:	8f a5       	ldd	r24, Y+47	; 0x2f
    2732:	98 a9       	ldd	r25, Y+48	; 0x30
    2734:	9c a7       	std	Y+44, r25	; 0x2c
    2736:	8b a7       	std	Y+43, r24	; 0x2b
    2738:	8b a5       	ldd	r24, Y+43	; 0x2b
    273a:	9c a5       	ldd	r25, Y+44	; 0x2c
    273c:	01 97       	sbiw	r24, 0x01	; 1
    273e:	f1 f7       	brne	.-4      	; 0x273c <LCD_sendCommand+0x594>
    2740:	9c a7       	std	Y+44, r25	; 0x2c
    2742:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2744:	81 e0       	ldi	r24, 0x01	; 1
    2746:	62 e0       	ldi	r22, 0x02	; 2
    2748:	41 e0       	ldi	r20, 0x01	; 1
    274a:	0e 94 c0 0c 	call	0x1980	; 0x1980 <GPIO_writePin>
    274e:	80 e0       	ldi	r24, 0x00	; 0
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	a0 e8       	ldi	r26, 0x80	; 128
    2754:	bf e3       	ldi	r27, 0x3F	; 63
    2756:	8f a3       	std	Y+39, r24	; 0x27
    2758:	98 a7       	std	Y+40, r25	; 0x28
    275a:	a9 a7       	std	Y+41, r26	; 0x29
    275c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    275e:	6f a1       	ldd	r22, Y+39	; 0x27
    2760:	78 a5       	ldd	r23, Y+40	; 0x28
    2762:	89 a5       	ldd	r24, Y+41	; 0x29
    2764:	9a a5       	ldd	r25, Y+42	; 0x2a
    2766:	20 e0       	ldi	r18, 0x00	; 0
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	4a e7       	ldi	r20, 0x7A	; 122
    276c:	53 e4       	ldi	r21, 0x43	; 67
    276e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2772:	dc 01       	movw	r26, r24
    2774:	cb 01       	movw	r24, r22
    2776:	8b a3       	std	Y+35, r24	; 0x23
    2778:	9c a3       	std	Y+36, r25	; 0x24
    277a:	ad a3       	std	Y+37, r26	; 0x25
    277c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    277e:	6b a1       	ldd	r22, Y+35	; 0x23
    2780:	7c a1       	ldd	r23, Y+36	; 0x24
    2782:	8d a1       	ldd	r24, Y+37	; 0x25
    2784:	9e a1       	ldd	r25, Y+38	; 0x26
    2786:	20 e0       	ldi	r18, 0x00	; 0
    2788:	30 e0       	ldi	r19, 0x00	; 0
    278a:	40 e8       	ldi	r20, 0x80	; 128
    278c:	5f e3       	ldi	r21, 0x3F	; 63
    278e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2792:	88 23       	and	r24, r24
    2794:	2c f4       	brge	.+10     	; 0x27a0 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	9a a3       	std	Y+34, r25	; 0x22
    279c:	89 a3       	std	Y+33, r24	; 0x21
    279e:	3f c0       	rjmp	.+126    	; 0x281e <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    27a0:	6b a1       	ldd	r22, Y+35	; 0x23
    27a2:	7c a1       	ldd	r23, Y+36	; 0x24
    27a4:	8d a1       	ldd	r24, Y+37	; 0x25
    27a6:	9e a1       	ldd	r25, Y+38	; 0x26
    27a8:	20 e0       	ldi	r18, 0x00	; 0
    27aa:	3f ef       	ldi	r19, 0xFF	; 255
    27ac:	4f e7       	ldi	r20, 0x7F	; 127
    27ae:	57 e4       	ldi	r21, 0x47	; 71
    27b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27b4:	18 16       	cp	r1, r24
    27b6:	4c f5       	brge	.+82     	; 0x280a <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27b8:	6f a1       	ldd	r22, Y+39	; 0x27
    27ba:	78 a5       	ldd	r23, Y+40	; 0x28
    27bc:	89 a5       	ldd	r24, Y+41	; 0x29
    27be:	9a a5       	ldd	r25, Y+42	; 0x2a
    27c0:	20 e0       	ldi	r18, 0x00	; 0
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	40 e2       	ldi	r20, 0x20	; 32
    27c6:	51 e4       	ldi	r21, 0x41	; 65
    27c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27cc:	dc 01       	movw	r26, r24
    27ce:	cb 01       	movw	r24, r22
    27d0:	bc 01       	movw	r22, r24
    27d2:	cd 01       	movw	r24, r26
    27d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d8:	dc 01       	movw	r26, r24
    27da:	cb 01       	movw	r24, r22
    27dc:	9a a3       	std	Y+34, r25	; 0x22
    27de:	89 a3       	std	Y+33, r24	; 0x21
    27e0:	0f c0       	rjmp	.+30     	; 0x2800 <LCD_sendCommand+0x658>
    27e2:	89 e1       	ldi	r24, 0x19	; 25
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	98 a3       	std	Y+32, r25	; 0x20
    27e8:	8f 8f       	std	Y+31, r24	; 0x1f
    27ea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27ec:	98 a1       	ldd	r25, Y+32	; 0x20
    27ee:	01 97       	sbiw	r24, 0x01	; 1
    27f0:	f1 f7       	brne	.-4      	; 0x27ee <LCD_sendCommand+0x646>
    27f2:	98 a3       	std	Y+32, r25	; 0x20
    27f4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27f6:	89 a1       	ldd	r24, Y+33	; 0x21
    27f8:	9a a1       	ldd	r25, Y+34	; 0x22
    27fa:	01 97       	sbiw	r24, 0x01	; 1
    27fc:	9a a3       	std	Y+34, r25	; 0x22
    27fe:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2800:	89 a1       	ldd	r24, Y+33	; 0x21
    2802:	9a a1       	ldd	r25, Y+34	; 0x22
    2804:	00 97       	sbiw	r24, 0x00	; 0
    2806:	69 f7       	brne	.-38     	; 0x27e2 <LCD_sendCommand+0x63a>
    2808:	14 c0       	rjmp	.+40     	; 0x2832 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    280a:	6b a1       	ldd	r22, Y+35	; 0x23
    280c:	7c a1       	ldd	r23, Y+36	; 0x24
    280e:	8d a1       	ldd	r24, Y+37	; 0x25
    2810:	9e a1       	ldd	r25, Y+38	; 0x26
    2812:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2816:	dc 01       	movw	r26, r24
    2818:	cb 01       	movw	r24, r22
    281a:	9a a3       	std	Y+34, r25	; 0x22
    281c:	89 a3       	std	Y+33, r24	; 0x21
    281e:	89 a1       	ldd	r24, Y+33	; 0x21
    2820:	9a a1       	ldd	r25, Y+34	; 0x22
    2822:	9e 8f       	std	Y+30, r25	; 0x1e
    2824:	8d 8f       	std	Y+29, r24	; 0x1d
    2826:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2828:	9e 8d       	ldd	r25, Y+30	; 0x1e
    282a:	01 97       	sbiw	r24, 0x01	; 1
    282c:	f1 f7       	brne	.-4      	; 0x282a <LCD_sendCommand+0x682>
    282e:	9e 8f       	std	Y+30, r25	; 0x1e
    2830:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    2832:	fe 01       	movw	r30, r28
    2834:	ed 59       	subi	r30, 0x9D	; 157
    2836:	ff 4f       	sbci	r31, 0xFF	; 255
    2838:	80 81       	ld	r24, Z
    283a:	98 2f       	mov	r25, r24
    283c:	91 70       	andi	r25, 0x01	; 1
    283e:	83 e0       	ldi	r24, 0x03	; 3
    2840:	64 e0       	ldi	r22, 0x04	; 4
    2842:	49 2f       	mov	r20, r25
    2844:	0e 94 c0 0c 	call	0x1980	; 0x1980 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    2848:	fe 01       	movw	r30, r28
    284a:	ed 59       	subi	r30, 0x9D	; 157
    284c:	ff 4f       	sbci	r31, 0xFF	; 255
    284e:	80 81       	ld	r24, Z
    2850:	88 2f       	mov	r24, r24
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	82 70       	andi	r24, 0x02	; 2
    2856:	90 70       	andi	r25, 0x00	; 0
    2858:	95 95       	asr	r25
    285a:	87 95       	ror	r24
    285c:	98 2f       	mov	r25, r24
    285e:	83 e0       	ldi	r24, 0x03	; 3
    2860:	65 e0       	ldi	r22, 0x05	; 5
    2862:	49 2f       	mov	r20, r25
    2864:	0e 94 c0 0c 	call	0x1980	; 0x1980 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    2868:	fe 01       	movw	r30, r28
    286a:	ed 59       	subi	r30, 0x9D	; 157
    286c:	ff 4f       	sbci	r31, 0xFF	; 255
    286e:	80 81       	ld	r24, Z
    2870:	88 2f       	mov	r24, r24
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	84 70       	andi	r24, 0x04	; 4
    2876:	90 70       	andi	r25, 0x00	; 0
    2878:	95 95       	asr	r25
    287a:	87 95       	ror	r24
    287c:	95 95       	asr	r25
    287e:	87 95       	ror	r24
    2880:	98 2f       	mov	r25, r24
    2882:	83 e0       	ldi	r24, 0x03	; 3
    2884:	66 e0       	ldi	r22, 0x06	; 6
    2886:	49 2f       	mov	r20, r25
    2888:	0e 94 c0 0c 	call	0x1980	; 0x1980 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    288c:	fe 01       	movw	r30, r28
    288e:	ed 59       	subi	r30, 0x9D	; 157
    2890:	ff 4f       	sbci	r31, 0xFF	; 255
    2892:	80 81       	ld	r24, Z
    2894:	88 2f       	mov	r24, r24
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	88 70       	andi	r24, 0x08	; 8
    289a:	90 70       	andi	r25, 0x00	; 0
    289c:	95 95       	asr	r25
    289e:	87 95       	ror	r24
    28a0:	95 95       	asr	r25
    28a2:	87 95       	ror	r24
    28a4:	95 95       	asr	r25
    28a6:	87 95       	ror	r24
    28a8:	98 2f       	mov	r25, r24
    28aa:	83 e0       	ldi	r24, 0x03	; 3
    28ac:	67 e0       	ldi	r22, 0x07	; 7
    28ae:	49 2f       	mov	r20, r25
    28b0:	0e 94 c0 0c 	call	0x1980	; 0x1980 <GPIO_writePin>
    28b4:	80 e0       	ldi	r24, 0x00	; 0
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	a0 e8       	ldi	r26, 0x80	; 128
    28ba:	bf e3       	ldi	r27, 0x3F	; 63
    28bc:	89 8f       	std	Y+25, r24	; 0x19
    28be:	9a 8f       	std	Y+26, r25	; 0x1a
    28c0:	ab 8f       	std	Y+27, r26	; 0x1b
    28c2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28c4:	69 8d       	ldd	r22, Y+25	; 0x19
    28c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28cc:	20 e0       	ldi	r18, 0x00	; 0
    28ce:	30 e0       	ldi	r19, 0x00	; 0
    28d0:	4a e7       	ldi	r20, 0x7A	; 122
    28d2:	53 e4       	ldi	r21, 0x43	; 67
    28d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d8:	dc 01       	movw	r26, r24
    28da:	cb 01       	movw	r24, r22
    28dc:	8d 8b       	std	Y+21, r24	; 0x15
    28de:	9e 8b       	std	Y+22, r25	; 0x16
    28e0:	af 8b       	std	Y+23, r26	; 0x17
    28e2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28e4:	6d 89       	ldd	r22, Y+21	; 0x15
    28e6:	7e 89       	ldd	r23, Y+22	; 0x16
    28e8:	8f 89       	ldd	r24, Y+23	; 0x17
    28ea:	98 8d       	ldd	r25, Y+24	; 0x18
    28ec:	20 e0       	ldi	r18, 0x00	; 0
    28ee:	30 e0       	ldi	r19, 0x00	; 0
    28f0:	40 e8       	ldi	r20, 0x80	; 128
    28f2:	5f e3       	ldi	r21, 0x3F	; 63
    28f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28f8:	88 23       	and	r24, r24
    28fa:	2c f4       	brge	.+10     	; 0x2906 <LCD_sendCommand+0x75e>
		__ticks = 1;
    28fc:	81 e0       	ldi	r24, 0x01	; 1
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	9c 8b       	std	Y+20, r25	; 0x14
    2902:	8b 8b       	std	Y+19, r24	; 0x13
    2904:	3f c0       	rjmp	.+126    	; 0x2984 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    2906:	6d 89       	ldd	r22, Y+21	; 0x15
    2908:	7e 89       	ldd	r23, Y+22	; 0x16
    290a:	8f 89       	ldd	r24, Y+23	; 0x17
    290c:	98 8d       	ldd	r25, Y+24	; 0x18
    290e:	20 e0       	ldi	r18, 0x00	; 0
    2910:	3f ef       	ldi	r19, 0xFF	; 255
    2912:	4f e7       	ldi	r20, 0x7F	; 127
    2914:	57 e4       	ldi	r21, 0x47	; 71
    2916:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    291a:	18 16       	cp	r1, r24
    291c:	4c f5       	brge	.+82     	; 0x2970 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    291e:	69 8d       	ldd	r22, Y+25	; 0x19
    2920:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2922:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2924:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2926:	20 e0       	ldi	r18, 0x00	; 0
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	40 e2       	ldi	r20, 0x20	; 32
    292c:	51 e4       	ldi	r21, 0x41	; 65
    292e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2932:	dc 01       	movw	r26, r24
    2934:	cb 01       	movw	r24, r22
    2936:	bc 01       	movw	r22, r24
    2938:	cd 01       	movw	r24, r26
    293a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    293e:	dc 01       	movw	r26, r24
    2940:	cb 01       	movw	r24, r22
    2942:	9c 8b       	std	Y+20, r25	; 0x14
    2944:	8b 8b       	std	Y+19, r24	; 0x13
    2946:	0f c0       	rjmp	.+30     	; 0x2966 <LCD_sendCommand+0x7be>
    2948:	89 e1       	ldi	r24, 0x19	; 25
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	9a 8b       	std	Y+18, r25	; 0x12
    294e:	89 8b       	std	Y+17, r24	; 0x11
    2950:	89 89       	ldd	r24, Y+17	; 0x11
    2952:	9a 89       	ldd	r25, Y+18	; 0x12
    2954:	01 97       	sbiw	r24, 0x01	; 1
    2956:	f1 f7       	brne	.-4      	; 0x2954 <LCD_sendCommand+0x7ac>
    2958:	9a 8b       	std	Y+18, r25	; 0x12
    295a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    295c:	8b 89       	ldd	r24, Y+19	; 0x13
    295e:	9c 89       	ldd	r25, Y+20	; 0x14
    2960:	01 97       	sbiw	r24, 0x01	; 1
    2962:	9c 8b       	std	Y+20, r25	; 0x14
    2964:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2966:	8b 89       	ldd	r24, Y+19	; 0x13
    2968:	9c 89       	ldd	r25, Y+20	; 0x14
    296a:	00 97       	sbiw	r24, 0x00	; 0
    296c:	69 f7       	brne	.-38     	; 0x2948 <LCD_sendCommand+0x7a0>
    296e:	14 c0       	rjmp	.+40     	; 0x2998 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2970:	6d 89       	ldd	r22, Y+21	; 0x15
    2972:	7e 89       	ldd	r23, Y+22	; 0x16
    2974:	8f 89       	ldd	r24, Y+23	; 0x17
    2976:	98 8d       	ldd	r25, Y+24	; 0x18
    2978:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    297c:	dc 01       	movw	r26, r24
    297e:	cb 01       	movw	r24, r22
    2980:	9c 8b       	std	Y+20, r25	; 0x14
    2982:	8b 8b       	std	Y+19, r24	; 0x13
    2984:	8b 89       	ldd	r24, Y+19	; 0x13
    2986:	9c 89       	ldd	r25, Y+20	; 0x14
    2988:	98 8b       	std	Y+16, r25	; 0x10
    298a:	8f 87       	std	Y+15, r24	; 0x0f
    298c:	8f 85       	ldd	r24, Y+15	; 0x0f
    298e:	98 89       	ldd	r25, Y+16	; 0x10
    2990:	01 97       	sbiw	r24, 0x01	; 1
    2992:	f1 f7       	brne	.-4      	; 0x2990 <LCD_sendCommand+0x7e8>
    2994:	98 8b       	std	Y+16, r25	; 0x10
    2996:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2998:	81 e0       	ldi	r24, 0x01	; 1
    299a:	62 e0       	ldi	r22, 0x02	; 2
    299c:	40 e0       	ldi	r20, 0x00	; 0
    299e:	0e 94 c0 0c 	call	0x1980	; 0x1980 <GPIO_writePin>
    29a2:	80 e0       	ldi	r24, 0x00	; 0
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	a0 e8       	ldi	r26, 0x80	; 128
    29a8:	bf e3       	ldi	r27, 0x3F	; 63
    29aa:	8b 87       	std	Y+11, r24	; 0x0b
    29ac:	9c 87       	std	Y+12, r25	; 0x0c
    29ae:	ad 87       	std	Y+13, r26	; 0x0d
    29b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    29b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    29b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    29b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    29ba:	20 e0       	ldi	r18, 0x00	; 0
    29bc:	30 e0       	ldi	r19, 0x00	; 0
    29be:	4a e7       	ldi	r20, 0x7A	; 122
    29c0:	53 e4       	ldi	r21, 0x43	; 67
    29c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29c6:	dc 01       	movw	r26, r24
    29c8:	cb 01       	movw	r24, r22
    29ca:	8f 83       	std	Y+7, r24	; 0x07
    29cc:	98 87       	std	Y+8, r25	; 0x08
    29ce:	a9 87       	std	Y+9, r26	; 0x09
    29d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29d2:	6f 81       	ldd	r22, Y+7	; 0x07
    29d4:	78 85       	ldd	r23, Y+8	; 0x08
    29d6:	89 85       	ldd	r24, Y+9	; 0x09
    29d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    29da:	20 e0       	ldi	r18, 0x00	; 0
    29dc:	30 e0       	ldi	r19, 0x00	; 0
    29de:	40 e8       	ldi	r20, 0x80	; 128
    29e0:	5f e3       	ldi	r21, 0x3F	; 63
    29e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29e6:	88 23       	and	r24, r24
    29e8:	2c f4       	brge	.+10     	; 0x29f4 <LCD_sendCommand+0x84c>
		__ticks = 1;
    29ea:	81 e0       	ldi	r24, 0x01	; 1
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	9e 83       	std	Y+6, r25	; 0x06
    29f0:	8d 83       	std	Y+5, r24	; 0x05
    29f2:	3f c0       	rjmp	.+126    	; 0x2a72 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    29f4:	6f 81       	ldd	r22, Y+7	; 0x07
    29f6:	78 85       	ldd	r23, Y+8	; 0x08
    29f8:	89 85       	ldd	r24, Y+9	; 0x09
    29fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    29fc:	20 e0       	ldi	r18, 0x00	; 0
    29fe:	3f ef       	ldi	r19, 0xFF	; 255
    2a00:	4f e7       	ldi	r20, 0x7F	; 127
    2a02:	57 e4       	ldi	r21, 0x47	; 71
    2a04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a08:	18 16       	cp	r1, r24
    2a0a:	4c f5       	brge	.+82     	; 0x2a5e <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a10:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a12:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a14:	20 e0       	ldi	r18, 0x00	; 0
    2a16:	30 e0       	ldi	r19, 0x00	; 0
    2a18:	40 e2       	ldi	r20, 0x20	; 32
    2a1a:	51 e4       	ldi	r21, 0x41	; 65
    2a1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a20:	dc 01       	movw	r26, r24
    2a22:	cb 01       	movw	r24, r22
    2a24:	bc 01       	movw	r22, r24
    2a26:	cd 01       	movw	r24, r26
    2a28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a2c:	dc 01       	movw	r26, r24
    2a2e:	cb 01       	movw	r24, r22
    2a30:	9e 83       	std	Y+6, r25	; 0x06
    2a32:	8d 83       	std	Y+5, r24	; 0x05
    2a34:	0f c0       	rjmp	.+30     	; 0x2a54 <LCD_sendCommand+0x8ac>
    2a36:	89 e1       	ldi	r24, 0x19	; 25
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	9c 83       	std	Y+4, r25	; 0x04
    2a3c:	8b 83       	std	Y+3, r24	; 0x03
    2a3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a40:	9c 81       	ldd	r25, Y+4	; 0x04
    2a42:	01 97       	sbiw	r24, 0x01	; 1
    2a44:	f1 f7       	brne	.-4      	; 0x2a42 <LCD_sendCommand+0x89a>
    2a46:	9c 83       	std	Y+4, r25	; 0x04
    2a48:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2a4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2a4e:	01 97       	sbiw	r24, 0x01	; 1
    2a50:	9e 83       	std	Y+6, r25	; 0x06
    2a52:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a54:	8d 81       	ldd	r24, Y+5	; 0x05
    2a56:	9e 81       	ldd	r25, Y+6	; 0x06
    2a58:	00 97       	sbiw	r24, 0x00	; 0
    2a5a:	69 f7       	brne	.-38     	; 0x2a36 <LCD_sendCommand+0x88e>
    2a5c:	14 c0       	rjmp	.+40     	; 0x2a86 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a5e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a60:	78 85       	ldd	r23, Y+8	; 0x08
    2a62:	89 85       	ldd	r24, Y+9	; 0x09
    2a64:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a6a:	dc 01       	movw	r26, r24
    2a6c:	cb 01       	movw	r24, r22
    2a6e:	9e 83       	std	Y+6, r25	; 0x06
    2a70:	8d 83       	std	Y+5, r24	; 0x05
    2a72:	8d 81       	ldd	r24, Y+5	; 0x05
    2a74:	9e 81       	ldd	r25, Y+6	; 0x06
    2a76:	9a 83       	std	Y+2, r25	; 0x02
    2a78:	89 83       	std	Y+1, r24	; 0x01
    2a7a:	89 81       	ldd	r24, Y+1	; 0x01
    2a7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a7e:	01 97       	sbiw	r24, 0x01	; 1
    2a80:	f1 f7       	brne	.-4      	; 0x2a7e <LCD_sendCommand+0x8d6>
    2a82:	9a 83       	std	Y+2, r25	; 0x02
    2a84:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2a86:	cd 59       	subi	r28, 0x9D	; 157
    2a88:	df 4f       	sbci	r29, 0xFF	; 255
    2a8a:	0f b6       	in	r0, 0x3f	; 63
    2a8c:	f8 94       	cli
    2a8e:	de bf       	out	0x3e, r29	; 62
    2a90:	0f be       	out	0x3f, r0	; 63
    2a92:	cd bf       	out	0x3d, r28	; 61
    2a94:	cf 91       	pop	r28
    2a96:	df 91       	pop	r29
    2a98:	1f 91       	pop	r17
    2a9a:	0f 91       	pop	r16
    2a9c:	08 95       	ret

00002a9e <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2a9e:	0f 93       	push	r16
    2aa0:	1f 93       	push	r17
    2aa2:	df 93       	push	r29
    2aa4:	cf 93       	push	r28
    2aa6:	cd b7       	in	r28, 0x3d	; 61
    2aa8:	de b7       	in	r29, 0x3e	; 62
    2aaa:	c3 56       	subi	r28, 0x63	; 99
    2aac:	d0 40       	sbci	r29, 0x00	; 0
    2aae:	0f b6       	in	r0, 0x3f	; 63
    2ab0:	f8 94       	cli
    2ab2:	de bf       	out	0x3e, r29	; 62
    2ab4:	0f be       	out	0x3f, r0	; 63
    2ab6:	cd bf       	out	0x3d, r28	; 61
    2ab8:	fe 01       	movw	r30, r28
    2aba:	ed 59       	subi	r30, 0x9D	; 157
    2abc:	ff 4f       	sbci	r31, 0xFF	; 255
    2abe:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2ac0:	81 e0       	ldi	r24, 0x01	; 1
    2ac2:	61 e0       	ldi	r22, 0x01	; 1
    2ac4:	41 e0       	ldi	r20, 0x01	; 1
    2ac6:	0e 94 c0 0c 	call	0x1980	; 0x1980 <GPIO_writePin>
    2aca:	fe 01       	movw	r30, r28
    2acc:	e1 5a       	subi	r30, 0xA1	; 161
    2ace:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad0:	80 e0       	ldi	r24, 0x00	; 0
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	a0 e8       	ldi	r26, 0x80	; 128
    2ad6:	bf e3       	ldi	r27, 0x3F	; 63
    2ad8:	80 83       	st	Z, r24
    2ada:	91 83       	std	Z+1, r25	; 0x01
    2adc:	a2 83       	std	Z+2, r26	; 0x02
    2ade:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ae0:	8e 01       	movw	r16, r28
    2ae2:	05 5a       	subi	r16, 0xA5	; 165
    2ae4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ae6:	fe 01       	movw	r30, r28
    2ae8:	e1 5a       	subi	r30, 0xA1	; 161
    2aea:	ff 4f       	sbci	r31, 0xFF	; 255
    2aec:	60 81       	ld	r22, Z
    2aee:	71 81       	ldd	r23, Z+1	; 0x01
    2af0:	82 81       	ldd	r24, Z+2	; 0x02
    2af2:	93 81       	ldd	r25, Z+3	; 0x03
    2af4:	20 e0       	ldi	r18, 0x00	; 0
    2af6:	30 e0       	ldi	r19, 0x00	; 0
    2af8:	4a e7       	ldi	r20, 0x7A	; 122
    2afa:	53 e4       	ldi	r21, 0x43	; 67
    2afc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b00:	dc 01       	movw	r26, r24
    2b02:	cb 01       	movw	r24, r22
    2b04:	f8 01       	movw	r30, r16
    2b06:	80 83       	st	Z, r24
    2b08:	91 83       	std	Z+1, r25	; 0x01
    2b0a:	a2 83       	std	Z+2, r26	; 0x02
    2b0c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b0e:	fe 01       	movw	r30, r28
    2b10:	e5 5a       	subi	r30, 0xA5	; 165
    2b12:	ff 4f       	sbci	r31, 0xFF	; 255
    2b14:	60 81       	ld	r22, Z
    2b16:	71 81       	ldd	r23, Z+1	; 0x01
    2b18:	82 81       	ldd	r24, Z+2	; 0x02
    2b1a:	93 81       	ldd	r25, Z+3	; 0x03
    2b1c:	20 e0       	ldi	r18, 0x00	; 0
    2b1e:	30 e0       	ldi	r19, 0x00	; 0
    2b20:	40 e8       	ldi	r20, 0x80	; 128
    2b22:	5f e3       	ldi	r21, 0x3F	; 63
    2b24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b28:	88 23       	and	r24, r24
    2b2a:	44 f4       	brge	.+16     	; 0x2b3c <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2b2c:	fe 01       	movw	r30, r28
    2b2e:	e7 5a       	subi	r30, 0xA7	; 167
    2b30:	ff 4f       	sbci	r31, 0xFF	; 255
    2b32:	81 e0       	ldi	r24, 0x01	; 1
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	91 83       	std	Z+1, r25	; 0x01
    2b38:	80 83       	st	Z, r24
    2b3a:	64 c0       	rjmp	.+200    	; 0x2c04 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2b3c:	fe 01       	movw	r30, r28
    2b3e:	e5 5a       	subi	r30, 0xA5	; 165
    2b40:	ff 4f       	sbci	r31, 0xFF	; 255
    2b42:	60 81       	ld	r22, Z
    2b44:	71 81       	ldd	r23, Z+1	; 0x01
    2b46:	82 81       	ldd	r24, Z+2	; 0x02
    2b48:	93 81       	ldd	r25, Z+3	; 0x03
    2b4a:	20 e0       	ldi	r18, 0x00	; 0
    2b4c:	3f ef       	ldi	r19, 0xFF	; 255
    2b4e:	4f e7       	ldi	r20, 0x7F	; 127
    2b50:	57 e4       	ldi	r21, 0x47	; 71
    2b52:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b56:	18 16       	cp	r1, r24
    2b58:	0c f0       	brlt	.+2      	; 0x2b5c <LCD_displayCharacter+0xbe>
    2b5a:	43 c0       	rjmp	.+134    	; 0x2be2 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b5c:	fe 01       	movw	r30, r28
    2b5e:	e1 5a       	subi	r30, 0xA1	; 161
    2b60:	ff 4f       	sbci	r31, 0xFF	; 255
    2b62:	60 81       	ld	r22, Z
    2b64:	71 81       	ldd	r23, Z+1	; 0x01
    2b66:	82 81       	ldd	r24, Z+2	; 0x02
    2b68:	93 81       	ldd	r25, Z+3	; 0x03
    2b6a:	20 e0       	ldi	r18, 0x00	; 0
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	40 e2       	ldi	r20, 0x20	; 32
    2b70:	51 e4       	ldi	r21, 0x41	; 65
    2b72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b76:	dc 01       	movw	r26, r24
    2b78:	cb 01       	movw	r24, r22
    2b7a:	8e 01       	movw	r16, r28
    2b7c:	07 5a       	subi	r16, 0xA7	; 167
    2b7e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b80:	bc 01       	movw	r22, r24
    2b82:	cd 01       	movw	r24, r26
    2b84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b88:	dc 01       	movw	r26, r24
    2b8a:	cb 01       	movw	r24, r22
    2b8c:	f8 01       	movw	r30, r16
    2b8e:	91 83       	std	Z+1, r25	; 0x01
    2b90:	80 83       	st	Z, r24
    2b92:	1f c0       	rjmp	.+62     	; 0x2bd2 <LCD_displayCharacter+0x134>
    2b94:	fe 01       	movw	r30, r28
    2b96:	e9 5a       	subi	r30, 0xA9	; 169
    2b98:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9a:	89 e1       	ldi	r24, 0x19	; 25
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	91 83       	std	Z+1, r25	; 0x01
    2ba0:	80 83       	st	Z, r24
    2ba2:	fe 01       	movw	r30, r28
    2ba4:	e9 5a       	subi	r30, 0xA9	; 169
    2ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba8:	80 81       	ld	r24, Z
    2baa:	91 81       	ldd	r25, Z+1	; 0x01
    2bac:	01 97       	sbiw	r24, 0x01	; 1
    2bae:	f1 f7       	brne	.-4      	; 0x2bac <LCD_displayCharacter+0x10e>
    2bb0:	fe 01       	movw	r30, r28
    2bb2:	e9 5a       	subi	r30, 0xA9	; 169
    2bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb6:	91 83       	std	Z+1, r25	; 0x01
    2bb8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bba:	de 01       	movw	r26, r28
    2bbc:	a7 5a       	subi	r26, 0xA7	; 167
    2bbe:	bf 4f       	sbci	r27, 0xFF	; 255
    2bc0:	fe 01       	movw	r30, r28
    2bc2:	e7 5a       	subi	r30, 0xA7	; 167
    2bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc6:	80 81       	ld	r24, Z
    2bc8:	91 81       	ldd	r25, Z+1	; 0x01
    2bca:	01 97       	sbiw	r24, 0x01	; 1
    2bcc:	11 96       	adiw	r26, 0x01	; 1
    2bce:	9c 93       	st	X, r25
    2bd0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bd2:	fe 01       	movw	r30, r28
    2bd4:	e7 5a       	subi	r30, 0xA7	; 167
    2bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd8:	80 81       	ld	r24, Z
    2bda:	91 81       	ldd	r25, Z+1	; 0x01
    2bdc:	00 97       	sbiw	r24, 0x00	; 0
    2bde:	d1 f6       	brne	.-76     	; 0x2b94 <LCD_displayCharacter+0xf6>
    2be0:	27 c0       	rjmp	.+78     	; 0x2c30 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2be2:	8e 01       	movw	r16, r28
    2be4:	07 5a       	subi	r16, 0xA7	; 167
    2be6:	1f 4f       	sbci	r17, 0xFF	; 255
    2be8:	fe 01       	movw	r30, r28
    2bea:	e5 5a       	subi	r30, 0xA5	; 165
    2bec:	ff 4f       	sbci	r31, 0xFF	; 255
    2bee:	60 81       	ld	r22, Z
    2bf0:	71 81       	ldd	r23, Z+1	; 0x01
    2bf2:	82 81       	ldd	r24, Z+2	; 0x02
    2bf4:	93 81       	ldd	r25, Z+3	; 0x03
    2bf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bfa:	dc 01       	movw	r26, r24
    2bfc:	cb 01       	movw	r24, r22
    2bfe:	f8 01       	movw	r30, r16
    2c00:	91 83       	std	Z+1, r25	; 0x01
    2c02:	80 83       	st	Z, r24
    2c04:	de 01       	movw	r26, r28
    2c06:	ab 5a       	subi	r26, 0xAB	; 171
    2c08:	bf 4f       	sbci	r27, 0xFF	; 255
    2c0a:	fe 01       	movw	r30, r28
    2c0c:	e7 5a       	subi	r30, 0xA7	; 167
    2c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c10:	80 81       	ld	r24, Z
    2c12:	91 81       	ldd	r25, Z+1	; 0x01
    2c14:	8d 93       	st	X+, r24
    2c16:	9c 93       	st	X, r25
    2c18:	fe 01       	movw	r30, r28
    2c1a:	eb 5a       	subi	r30, 0xAB	; 171
    2c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1e:	80 81       	ld	r24, Z
    2c20:	91 81       	ldd	r25, Z+1	; 0x01
    2c22:	01 97       	sbiw	r24, 0x01	; 1
    2c24:	f1 f7       	brne	.-4      	; 0x2c22 <LCD_displayCharacter+0x184>
    2c26:	fe 01       	movw	r30, r28
    2c28:	eb 5a       	subi	r30, 0xAB	; 171
    2c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c2c:	91 83       	std	Z+1, r25	; 0x01
    2c2e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2c30:	81 e0       	ldi	r24, 0x01	; 1
    2c32:	62 e0       	ldi	r22, 0x02	; 2
    2c34:	41 e0       	ldi	r20, 0x01	; 1
    2c36:	0e 94 c0 0c 	call	0x1980	; 0x1980 <GPIO_writePin>
    2c3a:	fe 01       	movw	r30, r28
    2c3c:	ef 5a       	subi	r30, 0xAF	; 175
    2c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c40:	80 e0       	ldi	r24, 0x00	; 0
    2c42:	90 e0       	ldi	r25, 0x00	; 0
    2c44:	a0 e8       	ldi	r26, 0x80	; 128
    2c46:	bf e3       	ldi	r27, 0x3F	; 63
    2c48:	80 83       	st	Z, r24
    2c4a:	91 83       	std	Z+1, r25	; 0x01
    2c4c:	a2 83       	std	Z+2, r26	; 0x02
    2c4e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c50:	8e 01       	movw	r16, r28
    2c52:	03 5b       	subi	r16, 0xB3	; 179
    2c54:	1f 4f       	sbci	r17, 0xFF	; 255
    2c56:	fe 01       	movw	r30, r28
    2c58:	ef 5a       	subi	r30, 0xAF	; 175
    2c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5c:	60 81       	ld	r22, Z
    2c5e:	71 81       	ldd	r23, Z+1	; 0x01
    2c60:	82 81       	ldd	r24, Z+2	; 0x02
    2c62:	93 81       	ldd	r25, Z+3	; 0x03
    2c64:	20 e0       	ldi	r18, 0x00	; 0
    2c66:	30 e0       	ldi	r19, 0x00	; 0
    2c68:	4a e7       	ldi	r20, 0x7A	; 122
    2c6a:	53 e4       	ldi	r21, 0x43	; 67
    2c6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c70:	dc 01       	movw	r26, r24
    2c72:	cb 01       	movw	r24, r22
    2c74:	f8 01       	movw	r30, r16
    2c76:	80 83       	st	Z, r24
    2c78:	91 83       	std	Z+1, r25	; 0x01
    2c7a:	a2 83       	std	Z+2, r26	; 0x02
    2c7c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c7e:	fe 01       	movw	r30, r28
    2c80:	e3 5b       	subi	r30, 0xB3	; 179
    2c82:	ff 4f       	sbci	r31, 0xFF	; 255
    2c84:	60 81       	ld	r22, Z
    2c86:	71 81       	ldd	r23, Z+1	; 0x01
    2c88:	82 81       	ldd	r24, Z+2	; 0x02
    2c8a:	93 81       	ldd	r25, Z+3	; 0x03
    2c8c:	20 e0       	ldi	r18, 0x00	; 0
    2c8e:	30 e0       	ldi	r19, 0x00	; 0
    2c90:	40 e8       	ldi	r20, 0x80	; 128
    2c92:	5f e3       	ldi	r21, 0x3F	; 63
    2c94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c98:	88 23       	and	r24, r24
    2c9a:	44 f4       	brge	.+16     	; 0x2cac <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2c9c:	fe 01       	movw	r30, r28
    2c9e:	e5 5b       	subi	r30, 0xB5	; 181
    2ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca2:	81 e0       	ldi	r24, 0x01	; 1
    2ca4:	90 e0       	ldi	r25, 0x00	; 0
    2ca6:	91 83       	std	Z+1, r25	; 0x01
    2ca8:	80 83       	st	Z, r24
    2caa:	64 c0       	rjmp	.+200    	; 0x2d74 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2cac:	fe 01       	movw	r30, r28
    2cae:	e3 5b       	subi	r30, 0xB3	; 179
    2cb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cb2:	60 81       	ld	r22, Z
    2cb4:	71 81       	ldd	r23, Z+1	; 0x01
    2cb6:	82 81       	ldd	r24, Z+2	; 0x02
    2cb8:	93 81       	ldd	r25, Z+3	; 0x03
    2cba:	20 e0       	ldi	r18, 0x00	; 0
    2cbc:	3f ef       	ldi	r19, 0xFF	; 255
    2cbe:	4f e7       	ldi	r20, 0x7F	; 127
    2cc0:	57 e4       	ldi	r21, 0x47	; 71
    2cc2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cc6:	18 16       	cp	r1, r24
    2cc8:	0c f0       	brlt	.+2      	; 0x2ccc <LCD_displayCharacter+0x22e>
    2cca:	43 c0       	rjmp	.+134    	; 0x2d52 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ccc:	fe 01       	movw	r30, r28
    2cce:	ef 5a       	subi	r30, 0xAF	; 175
    2cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd2:	60 81       	ld	r22, Z
    2cd4:	71 81       	ldd	r23, Z+1	; 0x01
    2cd6:	82 81       	ldd	r24, Z+2	; 0x02
    2cd8:	93 81       	ldd	r25, Z+3	; 0x03
    2cda:	20 e0       	ldi	r18, 0x00	; 0
    2cdc:	30 e0       	ldi	r19, 0x00	; 0
    2cde:	40 e2       	ldi	r20, 0x20	; 32
    2ce0:	51 e4       	ldi	r21, 0x41	; 65
    2ce2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ce6:	dc 01       	movw	r26, r24
    2ce8:	cb 01       	movw	r24, r22
    2cea:	8e 01       	movw	r16, r28
    2cec:	05 5b       	subi	r16, 0xB5	; 181
    2cee:	1f 4f       	sbci	r17, 0xFF	; 255
    2cf0:	bc 01       	movw	r22, r24
    2cf2:	cd 01       	movw	r24, r26
    2cf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cf8:	dc 01       	movw	r26, r24
    2cfa:	cb 01       	movw	r24, r22
    2cfc:	f8 01       	movw	r30, r16
    2cfe:	91 83       	std	Z+1, r25	; 0x01
    2d00:	80 83       	st	Z, r24
    2d02:	1f c0       	rjmp	.+62     	; 0x2d42 <LCD_displayCharacter+0x2a4>
    2d04:	fe 01       	movw	r30, r28
    2d06:	e7 5b       	subi	r30, 0xB7	; 183
    2d08:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0a:	89 e1       	ldi	r24, 0x19	; 25
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	91 83       	std	Z+1, r25	; 0x01
    2d10:	80 83       	st	Z, r24
    2d12:	fe 01       	movw	r30, r28
    2d14:	e7 5b       	subi	r30, 0xB7	; 183
    2d16:	ff 4f       	sbci	r31, 0xFF	; 255
    2d18:	80 81       	ld	r24, Z
    2d1a:	91 81       	ldd	r25, Z+1	; 0x01
    2d1c:	01 97       	sbiw	r24, 0x01	; 1
    2d1e:	f1 f7       	brne	.-4      	; 0x2d1c <LCD_displayCharacter+0x27e>
    2d20:	fe 01       	movw	r30, r28
    2d22:	e7 5b       	subi	r30, 0xB7	; 183
    2d24:	ff 4f       	sbci	r31, 0xFF	; 255
    2d26:	91 83       	std	Z+1, r25	; 0x01
    2d28:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d2a:	de 01       	movw	r26, r28
    2d2c:	a5 5b       	subi	r26, 0xB5	; 181
    2d2e:	bf 4f       	sbci	r27, 0xFF	; 255
    2d30:	fe 01       	movw	r30, r28
    2d32:	e5 5b       	subi	r30, 0xB5	; 181
    2d34:	ff 4f       	sbci	r31, 0xFF	; 255
    2d36:	80 81       	ld	r24, Z
    2d38:	91 81       	ldd	r25, Z+1	; 0x01
    2d3a:	01 97       	sbiw	r24, 0x01	; 1
    2d3c:	11 96       	adiw	r26, 0x01	; 1
    2d3e:	9c 93       	st	X, r25
    2d40:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d42:	fe 01       	movw	r30, r28
    2d44:	e5 5b       	subi	r30, 0xB5	; 181
    2d46:	ff 4f       	sbci	r31, 0xFF	; 255
    2d48:	80 81       	ld	r24, Z
    2d4a:	91 81       	ldd	r25, Z+1	; 0x01
    2d4c:	00 97       	sbiw	r24, 0x00	; 0
    2d4e:	d1 f6       	brne	.-76     	; 0x2d04 <LCD_displayCharacter+0x266>
    2d50:	27 c0       	rjmp	.+78     	; 0x2da0 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d52:	8e 01       	movw	r16, r28
    2d54:	05 5b       	subi	r16, 0xB5	; 181
    2d56:	1f 4f       	sbci	r17, 0xFF	; 255
    2d58:	fe 01       	movw	r30, r28
    2d5a:	e3 5b       	subi	r30, 0xB3	; 179
    2d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5e:	60 81       	ld	r22, Z
    2d60:	71 81       	ldd	r23, Z+1	; 0x01
    2d62:	82 81       	ldd	r24, Z+2	; 0x02
    2d64:	93 81       	ldd	r25, Z+3	; 0x03
    2d66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d6a:	dc 01       	movw	r26, r24
    2d6c:	cb 01       	movw	r24, r22
    2d6e:	f8 01       	movw	r30, r16
    2d70:	91 83       	std	Z+1, r25	; 0x01
    2d72:	80 83       	st	Z, r24
    2d74:	de 01       	movw	r26, r28
    2d76:	a9 5b       	subi	r26, 0xB9	; 185
    2d78:	bf 4f       	sbci	r27, 0xFF	; 255
    2d7a:	fe 01       	movw	r30, r28
    2d7c:	e5 5b       	subi	r30, 0xB5	; 181
    2d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d80:	80 81       	ld	r24, Z
    2d82:	91 81       	ldd	r25, Z+1	; 0x01
    2d84:	8d 93       	st	X+, r24
    2d86:	9c 93       	st	X, r25
    2d88:	fe 01       	movw	r30, r28
    2d8a:	e9 5b       	subi	r30, 0xB9	; 185
    2d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8e:	80 81       	ld	r24, Z
    2d90:	91 81       	ldd	r25, Z+1	; 0x01
    2d92:	01 97       	sbiw	r24, 0x01	; 1
    2d94:	f1 f7       	brne	.-4      	; 0x2d92 <LCD_displayCharacter+0x2f4>
    2d96:	fe 01       	movw	r30, r28
    2d98:	e9 5b       	subi	r30, 0xB9	; 185
    2d9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9c:	91 83       	std	Z+1, r25	; 0x01
    2d9e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    2da0:	fe 01       	movw	r30, r28
    2da2:	ed 59       	subi	r30, 0x9D	; 157
    2da4:	ff 4f       	sbci	r31, 0xFF	; 255
    2da6:	80 81       	ld	r24, Z
    2da8:	88 2f       	mov	r24, r24
    2daa:	90 e0       	ldi	r25, 0x00	; 0
    2dac:	80 71       	andi	r24, 0x10	; 16
    2dae:	90 70       	andi	r25, 0x00	; 0
    2db0:	95 95       	asr	r25
    2db2:	87 95       	ror	r24
    2db4:	95 95       	asr	r25
    2db6:	87 95       	ror	r24
    2db8:	95 95       	asr	r25
    2dba:	87 95       	ror	r24
    2dbc:	95 95       	asr	r25
    2dbe:	87 95       	ror	r24
    2dc0:	98 2f       	mov	r25, r24
    2dc2:	83 e0       	ldi	r24, 0x03	; 3
    2dc4:	64 e0       	ldi	r22, 0x04	; 4
    2dc6:	49 2f       	mov	r20, r25
    2dc8:	0e 94 c0 0c 	call	0x1980	; 0x1980 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    2dcc:	fe 01       	movw	r30, r28
    2dce:	ed 59       	subi	r30, 0x9D	; 157
    2dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd2:	80 81       	ld	r24, Z
    2dd4:	88 2f       	mov	r24, r24
    2dd6:	90 e0       	ldi	r25, 0x00	; 0
    2dd8:	80 72       	andi	r24, 0x20	; 32
    2dda:	90 70       	andi	r25, 0x00	; 0
    2ddc:	95 95       	asr	r25
    2dde:	87 95       	ror	r24
    2de0:	95 95       	asr	r25
    2de2:	87 95       	ror	r24
    2de4:	95 95       	asr	r25
    2de6:	87 95       	ror	r24
    2de8:	95 95       	asr	r25
    2dea:	87 95       	ror	r24
    2dec:	95 95       	asr	r25
    2dee:	87 95       	ror	r24
    2df0:	98 2f       	mov	r25, r24
    2df2:	83 e0       	ldi	r24, 0x03	; 3
    2df4:	65 e0       	ldi	r22, 0x05	; 5
    2df6:	49 2f       	mov	r20, r25
    2df8:	0e 94 c0 0c 	call	0x1980	; 0x1980 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    2dfc:	fe 01       	movw	r30, r28
    2dfe:	ed 59       	subi	r30, 0x9D	; 157
    2e00:	ff 4f       	sbci	r31, 0xFF	; 255
    2e02:	80 81       	ld	r24, Z
    2e04:	88 2f       	mov	r24, r24
    2e06:	90 e0       	ldi	r25, 0x00	; 0
    2e08:	80 74       	andi	r24, 0x40	; 64
    2e0a:	90 70       	andi	r25, 0x00	; 0
    2e0c:	08 2e       	mov	r0, r24
    2e0e:	89 2f       	mov	r24, r25
    2e10:	00 0c       	add	r0, r0
    2e12:	88 1f       	adc	r24, r24
    2e14:	99 0b       	sbc	r25, r25
    2e16:	00 0c       	add	r0, r0
    2e18:	88 1f       	adc	r24, r24
    2e1a:	99 1f       	adc	r25, r25
    2e1c:	98 2f       	mov	r25, r24
    2e1e:	83 e0       	ldi	r24, 0x03	; 3
    2e20:	66 e0       	ldi	r22, 0x06	; 6
    2e22:	49 2f       	mov	r20, r25
    2e24:	0e 94 c0 0c 	call	0x1980	; 0x1980 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    2e28:	fe 01       	movw	r30, r28
    2e2a:	ed 59       	subi	r30, 0x9D	; 157
    2e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2e:	80 81       	ld	r24, Z
    2e30:	98 2f       	mov	r25, r24
    2e32:	99 1f       	adc	r25, r25
    2e34:	99 27       	eor	r25, r25
    2e36:	99 1f       	adc	r25, r25
    2e38:	83 e0       	ldi	r24, 0x03	; 3
    2e3a:	67 e0       	ldi	r22, 0x07	; 7
    2e3c:	49 2f       	mov	r20, r25
    2e3e:	0e 94 c0 0c 	call	0x1980	; 0x1980 <GPIO_writePin>
    2e42:	fe 01       	movw	r30, r28
    2e44:	ed 5b       	subi	r30, 0xBD	; 189
    2e46:	ff 4f       	sbci	r31, 0xFF	; 255
    2e48:	80 e0       	ldi	r24, 0x00	; 0
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	a0 e8       	ldi	r26, 0x80	; 128
    2e4e:	bf e3       	ldi	r27, 0x3F	; 63
    2e50:	80 83       	st	Z, r24
    2e52:	91 83       	std	Z+1, r25	; 0x01
    2e54:	a2 83       	std	Z+2, r26	; 0x02
    2e56:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e58:	8e 01       	movw	r16, r28
    2e5a:	01 5c       	subi	r16, 0xC1	; 193
    2e5c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e5e:	fe 01       	movw	r30, r28
    2e60:	ed 5b       	subi	r30, 0xBD	; 189
    2e62:	ff 4f       	sbci	r31, 0xFF	; 255
    2e64:	60 81       	ld	r22, Z
    2e66:	71 81       	ldd	r23, Z+1	; 0x01
    2e68:	82 81       	ldd	r24, Z+2	; 0x02
    2e6a:	93 81       	ldd	r25, Z+3	; 0x03
    2e6c:	20 e0       	ldi	r18, 0x00	; 0
    2e6e:	30 e0       	ldi	r19, 0x00	; 0
    2e70:	4a e7       	ldi	r20, 0x7A	; 122
    2e72:	53 e4       	ldi	r21, 0x43	; 67
    2e74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e78:	dc 01       	movw	r26, r24
    2e7a:	cb 01       	movw	r24, r22
    2e7c:	f8 01       	movw	r30, r16
    2e7e:	80 83       	st	Z, r24
    2e80:	91 83       	std	Z+1, r25	; 0x01
    2e82:	a2 83       	std	Z+2, r26	; 0x02
    2e84:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e86:	fe 01       	movw	r30, r28
    2e88:	ff 96       	adiw	r30, 0x3f	; 63
    2e8a:	60 81       	ld	r22, Z
    2e8c:	71 81       	ldd	r23, Z+1	; 0x01
    2e8e:	82 81       	ldd	r24, Z+2	; 0x02
    2e90:	93 81       	ldd	r25, Z+3	; 0x03
    2e92:	20 e0       	ldi	r18, 0x00	; 0
    2e94:	30 e0       	ldi	r19, 0x00	; 0
    2e96:	40 e8       	ldi	r20, 0x80	; 128
    2e98:	5f e3       	ldi	r21, 0x3F	; 63
    2e9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e9e:	88 23       	and	r24, r24
    2ea0:	2c f4       	brge	.+10     	; 0x2eac <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2ea2:	81 e0       	ldi	r24, 0x01	; 1
    2ea4:	90 e0       	ldi	r25, 0x00	; 0
    2ea6:	9e af       	std	Y+62, r25	; 0x3e
    2ea8:	8d af       	std	Y+61, r24	; 0x3d
    2eaa:	46 c0       	rjmp	.+140    	; 0x2f38 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    2eac:	fe 01       	movw	r30, r28
    2eae:	ff 96       	adiw	r30, 0x3f	; 63
    2eb0:	60 81       	ld	r22, Z
    2eb2:	71 81       	ldd	r23, Z+1	; 0x01
    2eb4:	82 81       	ldd	r24, Z+2	; 0x02
    2eb6:	93 81       	ldd	r25, Z+3	; 0x03
    2eb8:	20 e0       	ldi	r18, 0x00	; 0
    2eba:	3f ef       	ldi	r19, 0xFF	; 255
    2ebc:	4f e7       	ldi	r20, 0x7F	; 127
    2ebe:	57 e4       	ldi	r21, 0x47	; 71
    2ec0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ec4:	18 16       	cp	r1, r24
    2ec6:	64 f5       	brge	.+88     	; 0x2f20 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ec8:	fe 01       	movw	r30, r28
    2eca:	ed 5b       	subi	r30, 0xBD	; 189
    2ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ece:	60 81       	ld	r22, Z
    2ed0:	71 81       	ldd	r23, Z+1	; 0x01
    2ed2:	82 81       	ldd	r24, Z+2	; 0x02
    2ed4:	93 81       	ldd	r25, Z+3	; 0x03
    2ed6:	20 e0       	ldi	r18, 0x00	; 0
    2ed8:	30 e0       	ldi	r19, 0x00	; 0
    2eda:	40 e2       	ldi	r20, 0x20	; 32
    2edc:	51 e4       	ldi	r21, 0x41	; 65
    2ede:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ee2:	dc 01       	movw	r26, r24
    2ee4:	cb 01       	movw	r24, r22
    2ee6:	bc 01       	movw	r22, r24
    2ee8:	cd 01       	movw	r24, r26
    2eea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eee:	dc 01       	movw	r26, r24
    2ef0:	cb 01       	movw	r24, r22
    2ef2:	9e af       	std	Y+62, r25	; 0x3e
    2ef4:	8d af       	std	Y+61, r24	; 0x3d
    2ef6:	0f c0       	rjmp	.+30     	; 0x2f16 <LCD_displayCharacter+0x478>
    2ef8:	89 e1       	ldi	r24, 0x19	; 25
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	9c af       	std	Y+60, r25	; 0x3c
    2efe:	8b af       	std	Y+59, r24	; 0x3b
    2f00:	8b ad       	ldd	r24, Y+59	; 0x3b
    2f02:	9c ad       	ldd	r25, Y+60	; 0x3c
    2f04:	01 97       	sbiw	r24, 0x01	; 1
    2f06:	f1 f7       	brne	.-4      	; 0x2f04 <LCD_displayCharacter+0x466>
    2f08:	9c af       	std	Y+60, r25	; 0x3c
    2f0a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f0c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f0e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f10:	01 97       	sbiw	r24, 0x01	; 1
    2f12:	9e af       	std	Y+62, r25	; 0x3e
    2f14:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f16:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f18:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f1a:	00 97       	sbiw	r24, 0x00	; 0
    2f1c:	69 f7       	brne	.-38     	; 0x2ef8 <LCD_displayCharacter+0x45a>
    2f1e:	16 c0       	rjmp	.+44     	; 0x2f4c <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f20:	fe 01       	movw	r30, r28
    2f22:	ff 96       	adiw	r30, 0x3f	; 63
    2f24:	60 81       	ld	r22, Z
    2f26:	71 81       	ldd	r23, Z+1	; 0x01
    2f28:	82 81       	ldd	r24, Z+2	; 0x02
    2f2a:	93 81       	ldd	r25, Z+3	; 0x03
    2f2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f30:	dc 01       	movw	r26, r24
    2f32:	cb 01       	movw	r24, r22
    2f34:	9e af       	std	Y+62, r25	; 0x3e
    2f36:	8d af       	std	Y+61, r24	; 0x3d
    2f38:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f3a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f3c:	9a af       	std	Y+58, r25	; 0x3a
    2f3e:	89 af       	std	Y+57, r24	; 0x39
    2f40:	89 ad       	ldd	r24, Y+57	; 0x39
    2f42:	9a ad       	ldd	r25, Y+58	; 0x3a
    2f44:	01 97       	sbiw	r24, 0x01	; 1
    2f46:	f1 f7       	brne	.-4      	; 0x2f44 <LCD_displayCharacter+0x4a6>
    2f48:	9a af       	std	Y+58, r25	; 0x3a
    2f4a:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2f4c:	81 e0       	ldi	r24, 0x01	; 1
    2f4e:	62 e0       	ldi	r22, 0x02	; 2
    2f50:	40 e0       	ldi	r20, 0x00	; 0
    2f52:	0e 94 c0 0c 	call	0x1980	; 0x1980 <GPIO_writePin>
    2f56:	80 e0       	ldi	r24, 0x00	; 0
    2f58:	90 e0       	ldi	r25, 0x00	; 0
    2f5a:	a0 e8       	ldi	r26, 0x80	; 128
    2f5c:	bf e3       	ldi	r27, 0x3F	; 63
    2f5e:	8d ab       	std	Y+53, r24	; 0x35
    2f60:	9e ab       	std	Y+54, r25	; 0x36
    2f62:	af ab       	std	Y+55, r26	; 0x37
    2f64:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f66:	6d a9       	ldd	r22, Y+53	; 0x35
    2f68:	7e a9       	ldd	r23, Y+54	; 0x36
    2f6a:	8f a9       	ldd	r24, Y+55	; 0x37
    2f6c:	98 ad       	ldd	r25, Y+56	; 0x38
    2f6e:	20 e0       	ldi	r18, 0x00	; 0
    2f70:	30 e0       	ldi	r19, 0x00	; 0
    2f72:	4a e7       	ldi	r20, 0x7A	; 122
    2f74:	53 e4       	ldi	r21, 0x43	; 67
    2f76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f7a:	dc 01       	movw	r26, r24
    2f7c:	cb 01       	movw	r24, r22
    2f7e:	89 ab       	std	Y+49, r24	; 0x31
    2f80:	9a ab       	std	Y+50, r25	; 0x32
    2f82:	ab ab       	std	Y+51, r26	; 0x33
    2f84:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2f86:	69 a9       	ldd	r22, Y+49	; 0x31
    2f88:	7a a9       	ldd	r23, Y+50	; 0x32
    2f8a:	8b a9       	ldd	r24, Y+51	; 0x33
    2f8c:	9c a9       	ldd	r25, Y+52	; 0x34
    2f8e:	20 e0       	ldi	r18, 0x00	; 0
    2f90:	30 e0       	ldi	r19, 0x00	; 0
    2f92:	40 e8       	ldi	r20, 0x80	; 128
    2f94:	5f e3       	ldi	r21, 0x3F	; 63
    2f96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f9a:	88 23       	and	r24, r24
    2f9c:	2c f4       	brge	.+10     	; 0x2fa8 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    2f9e:	81 e0       	ldi	r24, 0x01	; 1
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	98 ab       	std	Y+48, r25	; 0x30
    2fa4:	8f a7       	std	Y+47, r24	; 0x2f
    2fa6:	3f c0       	rjmp	.+126    	; 0x3026 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2fa8:	69 a9       	ldd	r22, Y+49	; 0x31
    2faa:	7a a9       	ldd	r23, Y+50	; 0x32
    2fac:	8b a9       	ldd	r24, Y+51	; 0x33
    2fae:	9c a9       	ldd	r25, Y+52	; 0x34
    2fb0:	20 e0       	ldi	r18, 0x00	; 0
    2fb2:	3f ef       	ldi	r19, 0xFF	; 255
    2fb4:	4f e7       	ldi	r20, 0x7F	; 127
    2fb6:	57 e4       	ldi	r21, 0x47	; 71
    2fb8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2fbc:	18 16       	cp	r1, r24
    2fbe:	4c f5       	brge	.+82     	; 0x3012 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fc0:	6d a9       	ldd	r22, Y+53	; 0x35
    2fc2:	7e a9       	ldd	r23, Y+54	; 0x36
    2fc4:	8f a9       	ldd	r24, Y+55	; 0x37
    2fc6:	98 ad       	ldd	r25, Y+56	; 0x38
    2fc8:	20 e0       	ldi	r18, 0x00	; 0
    2fca:	30 e0       	ldi	r19, 0x00	; 0
    2fcc:	40 e2       	ldi	r20, 0x20	; 32
    2fce:	51 e4       	ldi	r21, 0x41	; 65
    2fd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd4:	dc 01       	movw	r26, r24
    2fd6:	cb 01       	movw	r24, r22
    2fd8:	bc 01       	movw	r22, r24
    2fda:	cd 01       	movw	r24, r26
    2fdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fe0:	dc 01       	movw	r26, r24
    2fe2:	cb 01       	movw	r24, r22
    2fe4:	98 ab       	std	Y+48, r25	; 0x30
    2fe6:	8f a7       	std	Y+47, r24	; 0x2f
    2fe8:	0f c0       	rjmp	.+30     	; 0x3008 <LCD_displayCharacter+0x56a>
    2fea:	89 e1       	ldi	r24, 0x19	; 25
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	9e a7       	std	Y+46, r25	; 0x2e
    2ff0:	8d a7       	std	Y+45, r24	; 0x2d
    2ff2:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ff4:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ff6:	01 97       	sbiw	r24, 0x01	; 1
    2ff8:	f1 f7       	brne	.-4      	; 0x2ff6 <LCD_displayCharacter+0x558>
    2ffa:	9e a7       	std	Y+46, r25	; 0x2e
    2ffc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ffe:	8f a5       	ldd	r24, Y+47	; 0x2f
    3000:	98 a9       	ldd	r25, Y+48	; 0x30
    3002:	01 97       	sbiw	r24, 0x01	; 1
    3004:	98 ab       	std	Y+48, r25	; 0x30
    3006:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3008:	8f a5       	ldd	r24, Y+47	; 0x2f
    300a:	98 a9       	ldd	r25, Y+48	; 0x30
    300c:	00 97       	sbiw	r24, 0x00	; 0
    300e:	69 f7       	brne	.-38     	; 0x2fea <LCD_displayCharacter+0x54c>
    3010:	14 c0       	rjmp	.+40     	; 0x303a <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3012:	69 a9       	ldd	r22, Y+49	; 0x31
    3014:	7a a9       	ldd	r23, Y+50	; 0x32
    3016:	8b a9       	ldd	r24, Y+51	; 0x33
    3018:	9c a9       	ldd	r25, Y+52	; 0x34
    301a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    301e:	dc 01       	movw	r26, r24
    3020:	cb 01       	movw	r24, r22
    3022:	98 ab       	std	Y+48, r25	; 0x30
    3024:	8f a7       	std	Y+47, r24	; 0x2f
    3026:	8f a5       	ldd	r24, Y+47	; 0x2f
    3028:	98 a9       	ldd	r25, Y+48	; 0x30
    302a:	9c a7       	std	Y+44, r25	; 0x2c
    302c:	8b a7       	std	Y+43, r24	; 0x2b
    302e:	8b a5       	ldd	r24, Y+43	; 0x2b
    3030:	9c a5       	ldd	r25, Y+44	; 0x2c
    3032:	01 97       	sbiw	r24, 0x01	; 1
    3034:	f1 f7       	brne	.-4      	; 0x3032 <LCD_displayCharacter+0x594>
    3036:	9c a7       	std	Y+44, r25	; 0x2c
    3038:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    303a:	81 e0       	ldi	r24, 0x01	; 1
    303c:	62 e0       	ldi	r22, 0x02	; 2
    303e:	41 e0       	ldi	r20, 0x01	; 1
    3040:	0e 94 c0 0c 	call	0x1980	; 0x1980 <GPIO_writePin>
    3044:	80 e0       	ldi	r24, 0x00	; 0
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	a0 e8       	ldi	r26, 0x80	; 128
    304a:	bf e3       	ldi	r27, 0x3F	; 63
    304c:	8f a3       	std	Y+39, r24	; 0x27
    304e:	98 a7       	std	Y+40, r25	; 0x28
    3050:	a9 a7       	std	Y+41, r26	; 0x29
    3052:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3054:	6f a1       	ldd	r22, Y+39	; 0x27
    3056:	78 a5       	ldd	r23, Y+40	; 0x28
    3058:	89 a5       	ldd	r24, Y+41	; 0x29
    305a:	9a a5       	ldd	r25, Y+42	; 0x2a
    305c:	20 e0       	ldi	r18, 0x00	; 0
    305e:	30 e0       	ldi	r19, 0x00	; 0
    3060:	4a e7       	ldi	r20, 0x7A	; 122
    3062:	53 e4       	ldi	r21, 0x43	; 67
    3064:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3068:	dc 01       	movw	r26, r24
    306a:	cb 01       	movw	r24, r22
    306c:	8b a3       	std	Y+35, r24	; 0x23
    306e:	9c a3       	std	Y+36, r25	; 0x24
    3070:	ad a3       	std	Y+37, r26	; 0x25
    3072:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3074:	6b a1       	ldd	r22, Y+35	; 0x23
    3076:	7c a1       	ldd	r23, Y+36	; 0x24
    3078:	8d a1       	ldd	r24, Y+37	; 0x25
    307a:	9e a1       	ldd	r25, Y+38	; 0x26
    307c:	20 e0       	ldi	r18, 0x00	; 0
    307e:	30 e0       	ldi	r19, 0x00	; 0
    3080:	40 e8       	ldi	r20, 0x80	; 128
    3082:	5f e3       	ldi	r21, 0x3F	; 63
    3084:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3088:	88 23       	and	r24, r24
    308a:	2c f4       	brge	.+10     	; 0x3096 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    308c:	81 e0       	ldi	r24, 0x01	; 1
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	9a a3       	std	Y+34, r25	; 0x22
    3092:	89 a3       	std	Y+33, r24	; 0x21
    3094:	3f c0       	rjmp	.+126    	; 0x3114 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    3096:	6b a1       	ldd	r22, Y+35	; 0x23
    3098:	7c a1       	ldd	r23, Y+36	; 0x24
    309a:	8d a1       	ldd	r24, Y+37	; 0x25
    309c:	9e a1       	ldd	r25, Y+38	; 0x26
    309e:	20 e0       	ldi	r18, 0x00	; 0
    30a0:	3f ef       	ldi	r19, 0xFF	; 255
    30a2:	4f e7       	ldi	r20, 0x7F	; 127
    30a4:	57 e4       	ldi	r21, 0x47	; 71
    30a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30aa:	18 16       	cp	r1, r24
    30ac:	4c f5       	brge	.+82     	; 0x3100 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ae:	6f a1       	ldd	r22, Y+39	; 0x27
    30b0:	78 a5       	ldd	r23, Y+40	; 0x28
    30b2:	89 a5       	ldd	r24, Y+41	; 0x29
    30b4:	9a a5       	ldd	r25, Y+42	; 0x2a
    30b6:	20 e0       	ldi	r18, 0x00	; 0
    30b8:	30 e0       	ldi	r19, 0x00	; 0
    30ba:	40 e2       	ldi	r20, 0x20	; 32
    30bc:	51 e4       	ldi	r21, 0x41	; 65
    30be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30c2:	dc 01       	movw	r26, r24
    30c4:	cb 01       	movw	r24, r22
    30c6:	bc 01       	movw	r22, r24
    30c8:	cd 01       	movw	r24, r26
    30ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ce:	dc 01       	movw	r26, r24
    30d0:	cb 01       	movw	r24, r22
    30d2:	9a a3       	std	Y+34, r25	; 0x22
    30d4:	89 a3       	std	Y+33, r24	; 0x21
    30d6:	0f c0       	rjmp	.+30     	; 0x30f6 <LCD_displayCharacter+0x658>
    30d8:	89 e1       	ldi	r24, 0x19	; 25
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	98 a3       	std	Y+32, r25	; 0x20
    30de:	8f 8f       	std	Y+31, r24	; 0x1f
    30e0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    30e2:	98 a1       	ldd	r25, Y+32	; 0x20
    30e4:	01 97       	sbiw	r24, 0x01	; 1
    30e6:	f1 f7       	brne	.-4      	; 0x30e4 <LCD_displayCharacter+0x646>
    30e8:	98 a3       	std	Y+32, r25	; 0x20
    30ea:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30ec:	89 a1       	ldd	r24, Y+33	; 0x21
    30ee:	9a a1       	ldd	r25, Y+34	; 0x22
    30f0:	01 97       	sbiw	r24, 0x01	; 1
    30f2:	9a a3       	std	Y+34, r25	; 0x22
    30f4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30f6:	89 a1       	ldd	r24, Y+33	; 0x21
    30f8:	9a a1       	ldd	r25, Y+34	; 0x22
    30fa:	00 97       	sbiw	r24, 0x00	; 0
    30fc:	69 f7       	brne	.-38     	; 0x30d8 <LCD_displayCharacter+0x63a>
    30fe:	14 c0       	rjmp	.+40     	; 0x3128 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3100:	6b a1       	ldd	r22, Y+35	; 0x23
    3102:	7c a1       	ldd	r23, Y+36	; 0x24
    3104:	8d a1       	ldd	r24, Y+37	; 0x25
    3106:	9e a1       	ldd	r25, Y+38	; 0x26
    3108:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    310c:	dc 01       	movw	r26, r24
    310e:	cb 01       	movw	r24, r22
    3110:	9a a3       	std	Y+34, r25	; 0x22
    3112:	89 a3       	std	Y+33, r24	; 0x21
    3114:	89 a1       	ldd	r24, Y+33	; 0x21
    3116:	9a a1       	ldd	r25, Y+34	; 0x22
    3118:	9e 8f       	std	Y+30, r25	; 0x1e
    311a:	8d 8f       	std	Y+29, r24	; 0x1d
    311c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    311e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3120:	01 97       	sbiw	r24, 0x01	; 1
    3122:	f1 f7       	brne	.-4      	; 0x3120 <LCD_displayCharacter+0x682>
    3124:	9e 8f       	std	Y+30, r25	; 0x1e
    3126:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    3128:	fe 01       	movw	r30, r28
    312a:	ed 59       	subi	r30, 0x9D	; 157
    312c:	ff 4f       	sbci	r31, 0xFF	; 255
    312e:	80 81       	ld	r24, Z
    3130:	98 2f       	mov	r25, r24
    3132:	91 70       	andi	r25, 0x01	; 1
    3134:	83 e0       	ldi	r24, 0x03	; 3
    3136:	64 e0       	ldi	r22, 0x04	; 4
    3138:	49 2f       	mov	r20, r25
    313a:	0e 94 c0 0c 	call	0x1980	; 0x1980 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    313e:	fe 01       	movw	r30, r28
    3140:	ed 59       	subi	r30, 0x9D	; 157
    3142:	ff 4f       	sbci	r31, 0xFF	; 255
    3144:	80 81       	ld	r24, Z
    3146:	88 2f       	mov	r24, r24
    3148:	90 e0       	ldi	r25, 0x00	; 0
    314a:	82 70       	andi	r24, 0x02	; 2
    314c:	90 70       	andi	r25, 0x00	; 0
    314e:	95 95       	asr	r25
    3150:	87 95       	ror	r24
    3152:	98 2f       	mov	r25, r24
    3154:	83 e0       	ldi	r24, 0x03	; 3
    3156:	65 e0       	ldi	r22, 0x05	; 5
    3158:	49 2f       	mov	r20, r25
    315a:	0e 94 c0 0c 	call	0x1980	; 0x1980 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    315e:	fe 01       	movw	r30, r28
    3160:	ed 59       	subi	r30, 0x9D	; 157
    3162:	ff 4f       	sbci	r31, 0xFF	; 255
    3164:	80 81       	ld	r24, Z
    3166:	88 2f       	mov	r24, r24
    3168:	90 e0       	ldi	r25, 0x00	; 0
    316a:	84 70       	andi	r24, 0x04	; 4
    316c:	90 70       	andi	r25, 0x00	; 0
    316e:	95 95       	asr	r25
    3170:	87 95       	ror	r24
    3172:	95 95       	asr	r25
    3174:	87 95       	ror	r24
    3176:	98 2f       	mov	r25, r24
    3178:	83 e0       	ldi	r24, 0x03	; 3
    317a:	66 e0       	ldi	r22, 0x06	; 6
    317c:	49 2f       	mov	r20, r25
    317e:	0e 94 c0 0c 	call	0x1980	; 0x1980 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    3182:	fe 01       	movw	r30, r28
    3184:	ed 59       	subi	r30, 0x9D	; 157
    3186:	ff 4f       	sbci	r31, 0xFF	; 255
    3188:	80 81       	ld	r24, Z
    318a:	88 2f       	mov	r24, r24
    318c:	90 e0       	ldi	r25, 0x00	; 0
    318e:	88 70       	andi	r24, 0x08	; 8
    3190:	90 70       	andi	r25, 0x00	; 0
    3192:	95 95       	asr	r25
    3194:	87 95       	ror	r24
    3196:	95 95       	asr	r25
    3198:	87 95       	ror	r24
    319a:	95 95       	asr	r25
    319c:	87 95       	ror	r24
    319e:	98 2f       	mov	r25, r24
    31a0:	83 e0       	ldi	r24, 0x03	; 3
    31a2:	67 e0       	ldi	r22, 0x07	; 7
    31a4:	49 2f       	mov	r20, r25
    31a6:	0e 94 c0 0c 	call	0x1980	; 0x1980 <GPIO_writePin>
    31aa:	80 e0       	ldi	r24, 0x00	; 0
    31ac:	90 e0       	ldi	r25, 0x00	; 0
    31ae:	a0 e8       	ldi	r26, 0x80	; 128
    31b0:	bf e3       	ldi	r27, 0x3F	; 63
    31b2:	89 8f       	std	Y+25, r24	; 0x19
    31b4:	9a 8f       	std	Y+26, r25	; 0x1a
    31b6:	ab 8f       	std	Y+27, r26	; 0x1b
    31b8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31ba:	69 8d       	ldd	r22, Y+25	; 0x19
    31bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31c2:	20 e0       	ldi	r18, 0x00	; 0
    31c4:	30 e0       	ldi	r19, 0x00	; 0
    31c6:	4a e7       	ldi	r20, 0x7A	; 122
    31c8:	53 e4       	ldi	r21, 0x43	; 67
    31ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ce:	dc 01       	movw	r26, r24
    31d0:	cb 01       	movw	r24, r22
    31d2:	8d 8b       	std	Y+21, r24	; 0x15
    31d4:	9e 8b       	std	Y+22, r25	; 0x16
    31d6:	af 8b       	std	Y+23, r26	; 0x17
    31d8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    31da:	6d 89       	ldd	r22, Y+21	; 0x15
    31dc:	7e 89       	ldd	r23, Y+22	; 0x16
    31de:	8f 89       	ldd	r24, Y+23	; 0x17
    31e0:	98 8d       	ldd	r25, Y+24	; 0x18
    31e2:	20 e0       	ldi	r18, 0x00	; 0
    31e4:	30 e0       	ldi	r19, 0x00	; 0
    31e6:	40 e8       	ldi	r20, 0x80	; 128
    31e8:	5f e3       	ldi	r21, 0x3F	; 63
    31ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31ee:	88 23       	and	r24, r24
    31f0:	2c f4       	brge	.+10     	; 0x31fc <LCD_displayCharacter+0x75e>
		__ticks = 1;
    31f2:	81 e0       	ldi	r24, 0x01	; 1
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	9c 8b       	std	Y+20, r25	; 0x14
    31f8:	8b 8b       	std	Y+19, r24	; 0x13
    31fa:	3f c0       	rjmp	.+126    	; 0x327a <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    31fc:	6d 89       	ldd	r22, Y+21	; 0x15
    31fe:	7e 89       	ldd	r23, Y+22	; 0x16
    3200:	8f 89       	ldd	r24, Y+23	; 0x17
    3202:	98 8d       	ldd	r25, Y+24	; 0x18
    3204:	20 e0       	ldi	r18, 0x00	; 0
    3206:	3f ef       	ldi	r19, 0xFF	; 255
    3208:	4f e7       	ldi	r20, 0x7F	; 127
    320a:	57 e4       	ldi	r21, 0x47	; 71
    320c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3210:	18 16       	cp	r1, r24
    3212:	4c f5       	brge	.+82     	; 0x3266 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3214:	69 8d       	ldd	r22, Y+25	; 0x19
    3216:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3218:	8b 8d       	ldd	r24, Y+27	; 0x1b
    321a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    321c:	20 e0       	ldi	r18, 0x00	; 0
    321e:	30 e0       	ldi	r19, 0x00	; 0
    3220:	40 e2       	ldi	r20, 0x20	; 32
    3222:	51 e4       	ldi	r21, 0x41	; 65
    3224:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3228:	dc 01       	movw	r26, r24
    322a:	cb 01       	movw	r24, r22
    322c:	bc 01       	movw	r22, r24
    322e:	cd 01       	movw	r24, r26
    3230:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3234:	dc 01       	movw	r26, r24
    3236:	cb 01       	movw	r24, r22
    3238:	9c 8b       	std	Y+20, r25	; 0x14
    323a:	8b 8b       	std	Y+19, r24	; 0x13
    323c:	0f c0       	rjmp	.+30     	; 0x325c <LCD_displayCharacter+0x7be>
    323e:	89 e1       	ldi	r24, 0x19	; 25
    3240:	90 e0       	ldi	r25, 0x00	; 0
    3242:	9a 8b       	std	Y+18, r25	; 0x12
    3244:	89 8b       	std	Y+17, r24	; 0x11
    3246:	89 89       	ldd	r24, Y+17	; 0x11
    3248:	9a 89       	ldd	r25, Y+18	; 0x12
    324a:	01 97       	sbiw	r24, 0x01	; 1
    324c:	f1 f7       	brne	.-4      	; 0x324a <LCD_displayCharacter+0x7ac>
    324e:	9a 8b       	std	Y+18, r25	; 0x12
    3250:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3252:	8b 89       	ldd	r24, Y+19	; 0x13
    3254:	9c 89       	ldd	r25, Y+20	; 0x14
    3256:	01 97       	sbiw	r24, 0x01	; 1
    3258:	9c 8b       	std	Y+20, r25	; 0x14
    325a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    325c:	8b 89       	ldd	r24, Y+19	; 0x13
    325e:	9c 89       	ldd	r25, Y+20	; 0x14
    3260:	00 97       	sbiw	r24, 0x00	; 0
    3262:	69 f7       	brne	.-38     	; 0x323e <LCD_displayCharacter+0x7a0>
    3264:	14 c0       	rjmp	.+40     	; 0x328e <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3266:	6d 89       	ldd	r22, Y+21	; 0x15
    3268:	7e 89       	ldd	r23, Y+22	; 0x16
    326a:	8f 89       	ldd	r24, Y+23	; 0x17
    326c:	98 8d       	ldd	r25, Y+24	; 0x18
    326e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3272:	dc 01       	movw	r26, r24
    3274:	cb 01       	movw	r24, r22
    3276:	9c 8b       	std	Y+20, r25	; 0x14
    3278:	8b 8b       	std	Y+19, r24	; 0x13
    327a:	8b 89       	ldd	r24, Y+19	; 0x13
    327c:	9c 89       	ldd	r25, Y+20	; 0x14
    327e:	98 8b       	std	Y+16, r25	; 0x10
    3280:	8f 87       	std	Y+15, r24	; 0x0f
    3282:	8f 85       	ldd	r24, Y+15	; 0x0f
    3284:	98 89       	ldd	r25, Y+16	; 0x10
    3286:	01 97       	sbiw	r24, 0x01	; 1
    3288:	f1 f7       	brne	.-4      	; 0x3286 <LCD_displayCharacter+0x7e8>
    328a:	98 8b       	std	Y+16, r25	; 0x10
    328c:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    328e:	81 e0       	ldi	r24, 0x01	; 1
    3290:	62 e0       	ldi	r22, 0x02	; 2
    3292:	40 e0       	ldi	r20, 0x00	; 0
    3294:	0e 94 c0 0c 	call	0x1980	; 0x1980 <GPIO_writePin>
    3298:	80 e0       	ldi	r24, 0x00	; 0
    329a:	90 e0       	ldi	r25, 0x00	; 0
    329c:	a0 e8       	ldi	r26, 0x80	; 128
    329e:	bf e3       	ldi	r27, 0x3F	; 63
    32a0:	8b 87       	std	Y+11, r24	; 0x0b
    32a2:	9c 87       	std	Y+12, r25	; 0x0c
    32a4:	ad 87       	std	Y+13, r26	; 0x0d
    32a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    32aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    32ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    32ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    32b0:	20 e0       	ldi	r18, 0x00	; 0
    32b2:	30 e0       	ldi	r19, 0x00	; 0
    32b4:	4a e7       	ldi	r20, 0x7A	; 122
    32b6:	53 e4       	ldi	r21, 0x43	; 67
    32b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32bc:	dc 01       	movw	r26, r24
    32be:	cb 01       	movw	r24, r22
    32c0:	8f 83       	std	Y+7, r24	; 0x07
    32c2:	98 87       	std	Y+8, r25	; 0x08
    32c4:	a9 87       	std	Y+9, r26	; 0x09
    32c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32c8:	6f 81       	ldd	r22, Y+7	; 0x07
    32ca:	78 85       	ldd	r23, Y+8	; 0x08
    32cc:	89 85       	ldd	r24, Y+9	; 0x09
    32ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    32d0:	20 e0       	ldi	r18, 0x00	; 0
    32d2:	30 e0       	ldi	r19, 0x00	; 0
    32d4:	40 e8       	ldi	r20, 0x80	; 128
    32d6:	5f e3       	ldi	r21, 0x3F	; 63
    32d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32dc:	88 23       	and	r24, r24
    32de:	2c f4       	brge	.+10     	; 0x32ea <LCD_displayCharacter+0x84c>
		__ticks = 1;
    32e0:	81 e0       	ldi	r24, 0x01	; 1
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	9e 83       	std	Y+6, r25	; 0x06
    32e6:	8d 83       	std	Y+5, r24	; 0x05
    32e8:	3f c0       	rjmp	.+126    	; 0x3368 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    32ea:	6f 81       	ldd	r22, Y+7	; 0x07
    32ec:	78 85       	ldd	r23, Y+8	; 0x08
    32ee:	89 85       	ldd	r24, Y+9	; 0x09
    32f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    32f2:	20 e0       	ldi	r18, 0x00	; 0
    32f4:	3f ef       	ldi	r19, 0xFF	; 255
    32f6:	4f e7       	ldi	r20, 0x7F	; 127
    32f8:	57 e4       	ldi	r21, 0x47	; 71
    32fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32fe:	18 16       	cp	r1, r24
    3300:	4c f5       	brge	.+82     	; 0x3354 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3302:	6b 85       	ldd	r22, Y+11	; 0x0b
    3304:	7c 85       	ldd	r23, Y+12	; 0x0c
    3306:	8d 85       	ldd	r24, Y+13	; 0x0d
    3308:	9e 85       	ldd	r25, Y+14	; 0x0e
    330a:	20 e0       	ldi	r18, 0x00	; 0
    330c:	30 e0       	ldi	r19, 0x00	; 0
    330e:	40 e2       	ldi	r20, 0x20	; 32
    3310:	51 e4       	ldi	r21, 0x41	; 65
    3312:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3316:	dc 01       	movw	r26, r24
    3318:	cb 01       	movw	r24, r22
    331a:	bc 01       	movw	r22, r24
    331c:	cd 01       	movw	r24, r26
    331e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3322:	dc 01       	movw	r26, r24
    3324:	cb 01       	movw	r24, r22
    3326:	9e 83       	std	Y+6, r25	; 0x06
    3328:	8d 83       	std	Y+5, r24	; 0x05
    332a:	0f c0       	rjmp	.+30     	; 0x334a <LCD_displayCharacter+0x8ac>
    332c:	89 e1       	ldi	r24, 0x19	; 25
    332e:	90 e0       	ldi	r25, 0x00	; 0
    3330:	9c 83       	std	Y+4, r25	; 0x04
    3332:	8b 83       	std	Y+3, r24	; 0x03
    3334:	8b 81       	ldd	r24, Y+3	; 0x03
    3336:	9c 81       	ldd	r25, Y+4	; 0x04
    3338:	01 97       	sbiw	r24, 0x01	; 1
    333a:	f1 f7       	brne	.-4      	; 0x3338 <LCD_displayCharacter+0x89a>
    333c:	9c 83       	std	Y+4, r25	; 0x04
    333e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3340:	8d 81       	ldd	r24, Y+5	; 0x05
    3342:	9e 81       	ldd	r25, Y+6	; 0x06
    3344:	01 97       	sbiw	r24, 0x01	; 1
    3346:	9e 83       	std	Y+6, r25	; 0x06
    3348:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    334a:	8d 81       	ldd	r24, Y+5	; 0x05
    334c:	9e 81       	ldd	r25, Y+6	; 0x06
    334e:	00 97       	sbiw	r24, 0x00	; 0
    3350:	69 f7       	brne	.-38     	; 0x332c <LCD_displayCharacter+0x88e>
    3352:	14 c0       	rjmp	.+40     	; 0x337c <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3354:	6f 81       	ldd	r22, Y+7	; 0x07
    3356:	78 85       	ldd	r23, Y+8	; 0x08
    3358:	89 85       	ldd	r24, Y+9	; 0x09
    335a:	9a 85       	ldd	r25, Y+10	; 0x0a
    335c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3360:	dc 01       	movw	r26, r24
    3362:	cb 01       	movw	r24, r22
    3364:	9e 83       	std	Y+6, r25	; 0x06
    3366:	8d 83       	std	Y+5, r24	; 0x05
    3368:	8d 81       	ldd	r24, Y+5	; 0x05
    336a:	9e 81       	ldd	r25, Y+6	; 0x06
    336c:	9a 83       	std	Y+2, r25	; 0x02
    336e:	89 83       	std	Y+1, r24	; 0x01
    3370:	89 81       	ldd	r24, Y+1	; 0x01
    3372:	9a 81       	ldd	r25, Y+2	; 0x02
    3374:	01 97       	sbiw	r24, 0x01	; 1
    3376:	f1 f7       	brne	.-4      	; 0x3374 <LCD_displayCharacter+0x8d6>
    3378:	9a 83       	std	Y+2, r25	; 0x02
    337a:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    337c:	cd 59       	subi	r28, 0x9D	; 157
    337e:	df 4f       	sbci	r29, 0xFF	; 255
    3380:	0f b6       	in	r0, 0x3f	; 63
    3382:	f8 94       	cli
    3384:	de bf       	out	0x3e, r29	; 62
    3386:	0f be       	out	0x3f, r0	; 63
    3388:	cd bf       	out	0x3d, r28	; 61
    338a:	cf 91       	pop	r28
    338c:	df 91       	pop	r29
    338e:	1f 91       	pop	r17
    3390:	0f 91       	pop	r16
    3392:	08 95       	ret

00003394 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    3394:	df 93       	push	r29
    3396:	cf 93       	push	r28
    3398:	00 d0       	rcall	.+0      	; 0x339a <LCD_displayString+0x6>
    339a:	0f 92       	push	r0
    339c:	cd b7       	in	r28, 0x3d	; 61
    339e:	de b7       	in	r29, 0x3e	; 62
    33a0:	9b 83       	std	Y+3, r25	; 0x03
    33a2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    33a4:	19 82       	std	Y+1, r1	; 0x01
    33a6:	0e c0       	rjmp	.+28     	; 0x33c4 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    33a8:	89 81       	ldd	r24, Y+1	; 0x01
    33aa:	28 2f       	mov	r18, r24
    33ac:	30 e0       	ldi	r19, 0x00	; 0
    33ae:	8a 81       	ldd	r24, Y+2	; 0x02
    33b0:	9b 81       	ldd	r25, Y+3	; 0x03
    33b2:	fc 01       	movw	r30, r24
    33b4:	e2 0f       	add	r30, r18
    33b6:	f3 1f       	adc	r31, r19
    33b8:	80 81       	ld	r24, Z
    33ba:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <LCD_displayCharacter>
		i++;
    33be:	89 81       	ldd	r24, Y+1	; 0x01
    33c0:	8f 5f       	subi	r24, 0xFF	; 255
    33c2:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    33c4:	89 81       	ldd	r24, Y+1	; 0x01
    33c6:	28 2f       	mov	r18, r24
    33c8:	30 e0       	ldi	r19, 0x00	; 0
    33ca:	8a 81       	ldd	r24, Y+2	; 0x02
    33cc:	9b 81       	ldd	r25, Y+3	; 0x03
    33ce:	fc 01       	movw	r30, r24
    33d0:	e2 0f       	add	r30, r18
    33d2:	f3 1f       	adc	r31, r19
    33d4:	80 81       	ld	r24, Z
    33d6:	88 23       	and	r24, r24
    33d8:	39 f7       	brne	.-50     	; 0x33a8 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    33da:	0f 90       	pop	r0
    33dc:	0f 90       	pop	r0
    33de:	0f 90       	pop	r0
    33e0:	cf 91       	pop	r28
    33e2:	df 91       	pop	r29
    33e4:	08 95       	ret

000033e6 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    33e6:	df 93       	push	r29
    33e8:	cf 93       	push	r28
    33ea:	00 d0       	rcall	.+0      	; 0x33ec <LCD_moveCursor+0x6>
    33ec:	00 d0       	rcall	.+0      	; 0x33ee <LCD_moveCursor+0x8>
    33ee:	0f 92       	push	r0
    33f0:	cd b7       	in	r28, 0x3d	; 61
    33f2:	de b7       	in	r29, 0x3e	; 62
    33f4:	8a 83       	std	Y+2, r24	; 0x02
    33f6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    33f8:	8a 81       	ldd	r24, Y+2	; 0x02
    33fa:	28 2f       	mov	r18, r24
    33fc:	30 e0       	ldi	r19, 0x00	; 0
    33fe:	3d 83       	std	Y+5, r19	; 0x05
    3400:	2c 83       	std	Y+4, r18	; 0x04
    3402:	8c 81       	ldd	r24, Y+4	; 0x04
    3404:	9d 81       	ldd	r25, Y+5	; 0x05
    3406:	81 30       	cpi	r24, 0x01	; 1
    3408:	91 05       	cpc	r25, r1
    340a:	c1 f0       	breq	.+48     	; 0x343c <LCD_moveCursor+0x56>
    340c:	2c 81       	ldd	r18, Y+4	; 0x04
    340e:	3d 81       	ldd	r19, Y+5	; 0x05
    3410:	22 30       	cpi	r18, 0x02	; 2
    3412:	31 05       	cpc	r19, r1
    3414:	2c f4       	brge	.+10     	; 0x3420 <LCD_moveCursor+0x3a>
    3416:	8c 81       	ldd	r24, Y+4	; 0x04
    3418:	9d 81       	ldd	r25, Y+5	; 0x05
    341a:	00 97       	sbiw	r24, 0x00	; 0
    341c:	61 f0       	breq	.+24     	; 0x3436 <LCD_moveCursor+0x50>
    341e:	19 c0       	rjmp	.+50     	; 0x3452 <LCD_moveCursor+0x6c>
    3420:	2c 81       	ldd	r18, Y+4	; 0x04
    3422:	3d 81       	ldd	r19, Y+5	; 0x05
    3424:	22 30       	cpi	r18, 0x02	; 2
    3426:	31 05       	cpc	r19, r1
    3428:	69 f0       	breq	.+26     	; 0x3444 <LCD_moveCursor+0x5e>
    342a:	8c 81       	ldd	r24, Y+4	; 0x04
    342c:	9d 81       	ldd	r25, Y+5	; 0x05
    342e:	83 30       	cpi	r24, 0x03	; 3
    3430:	91 05       	cpc	r25, r1
    3432:	61 f0       	breq	.+24     	; 0x344c <LCD_moveCursor+0x66>
    3434:	0e c0       	rjmp	.+28     	; 0x3452 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    3436:	8b 81       	ldd	r24, Y+3	; 0x03
    3438:	89 83       	std	Y+1, r24	; 0x01
    343a:	0b c0       	rjmp	.+22     	; 0x3452 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    343c:	8b 81       	ldd	r24, Y+3	; 0x03
    343e:	80 5c       	subi	r24, 0xC0	; 192
    3440:	89 83       	std	Y+1, r24	; 0x01
    3442:	07 c0       	rjmp	.+14     	; 0x3452 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    3444:	8b 81       	ldd	r24, Y+3	; 0x03
    3446:	80 5f       	subi	r24, 0xF0	; 240
    3448:	89 83       	std	Y+1, r24	; 0x01
    344a:	03 c0       	rjmp	.+6      	; 0x3452 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    344c:	8b 81       	ldd	r24, Y+3	; 0x03
    344e:	80 5b       	subi	r24, 0xB0	; 176
    3450:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    3452:	89 81       	ldd	r24, Y+1	; 0x01
    3454:	80 68       	ori	r24, 0x80	; 128
    3456:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <LCD_sendCommand>
}
    345a:	0f 90       	pop	r0
    345c:	0f 90       	pop	r0
    345e:	0f 90       	pop	r0
    3460:	0f 90       	pop	r0
    3462:	0f 90       	pop	r0
    3464:	cf 91       	pop	r28
    3466:	df 91       	pop	r29
    3468:	08 95       	ret

0000346a <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    346a:	df 93       	push	r29
    346c:	cf 93       	push	r28
    346e:	00 d0       	rcall	.+0      	; 0x3470 <LCD_displayStringRowColumn+0x6>
    3470:	00 d0       	rcall	.+0      	; 0x3472 <LCD_displayStringRowColumn+0x8>
    3472:	cd b7       	in	r28, 0x3d	; 61
    3474:	de b7       	in	r29, 0x3e	; 62
    3476:	89 83       	std	Y+1, r24	; 0x01
    3478:	6a 83       	std	Y+2, r22	; 0x02
    347a:	5c 83       	std	Y+4, r21	; 0x04
    347c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    347e:	89 81       	ldd	r24, Y+1	; 0x01
    3480:	6a 81       	ldd	r22, Y+2	; 0x02
    3482:	0e 94 f3 19 	call	0x33e6	; 0x33e6 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    3486:	8b 81       	ldd	r24, Y+3	; 0x03
    3488:	9c 81       	ldd	r25, Y+4	; 0x04
    348a:	0e 94 ca 19 	call	0x3394	; 0x3394 <LCD_displayString>
}
    348e:	0f 90       	pop	r0
    3490:	0f 90       	pop	r0
    3492:	0f 90       	pop	r0
    3494:	0f 90       	pop	r0
    3496:	cf 91       	pop	r28
    3498:	df 91       	pop	r29
    349a:	08 95       	ret

0000349c <LCD_integerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_integerToString(int data)
{
    349c:	df 93       	push	r29
    349e:	cf 93       	push	r28
    34a0:	cd b7       	in	r28, 0x3d	; 61
    34a2:	de b7       	in	r29, 0x3e	; 62
    34a4:	62 97       	sbiw	r28, 0x12	; 18
    34a6:	0f b6       	in	r0, 0x3f	; 63
    34a8:	f8 94       	cli
    34aa:	de bf       	out	0x3e, r29	; 62
    34ac:	0f be       	out	0x3f, r0	; 63
    34ae:	cd bf       	out	0x3d, r28	; 61
    34b0:	9a 8b       	std	Y+18, r25	; 0x12
    34b2:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    34b4:	89 89       	ldd	r24, Y+17	; 0x11
    34b6:	9a 89       	ldd	r25, Y+18	; 0x12
    34b8:	9e 01       	movw	r18, r28
    34ba:	2f 5f       	subi	r18, 0xFF	; 255
    34bc:	3f 4f       	sbci	r19, 0xFF	; 255
    34be:	b9 01       	movw	r22, r18
    34c0:	4a e0       	ldi	r20, 0x0A	; 10
    34c2:	50 e0       	ldi	r21, 0x00	; 0
    34c4:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <itoa>
   LCD_displayString(buff); /* Display the string */
    34c8:	ce 01       	movw	r24, r28
    34ca:	01 96       	adiw	r24, 0x01	; 1
    34cc:	0e 94 ca 19 	call	0x3394	; 0x3394 <LCD_displayString>
}
    34d0:	62 96       	adiw	r28, 0x12	; 18
    34d2:	0f b6       	in	r0, 0x3f	; 63
    34d4:	f8 94       	cli
    34d6:	de bf       	out	0x3e, r29	; 62
    34d8:	0f be       	out	0x3f, r0	; 63
    34da:	cd bf       	out	0x3d, r28	; 61
    34dc:	cf 91       	pop	r28
    34de:	df 91       	pop	r29
    34e0:	08 95       	ret

000034e2 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    34e2:	df 93       	push	r29
    34e4:	cf 93       	push	r28
    34e6:	cd b7       	in	r28, 0x3d	; 61
    34e8:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    34ea:	81 e0       	ldi	r24, 0x01	; 1
    34ec:	0e 94 d4 10 	call	0x21a8	; 0x21a8 <LCD_sendCommand>
}
    34f0:	cf 91       	pop	r28
    34f2:	df 91       	pop	r29
    34f4:	08 95       	ret

000034f6 <__vector_9>:

/* call back pointer and set it initially to NULL */
volatile static void (*callBack_ptr)(void) = NULL_PTR;

/* interrupt service routine for normal mode */
ISR(TIMER1_OVF_vect) {
    34f6:	1f 92       	push	r1
    34f8:	0f 92       	push	r0
    34fa:	0f b6       	in	r0, 0x3f	; 63
    34fc:	0f 92       	push	r0
    34fe:	11 24       	eor	r1, r1
    3500:	2f 93       	push	r18
    3502:	3f 93       	push	r19
    3504:	4f 93       	push	r20
    3506:	5f 93       	push	r21
    3508:	6f 93       	push	r22
    350a:	7f 93       	push	r23
    350c:	8f 93       	push	r24
    350e:	9f 93       	push	r25
    3510:	af 93       	push	r26
    3512:	bf 93       	push	r27
    3514:	ef 93       	push	r30
    3516:	ff 93       	push	r31
    3518:	df 93       	push	r29
    351a:	cf 93       	push	r28
    351c:	cd b7       	in	r28, 0x3d	; 61
    351e:	de b7       	in	r29, 0x3e	; 62
	if (callBack_ptr != NULL_PTR) {
    3520:	80 91 e9 00 	lds	r24, 0x00E9
    3524:	90 91 ea 00 	lds	r25, 0x00EA
    3528:	00 97       	sbiw	r24, 0x00	; 0
    352a:	29 f0       	breq	.+10     	; 0x3536 <__vector_9+0x40>
		(*callBack_ptr)();
    352c:	e0 91 e9 00 	lds	r30, 0x00E9
    3530:	f0 91 ea 00 	lds	r31, 0x00EA
    3534:	09 95       	icall
	}
}
    3536:	cf 91       	pop	r28
    3538:	df 91       	pop	r29
    353a:	ff 91       	pop	r31
    353c:	ef 91       	pop	r30
    353e:	bf 91       	pop	r27
    3540:	af 91       	pop	r26
    3542:	9f 91       	pop	r25
    3544:	8f 91       	pop	r24
    3546:	7f 91       	pop	r23
    3548:	6f 91       	pop	r22
    354a:	5f 91       	pop	r21
    354c:	4f 91       	pop	r20
    354e:	3f 91       	pop	r19
    3550:	2f 91       	pop	r18
    3552:	0f 90       	pop	r0
    3554:	0f be       	out	0x3f, r0	; 63
    3556:	0f 90       	pop	r0
    3558:	1f 90       	pop	r1
    355a:	18 95       	reti

0000355c <__vector_7>:

/* interrupt service routine for CTC mode */
ISR(TIMER1_COMPA_vect) {
    355c:	1f 92       	push	r1
    355e:	0f 92       	push	r0
    3560:	0f b6       	in	r0, 0x3f	; 63
    3562:	0f 92       	push	r0
    3564:	11 24       	eor	r1, r1
    3566:	2f 93       	push	r18
    3568:	3f 93       	push	r19
    356a:	4f 93       	push	r20
    356c:	5f 93       	push	r21
    356e:	6f 93       	push	r22
    3570:	7f 93       	push	r23
    3572:	8f 93       	push	r24
    3574:	9f 93       	push	r25
    3576:	af 93       	push	r26
    3578:	bf 93       	push	r27
    357a:	ef 93       	push	r30
    357c:	ff 93       	push	r31
    357e:	df 93       	push	r29
    3580:	cf 93       	push	r28
    3582:	cd b7       	in	r28, 0x3d	; 61
    3584:	de b7       	in	r29, 0x3e	; 62
	if (callBack_ptr != NULL_PTR) {
    3586:	80 91 e9 00 	lds	r24, 0x00E9
    358a:	90 91 ea 00 	lds	r25, 0x00EA
    358e:	00 97       	sbiw	r24, 0x00	; 0
    3590:	29 f0       	breq	.+10     	; 0x359c <__vector_7+0x40>
		(*callBack_ptr)();
    3592:	e0 91 e9 00 	lds	r30, 0x00E9
    3596:	f0 91 ea 00 	lds	r31, 0x00EA
    359a:	09 95       	icall
	}
}
    359c:	cf 91       	pop	r28
    359e:	df 91       	pop	r29
    35a0:	ff 91       	pop	r31
    35a2:	ef 91       	pop	r30
    35a4:	bf 91       	pop	r27
    35a6:	af 91       	pop	r26
    35a8:	9f 91       	pop	r25
    35aa:	8f 91       	pop	r24
    35ac:	7f 91       	pop	r23
    35ae:	6f 91       	pop	r22
    35b0:	5f 91       	pop	r21
    35b2:	4f 91       	pop	r20
    35b4:	3f 91       	pop	r19
    35b6:	2f 91       	pop	r18
    35b8:	0f 90       	pop	r0
    35ba:	0f be       	out	0x3f, r0	; 63
    35bc:	0f 90       	pop	r0
    35be:	1f 90       	pop	r1
    35c0:	18 95       	reti

000035c2 <TIMER1_init>:
/*
 * Discription :
 * initialize timer1 to support both CTC mode and normal mode and
 * the function takes an structure as parameter to set the configurations
 */
void TIMER1_init(TIMER1_ConfigType *config_ptr) {
    35c2:	df 93       	push	r29
    35c4:	cf 93       	push	r28
    35c6:	00 d0       	rcall	.+0      	; 0x35c8 <TIMER1_init+0x6>
    35c8:	cd b7       	in	r28, 0x3d	; 61
    35ca:	de b7       	in	r29, 0x3e	; 62
    35cc:	9a 83       	std	Y+2, r25	; 0x02
    35ce:	89 83       	std	Y+1, r24	; 0x01

	TCCR1A = (1 << FOC1A) | (1 << FOC1B) | (config_ptr->mode & 0x0003);
    35d0:	af e4       	ldi	r26, 0x4F	; 79
    35d2:	b0 e0       	ldi	r27, 0x00	; 0
    35d4:	e9 81       	ldd	r30, Y+1	; 0x01
    35d6:	fa 81       	ldd	r31, Y+2	; 0x02
    35d8:	85 81       	ldd	r24, Z+5	; 0x05
    35da:	83 70       	andi	r24, 0x03	; 3
    35dc:	8c 60       	ori	r24, 0x0C	; 12
    35de:	8c 93       	st	X, r24

	/*
	 * configure timer1 to operate in CTC mode or normal mode and
	 * specify the prescaler
	 */
	TCCR1B = ((config_ptr->mode & 0x000C) << 1) | (config_ptr->prescaler);
    35e0:	ae e4       	ldi	r26, 0x4E	; 78
    35e2:	b0 e0       	ldi	r27, 0x00	; 0
    35e4:	e9 81       	ldd	r30, Y+1	; 0x01
    35e6:	fa 81       	ldd	r31, Y+2	; 0x02
    35e8:	85 81       	ldd	r24, Z+5	; 0x05
    35ea:	88 2f       	mov	r24, r24
    35ec:	90 e0       	ldi	r25, 0x00	; 0
    35ee:	8c 70       	andi	r24, 0x0C	; 12
    35f0:	90 70       	andi	r25, 0x00	; 0
    35f2:	88 0f       	add	r24, r24
    35f4:	99 1f       	adc	r25, r25
    35f6:	98 2f       	mov	r25, r24
    35f8:	e9 81       	ldd	r30, Y+1	; 0x01
    35fa:	fa 81       	ldd	r31, Y+2	; 0x02
    35fc:	84 81       	ldd	r24, Z+4	; 0x04
    35fe:	89 2b       	or	r24, r25
    3600:	8c 93       	st	X, r24

	/*
	 * set TCNT1 with the initial value
	 */
	TCNT1 = config_ptr->initialValue;
    3602:	ac e4       	ldi	r26, 0x4C	; 76
    3604:	b0 e0       	ldi	r27, 0x00	; 0
    3606:	e9 81       	ldd	r30, Y+1	; 0x01
    3608:	fa 81       	ldd	r31, Y+2	; 0x02
    360a:	80 81       	ld	r24, Z
    360c:	91 81       	ldd	r25, Z+1	; 0x01
    360e:	11 96       	adiw	r26, 0x01	; 1
    3610:	9c 93       	st	X, r25
    3612:	8e 93       	st	-X, r24

	/*
	 * set the compera register if working in CTC mode
	 */
	if (config_ptr->mode == CTC) {
    3614:	e9 81       	ldd	r30, Y+1	; 0x01
    3616:	fa 81       	ldd	r31, Y+2	; 0x02
    3618:	85 81       	ldd	r24, Z+5	; 0x05
    361a:	84 30       	cpi	r24, 0x04	; 4
    361c:	51 f4       	brne	.+20     	; 0x3632 <TIMER1_init+0x70>
		OCR1A = config_ptr->compareValue;
    361e:	ea e4       	ldi	r30, 0x4A	; 74
    3620:	f0 e0       	ldi	r31, 0x00	; 0
    3622:	a9 81       	ldd	r26, Y+1	; 0x01
    3624:	ba 81       	ldd	r27, Y+2	; 0x02
    3626:	12 96       	adiw	r26, 0x02	; 2
    3628:	8d 91       	ld	r24, X+
    362a:	9c 91       	ld	r25, X
    362c:	13 97       	sbiw	r26, 0x03	; 3
    362e:	91 83       	std	Z+1, r25	; 0x01
    3630:	80 83       	st	Z, r24
	}

	/*
	 * Enable the interrupt of the specified mode
	 */
	if (config_ptr->mode == NORMAL) {
    3632:	e9 81       	ldd	r30, Y+1	; 0x01
    3634:	fa 81       	ldd	r31, Y+2	; 0x02
    3636:	85 81       	ldd	r24, Z+5	; 0x05
    3638:	88 23       	and	r24, r24
    363a:	29 f4       	brne	.+10     	; 0x3646 <TIMER1_init+0x84>
		TIMSK = (1 << TOIE1);
    363c:	e9 e5       	ldi	r30, 0x59	; 89
    363e:	f0 e0       	ldi	r31, 0x00	; 0
    3640:	84 e0       	ldi	r24, 0x04	; 4
    3642:	80 83       	st	Z, r24
    3644:	04 c0       	rjmp	.+8      	; 0x364e <TIMER1_init+0x8c>
	} else {
		TIMSK = (1 << OCIE1A);
    3646:	e9 e5       	ldi	r30, 0x59	; 89
    3648:	f0 e0       	ldi	r31, 0x00	; 0
    364a:	80 e1       	ldi	r24, 0x10	; 16
    364c:	80 83       	st	Z, r24
	}
}
    364e:	0f 90       	pop	r0
    3650:	0f 90       	pop	r0
    3652:	cf 91       	pop	r28
    3654:	df 91       	pop	r29
    3656:	08 95       	ret

00003658 <TIMER1_deInit>:

/*
 * Description :
 * function to disable timer1 and remove old configurations
 */
void TIMER1_deInit(void) {
    3658:	df 93       	push	r29
    365a:	cf 93       	push	r28
    365c:	cd b7       	in	r28, 0x3d	; 61
    365e:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    3660:	ef e4       	ldi	r30, 0x4F	; 79
    3662:	f0 e0       	ldi	r31, 0x00	; 0
    3664:	10 82       	st	Z, r1
	TCCR1B = 0;
    3666:	ee e4       	ldi	r30, 0x4E	; 78
    3668:	f0 e0       	ldi	r31, 0x00	; 0
    366a:	10 82       	st	Z, r1
	TCNT1 = 0;
    366c:	ec e4       	ldi	r30, 0x4C	; 76
    366e:	f0 e0       	ldi	r31, 0x00	; 0
    3670:	11 82       	std	Z+1, r1	; 0x01
    3672:	10 82       	st	Z, r1
	TIMSK = 0;
    3674:	e9 e5       	ldi	r30, 0x59	; 89
    3676:	f0 e0       	ldi	r31, 0x00	; 0
    3678:	10 82       	st	Z, r1
}
    367a:	cf 91       	pop	r28
    367c:	df 91       	pop	r29
    367e:	08 95       	ret

00003680 <TIMER1_setCallBack>:

/*
 * Description :
 * set the call back pointer
 */
void TIMER1_setCallBack(void (*a_ptr)(void)) {
    3680:	df 93       	push	r29
    3682:	cf 93       	push	r28
    3684:	00 d0       	rcall	.+0      	; 0x3686 <TIMER1_setCallBack+0x6>
    3686:	cd b7       	in	r28, 0x3d	; 61
    3688:	de b7       	in	r29, 0x3e	; 62
    368a:	9a 83       	std	Y+2, r25	; 0x02
    368c:	89 83       	std	Y+1, r24	; 0x01
	callBack_ptr = a_ptr;
    368e:	89 81       	ldd	r24, Y+1	; 0x01
    3690:	9a 81       	ldd	r25, Y+2	; 0x02
    3692:	90 93 ea 00 	sts	0x00EA, r25
    3696:	80 93 e9 00 	sts	0x00E9, r24
}
    369a:	0f 90       	pop	r0
    369c:	0f 90       	pop	r0
    369e:	cf 91       	pop	r28
    36a0:	df 91       	pop	r29
    36a2:	08 95       	ret

000036a4 <UART_init>:
 * Functional responsible for Initialize the UART device by:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(UART_ConfigType *config_ptr) {
    36a4:	df 93       	push	r29
    36a6:	cf 93       	push	r28
    36a8:	00 d0       	rcall	.+0      	; 0x36aa <UART_init+0x6>
    36aa:	00 d0       	rcall	.+0      	; 0x36ac <UART_init+0x8>
    36ac:	cd b7       	in	r28, 0x3d	; 61
    36ae:	de b7       	in	r29, 0x3e	; 62
    36b0:	9c 83       	std	Y+4, r25	; 0x04
    36b2:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    36b4:	1a 82       	std	Y+2, r1	; 0x02
    36b6:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1 << U2X);
    36b8:	eb e2       	ldi	r30, 0x2B	; 43
    36ba:	f0 e0       	ldi	r31, 0x00	; 0
    36bc:	82 e0       	ldi	r24, 0x02	; 2
    36be:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1 << RXEN) | (1 << TXEN);
    36c0:	ea e2       	ldi	r30, 0x2A	; 42
    36c2:	f0 e0       	ldi	r31, 0x00	; 0
    36c4:	88 e1       	ldi	r24, 0x18	; 24
    36c6:	80 83       	st	Z, r24
	UCSRB = (UCSRB & 0xFB) | (config_ptr->bitData & 0x0004);
    36c8:	aa e2       	ldi	r26, 0x2A	; 42
    36ca:	b0 e0       	ldi	r27, 0x00	; 0
    36cc:	ea e2       	ldi	r30, 0x2A	; 42
    36ce:	f0 e0       	ldi	r31, 0x00	; 0
    36d0:	80 81       	ld	r24, Z
    36d2:	98 2f       	mov	r25, r24
    36d4:	9b 7f       	andi	r25, 0xFB	; 251
    36d6:	eb 81       	ldd	r30, Y+3	; 0x03
    36d8:	fc 81       	ldd	r31, Y+4	; 0x04
    36da:	80 81       	ld	r24, Z
    36dc:	84 70       	andi	r24, 0x04	; 4
    36de:	89 2b       	or	r24, r25
    36e0:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1 << URSEL) | (config_ptr->parity << 4)
    36e2:	a0 e4       	ldi	r26, 0x40	; 64
    36e4:	b0 e0       	ldi	r27, 0x00	; 0
    36e6:	eb 81       	ldd	r30, Y+3	; 0x03
    36e8:	fc 81       	ldd	r31, Y+4	; 0x04
    36ea:	81 81       	ldd	r24, Z+1	; 0x01
    36ec:	88 2f       	mov	r24, r24
    36ee:	90 e0       	ldi	r25, 0x00	; 0
    36f0:	82 95       	swap	r24
    36f2:	92 95       	swap	r25
    36f4:	90 7f       	andi	r25, 0xF0	; 240
    36f6:	98 27       	eor	r25, r24
    36f8:	80 7f       	andi	r24, 0xF0	; 240
    36fa:	98 27       	eor	r25, r24
    36fc:	28 2f       	mov	r18, r24
    36fe:	20 68       	ori	r18, 0x80	; 128
    3700:	eb 81       	ldd	r30, Y+3	; 0x03
    3702:	fc 81       	ldd	r31, Y+4	; 0x04
    3704:	82 81       	ldd	r24, Z+2	; 0x02
    3706:	88 2f       	mov	r24, r24
    3708:	90 e0       	ldi	r25, 0x00	; 0
    370a:	88 0f       	add	r24, r24
    370c:	99 1f       	adc	r25, r25
    370e:	88 0f       	add	r24, r24
    3710:	99 1f       	adc	r25, r25
    3712:	88 0f       	add	r24, r24
    3714:	99 1f       	adc	r25, r25
    3716:	28 2b       	or	r18, r24
    3718:	eb 81       	ldd	r30, Y+3	; 0x03
    371a:	fc 81       	ldd	r31, Y+4	; 0x04
    371c:	80 81       	ld	r24, Z
    371e:	88 2f       	mov	r24, r24
    3720:	90 e0       	ldi	r25, 0x00	; 0
    3722:	83 70       	andi	r24, 0x03	; 3
    3724:	90 70       	andi	r25, 0x00	; 0
    3726:	88 0f       	add	r24, r24
    3728:	99 1f       	adc	r25, r25
    372a:	82 2b       	or	r24, r18
    372c:	8c 93       	st	X, r24
			| (config_ptr->stopBit << 3) | ((config_ptr->bitData & 0x03) << 1);

	/* Calculate the UBRR register value */
	ubrr_value = (uint16) (((F_CPU / (config_ptr->baudRate * 8UL))) - 1);
    372e:	eb 81       	ldd	r30, Y+3	; 0x03
    3730:	fc 81       	ldd	r31, Y+4	; 0x04
    3732:	83 81       	ldd	r24, Z+3	; 0x03
    3734:	94 81       	ldd	r25, Z+4	; 0x04
    3736:	a5 81       	ldd	r26, Z+5	; 0x05
    3738:	b6 81       	ldd	r27, Z+6	; 0x06
    373a:	88 0f       	add	r24, r24
    373c:	99 1f       	adc	r25, r25
    373e:	aa 1f       	adc	r26, r26
    3740:	bb 1f       	adc	r27, r27
    3742:	88 0f       	add	r24, r24
    3744:	99 1f       	adc	r25, r25
    3746:	aa 1f       	adc	r26, r26
    3748:	bb 1f       	adc	r27, r27
    374a:	88 0f       	add	r24, r24
    374c:	99 1f       	adc	r25, r25
    374e:	aa 1f       	adc	r26, r26
    3750:	bb 1f       	adc	r27, r27
    3752:	9c 01       	movw	r18, r24
    3754:	ad 01       	movw	r20, r26
    3756:	80 e4       	ldi	r24, 0x40	; 64
    3758:	92 e4       	ldi	r25, 0x42	; 66
    375a:	af e0       	ldi	r26, 0x0F	; 15
    375c:	b0 e0       	ldi	r27, 0x00	; 0
    375e:	bc 01       	movw	r22, r24
    3760:	cd 01       	movw	r24, r26
    3762:	0e 94 7b 1c 	call	0x38f6	; 0x38f6 <__udivmodsi4>
    3766:	da 01       	movw	r26, r20
    3768:	c9 01       	movw	r24, r18
    376a:	01 97       	sbiw	r24, 0x01	; 1
    376c:	9a 83       	std	Y+2, r25	; 0x02
    376e:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value >> 8;
    3770:	e0 e4       	ldi	r30, 0x40	; 64
    3772:	f0 e0       	ldi	r31, 0x00	; 0
    3774:	89 81       	ldd	r24, Y+1	; 0x01
    3776:	9a 81       	ldd	r25, Y+2	; 0x02
    3778:	89 2f       	mov	r24, r25
    377a:	99 27       	eor	r25, r25
    377c:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    377e:	e9 e2       	ldi	r30, 0x29	; 41
    3780:	f0 e0       	ldi	r31, 0x00	; 0
    3782:	89 81       	ldd	r24, Y+1	; 0x01
    3784:	80 83       	st	Z, r24
}
    3786:	0f 90       	pop	r0
    3788:	0f 90       	pop	r0
    378a:	0f 90       	pop	r0
    378c:	0f 90       	pop	r0
    378e:	cf 91       	pop	r28
    3790:	df 91       	pop	r29
    3792:	08 95       	ret

00003794 <UART_sendByte>:

/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data) {
    3794:	df 93       	push	r29
    3796:	cf 93       	push	r28
    3798:	0f 92       	push	r0
    379a:	cd b7       	in	r28, 0x3d	; 61
    379c:	de b7       	in	r29, 0x3e	; 62
    379e:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while (BIT_IS_CLEAR(UCSRA, UDRE)) {
    37a0:	eb e2       	ldi	r30, 0x2B	; 43
    37a2:	f0 e0       	ldi	r31, 0x00	; 0
    37a4:	80 81       	ld	r24, Z
    37a6:	88 2f       	mov	r24, r24
    37a8:	90 e0       	ldi	r25, 0x00	; 0
    37aa:	80 72       	andi	r24, 0x20	; 32
    37ac:	90 70       	andi	r25, 0x00	; 0
    37ae:	00 97       	sbiw	r24, 0x00	; 0
    37b0:	b9 f3       	breq	.-18     	; 0x37a0 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    37b2:	ec e2       	ldi	r30, 0x2C	; 44
    37b4:	f0 e0       	ldi	r31, 0x00	; 0
    37b6:	89 81       	ldd	r24, Y+1	; 0x01
    37b8:	80 83       	st	Z, r24
	/************************* Another Method *************************
	 UDR = data;
	 while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	 SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    37ba:	0f 90       	pop	r0
    37bc:	cf 91       	pop	r28
    37be:	df 91       	pop	r29
    37c0:	08 95       	ret

000037c2 <UART_recieveByte>:

/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void) {
    37c2:	df 93       	push	r29
    37c4:	cf 93       	push	r28
    37c6:	cd b7       	in	r28, 0x3d	; 61
    37c8:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while (BIT_IS_CLEAR(UCSRA, RXC)) {
    37ca:	eb e2       	ldi	r30, 0x2B	; 43
    37cc:	f0 e0       	ldi	r31, 0x00	; 0
    37ce:	80 81       	ld	r24, Z
    37d0:	88 23       	and	r24, r24
    37d2:	dc f7       	brge	.-10     	; 0x37ca <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    37d4:	ec e2       	ldi	r30, 0x2C	; 44
    37d6:	f0 e0       	ldi	r31, 0x00	; 0
    37d8:	80 81       	ld	r24, Z
}
    37da:	cf 91       	pop	r28
    37dc:	df 91       	pop	r29
    37de:	08 95       	ret

000037e0 <UART_sendString>:

/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str) {
    37e0:	df 93       	push	r29
    37e2:	cf 93       	push	r28
    37e4:	00 d0       	rcall	.+0      	; 0x37e6 <UART_sendString+0x6>
    37e6:	0f 92       	push	r0
    37e8:	cd b7       	in	r28, 0x3d	; 61
    37ea:	de b7       	in	r29, 0x3e	; 62
    37ec:	9b 83       	std	Y+3, r25	; 0x03
    37ee:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    37f0:	19 82       	std	Y+1, r1	; 0x01
    37f2:	0e c0       	rjmp	.+28     	; 0x3810 <UART_sendString+0x30>

	/* Send the whole string */
	while (Str[i] != '\0') {
		UART_sendByte(Str[i]);
    37f4:	89 81       	ldd	r24, Y+1	; 0x01
    37f6:	28 2f       	mov	r18, r24
    37f8:	30 e0       	ldi	r19, 0x00	; 0
    37fa:	8a 81       	ldd	r24, Y+2	; 0x02
    37fc:	9b 81       	ldd	r25, Y+3	; 0x03
    37fe:	fc 01       	movw	r30, r24
    3800:	e2 0f       	add	r30, r18
    3802:	f3 1f       	adc	r31, r19
    3804:	80 81       	ld	r24, Z
    3806:	0e 94 ca 1b 	call	0x3794	; 0x3794 <UART_sendByte>
		i++;
    380a:	89 81       	ldd	r24, Y+1	; 0x01
    380c:	8f 5f       	subi	r24, 0xFF	; 255
    380e:	89 83       	std	Y+1, r24	; 0x01
 */
void UART_sendString(const uint8 *Str) {
	uint8 i = 0;

	/* Send the whole string */
	while (Str[i] != '\0') {
    3810:	89 81       	ldd	r24, Y+1	; 0x01
    3812:	28 2f       	mov	r18, r24
    3814:	30 e0       	ldi	r19, 0x00	; 0
    3816:	8a 81       	ldd	r24, Y+2	; 0x02
    3818:	9b 81       	ldd	r25, Y+3	; 0x03
    381a:	fc 01       	movw	r30, r24
    381c:	e2 0f       	add	r30, r18
    381e:	f3 1f       	adc	r31, r19
    3820:	80 81       	ld	r24, Z
    3822:	88 23       	and	r24, r24
    3824:	39 f7       	brne	.-50     	; 0x37f4 <UART_sendString+0x14>
	 {
	 UART_sendByte(*Str);
	 Str++;
	 }
	 *******************************************************************/
}
    3826:	0f 90       	pop	r0
    3828:	0f 90       	pop	r0
    382a:	0f 90       	pop	r0
    382c:	cf 91       	pop	r28
    382e:	df 91       	pop	r29
    3830:	08 95       	ret

00003832 <UART_receiveString>:

/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str) {
    3832:	0f 93       	push	r16
    3834:	1f 93       	push	r17
    3836:	df 93       	push	r29
    3838:	cf 93       	push	r28
    383a:	00 d0       	rcall	.+0      	; 0x383c <UART_receiveString+0xa>
    383c:	0f 92       	push	r0
    383e:	cd b7       	in	r28, 0x3d	; 61
    3840:	de b7       	in	r29, 0x3e	; 62
    3842:	9b 83       	std	Y+3, r25	; 0x03
    3844:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3846:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3848:	89 81       	ldd	r24, Y+1	; 0x01
    384a:	28 2f       	mov	r18, r24
    384c:	30 e0       	ldi	r19, 0x00	; 0
    384e:	8a 81       	ldd	r24, Y+2	; 0x02
    3850:	9b 81       	ldd	r25, Y+3	; 0x03
    3852:	8c 01       	movw	r16, r24
    3854:	02 0f       	add	r16, r18
    3856:	13 1f       	adc	r17, r19
    3858:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <UART_recieveByte>
    385c:	f8 01       	movw	r30, r16
    385e:	80 83       	st	Z, r24
    3860:	0f c0       	rjmp	.+30     	; 0x3880 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while (Str[i] != '#') {
		i++;
    3862:	89 81       	ldd	r24, Y+1	; 0x01
    3864:	8f 5f       	subi	r24, 0xFF	; 255
    3866:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3868:	89 81       	ldd	r24, Y+1	; 0x01
    386a:	28 2f       	mov	r18, r24
    386c:	30 e0       	ldi	r19, 0x00	; 0
    386e:	8a 81       	ldd	r24, Y+2	; 0x02
    3870:	9b 81       	ldd	r25, Y+3	; 0x03
    3872:	8c 01       	movw	r16, r24
    3874:	02 0f       	add	r16, r18
    3876:	13 1f       	adc	r17, r19
    3878:	0e 94 e1 1b 	call	0x37c2	; 0x37c2 <UART_recieveByte>
    387c:	f8 01       	movw	r30, r16
    387e:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while (Str[i] != '#') {
    3880:	89 81       	ldd	r24, Y+1	; 0x01
    3882:	28 2f       	mov	r18, r24
    3884:	30 e0       	ldi	r19, 0x00	; 0
    3886:	8a 81       	ldd	r24, Y+2	; 0x02
    3888:	9b 81       	ldd	r25, Y+3	; 0x03
    388a:	fc 01       	movw	r30, r24
    388c:	e2 0f       	add	r30, r18
    388e:	f3 1f       	adc	r31, r19
    3890:	80 81       	ld	r24, Z
    3892:	83 32       	cpi	r24, 0x23	; 35
    3894:	31 f7       	brne	.-52     	; 0x3862 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3896:	89 81       	ldd	r24, Y+1	; 0x01
    3898:	28 2f       	mov	r18, r24
    389a:	30 e0       	ldi	r19, 0x00	; 0
    389c:	8a 81       	ldd	r24, Y+2	; 0x02
    389e:	9b 81       	ldd	r25, Y+3	; 0x03
    38a0:	fc 01       	movw	r30, r24
    38a2:	e2 0f       	add	r30, r18
    38a4:	f3 1f       	adc	r31, r19
    38a6:	10 82       	st	Z, r1
}
    38a8:	0f 90       	pop	r0
    38aa:	0f 90       	pop	r0
    38ac:	0f 90       	pop	r0
    38ae:	cf 91       	pop	r28
    38b0:	df 91       	pop	r29
    38b2:	1f 91       	pop	r17
    38b4:	0f 91       	pop	r16
    38b6:	08 95       	ret

000038b8 <__mulsi3>:
    38b8:	62 9f       	mul	r22, r18
    38ba:	d0 01       	movw	r26, r0
    38bc:	73 9f       	mul	r23, r19
    38be:	f0 01       	movw	r30, r0
    38c0:	82 9f       	mul	r24, r18
    38c2:	e0 0d       	add	r30, r0
    38c4:	f1 1d       	adc	r31, r1
    38c6:	64 9f       	mul	r22, r20
    38c8:	e0 0d       	add	r30, r0
    38ca:	f1 1d       	adc	r31, r1
    38cc:	92 9f       	mul	r25, r18
    38ce:	f0 0d       	add	r31, r0
    38d0:	83 9f       	mul	r24, r19
    38d2:	f0 0d       	add	r31, r0
    38d4:	74 9f       	mul	r23, r20
    38d6:	f0 0d       	add	r31, r0
    38d8:	65 9f       	mul	r22, r21
    38da:	f0 0d       	add	r31, r0
    38dc:	99 27       	eor	r25, r25
    38de:	72 9f       	mul	r23, r18
    38e0:	b0 0d       	add	r27, r0
    38e2:	e1 1d       	adc	r30, r1
    38e4:	f9 1f       	adc	r31, r25
    38e6:	63 9f       	mul	r22, r19
    38e8:	b0 0d       	add	r27, r0
    38ea:	e1 1d       	adc	r30, r1
    38ec:	f9 1f       	adc	r31, r25
    38ee:	bd 01       	movw	r22, r26
    38f0:	cf 01       	movw	r24, r30
    38f2:	11 24       	eor	r1, r1
    38f4:	08 95       	ret

000038f6 <__udivmodsi4>:
    38f6:	a1 e2       	ldi	r26, 0x21	; 33
    38f8:	1a 2e       	mov	r1, r26
    38fa:	aa 1b       	sub	r26, r26
    38fc:	bb 1b       	sub	r27, r27
    38fe:	fd 01       	movw	r30, r26
    3900:	0d c0       	rjmp	.+26     	; 0x391c <__udivmodsi4_ep>

00003902 <__udivmodsi4_loop>:
    3902:	aa 1f       	adc	r26, r26
    3904:	bb 1f       	adc	r27, r27
    3906:	ee 1f       	adc	r30, r30
    3908:	ff 1f       	adc	r31, r31
    390a:	a2 17       	cp	r26, r18
    390c:	b3 07       	cpc	r27, r19
    390e:	e4 07       	cpc	r30, r20
    3910:	f5 07       	cpc	r31, r21
    3912:	20 f0       	brcs	.+8      	; 0x391c <__udivmodsi4_ep>
    3914:	a2 1b       	sub	r26, r18
    3916:	b3 0b       	sbc	r27, r19
    3918:	e4 0b       	sbc	r30, r20
    391a:	f5 0b       	sbc	r31, r21

0000391c <__udivmodsi4_ep>:
    391c:	66 1f       	adc	r22, r22
    391e:	77 1f       	adc	r23, r23
    3920:	88 1f       	adc	r24, r24
    3922:	99 1f       	adc	r25, r25
    3924:	1a 94       	dec	r1
    3926:	69 f7       	brne	.-38     	; 0x3902 <__udivmodsi4_loop>
    3928:	60 95       	com	r22
    392a:	70 95       	com	r23
    392c:	80 95       	com	r24
    392e:	90 95       	com	r25
    3930:	9b 01       	movw	r18, r22
    3932:	ac 01       	movw	r20, r24
    3934:	bd 01       	movw	r22, r26
    3936:	cf 01       	movw	r24, r30
    3938:	08 95       	ret

0000393a <__prologue_saves__>:
    393a:	2f 92       	push	r2
    393c:	3f 92       	push	r3
    393e:	4f 92       	push	r4
    3940:	5f 92       	push	r5
    3942:	6f 92       	push	r6
    3944:	7f 92       	push	r7
    3946:	8f 92       	push	r8
    3948:	9f 92       	push	r9
    394a:	af 92       	push	r10
    394c:	bf 92       	push	r11
    394e:	cf 92       	push	r12
    3950:	df 92       	push	r13
    3952:	ef 92       	push	r14
    3954:	ff 92       	push	r15
    3956:	0f 93       	push	r16
    3958:	1f 93       	push	r17
    395a:	cf 93       	push	r28
    395c:	df 93       	push	r29
    395e:	cd b7       	in	r28, 0x3d	; 61
    3960:	de b7       	in	r29, 0x3e	; 62
    3962:	ca 1b       	sub	r28, r26
    3964:	db 0b       	sbc	r29, r27
    3966:	0f b6       	in	r0, 0x3f	; 63
    3968:	f8 94       	cli
    396a:	de bf       	out	0x3e, r29	; 62
    396c:	0f be       	out	0x3f, r0	; 63
    396e:	cd bf       	out	0x3d, r28	; 61
    3970:	09 94       	ijmp

00003972 <__epilogue_restores__>:
    3972:	2a 88       	ldd	r2, Y+18	; 0x12
    3974:	39 88       	ldd	r3, Y+17	; 0x11
    3976:	48 88       	ldd	r4, Y+16	; 0x10
    3978:	5f 84       	ldd	r5, Y+15	; 0x0f
    397a:	6e 84       	ldd	r6, Y+14	; 0x0e
    397c:	7d 84       	ldd	r7, Y+13	; 0x0d
    397e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3980:	9b 84       	ldd	r9, Y+11	; 0x0b
    3982:	aa 84       	ldd	r10, Y+10	; 0x0a
    3984:	b9 84       	ldd	r11, Y+9	; 0x09
    3986:	c8 84       	ldd	r12, Y+8	; 0x08
    3988:	df 80       	ldd	r13, Y+7	; 0x07
    398a:	ee 80       	ldd	r14, Y+6	; 0x06
    398c:	fd 80       	ldd	r15, Y+5	; 0x05
    398e:	0c 81       	ldd	r16, Y+4	; 0x04
    3990:	1b 81       	ldd	r17, Y+3	; 0x03
    3992:	aa 81       	ldd	r26, Y+2	; 0x02
    3994:	b9 81       	ldd	r27, Y+1	; 0x01
    3996:	ce 0f       	add	r28, r30
    3998:	d1 1d       	adc	r29, r1
    399a:	0f b6       	in	r0, 0x3f	; 63
    399c:	f8 94       	cli
    399e:	de bf       	out	0x3e, r29	; 62
    39a0:	0f be       	out	0x3f, r0	; 63
    39a2:	cd bf       	out	0x3d, r28	; 61
    39a4:	ed 01       	movw	r28, r26
    39a6:	08 95       	ret

000039a8 <itoa>:
    39a8:	fb 01       	movw	r30, r22
    39aa:	9f 01       	movw	r18, r30
    39ac:	e8 94       	clt
    39ae:	42 30       	cpi	r20, 0x02	; 2
    39b0:	c4 f0       	brlt	.+48     	; 0x39e2 <itoa+0x3a>
    39b2:	45 32       	cpi	r20, 0x25	; 37
    39b4:	b4 f4       	brge	.+44     	; 0x39e2 <itoa+0x3a>
    39b6:	4a 30       	cpi	r20, 0x0A	; 10
    39b8:	29 f4       	brne	.+10     	; 0x39c4 <itoa+0x1c>
    39ba:	97 fb       	bst	r25, 7
    39bc:	1e f4       	brtc	.+6      	; 0x39c4 <itoa+0x1c>
    39be:	90 95       	com	r25
    39c0:	81 95       	neg	r24
    39c2:	9f 4f       	sbci	r25, 0xFF	; 255
    39c4:	64 2f       	mov	r22, r20
    39c6:	77 27       	eor	r23, r23
    39c8:	0e 94 05 1d 	call	0x3a0a	; 0x3a0a <__udivmodhi4>
    39cc:	80 5d       	subi	r24, 0xD0	; 208
    39ce:	8a 33       	cpi	r24, 0x3A	; 58
    39d0:	0c f0       	brlt	.+2      	; 0x39d4 <itoa+0x2c>
    39d2:	89 5d       	subi	r24, 0xD9	; 217
    39d4:	81 93       	st	Z+, r24
    39d6:	cb 01       	movw	r24, r22
    39d8:	00 97       	sbiw	r24, 0x00	; 0
    39da:	a1 f7       	brne	.-24     	; 0x39c4 <itoa+0x1c>
    39dc:	16 f4       	brtc	.+4      	; 0x39e2 <itoa+0x3a>
    39de:	5d e2       	ldi	r21, 0x2D	; 45
    39e0:	51 93       	st	Z+, r21
    39e2:	10 82       	st	Z, r1
    39e4:	c9 01       	movw	r24, r18
    39e6:	0c 94 f5 1c 	jmp	0x39ea	; 0x39ea <strrev>

000039ea <strrev>:
    39ea:	dc 01       	movw	r26, r24
    39ec:	fc 01       	movw	r30, r24
    39ee:	67 2f       	mov	r22, r23
    39f0:	71 91       	ld	r23, Z+
    39f2:	77 23       	and	r23, r23
    39f4:	e1 f7       	brne	.-8      	; 0x39ee <strrev+0x4>
    39f6:	32 97       	sbiw	r30, 0x02	; 2
    39f8:	04 c0       	rjmp	.+8      	; 0x3a02 <strrev+0x18>
    39fa:	7c 91       	ld	r23, X
    39fc:	6d 93       	st	X+, r22
    39fe:	70 83       	st	Z, r23
    3a00:	62 91       	ld	r22, -Z
    3a02:	ae 17       	cp	r26, r30
    3a04:	bf 07       	cpc	r27, r31
    3a06:	c8 f3       	brcs	.-14     	; 0x39fa <strrev+0x10>
    3a08:	08 95       	ret

00003a0a <__udivmodhi4>:
    3a0a:	aa 1b       	sub	r26, r26
    3a0c:	bb 1b       	sub	r27, r27
    3a0e:	51 e1       	ldi	r21, 0x11	; 17
    3a10:	07 c0       	rjmp	.+14     	; 0x3a20 <__udivmodhi4_ep>

00003a12 <__udivmodhi4_loop>:
    3a12:	aa 1f       	adc	r26, r26
    3a14:	bb 1f       	adc	r27, r27
    3a16:	a6 17       	cp	r26, r22
    3a18:	b7 07       	cpc	r27, r23
    3a1a:	10 f0       	brcs	.+4      	; 0x3a20 <__udivmodhi4_ep>
    3a1c:	a6 1b       	sub	r26, r22
    3a1e:	b7 0b       	sbc	r27, r23

00003a20 <__udivmodhi4_ep>:
    3a20:	88 1f       	adc	r24, r24
    3a22:	99 1f       	adc	r25, r25
    3a24:	5a 95       	dec	r21
    3a26:	a9 f7       	brne	.-22     	; 0x3a12 <__udivmodhi4_loop>
    3a28:	80 95       	com	r24
    3a2a:	90 95       	com	r25
    3a2c:	bc 01       	movw	r22, r24
    3a2e:	cd 01       	movw	r24, r26
    3a30:	08 95       	ret

00003a32 <_exit>:
    3a32:	f8 94       	cli

00003a34 <__stop_program>:
    3a34:	ff cf       	rjmp	.-2      	; 0x3a34 <__stop_program>
